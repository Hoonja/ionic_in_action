8. 코르도바 플러그인 사용하기

<< 상자 시작 >>
  이 장에서 다룰 내용
  * 코르도바 플러그인으로 네이티브 기능 사용하기
  * 코르도바를 디바이스에 쉽게 통합하기
  * 리조트 앱을 카메라와 사진첩 기능을 추가해서 개선하기
  * 지오로케이션을 적용하여 날씨 앱 개선하기
<< 상자 끝 >>

이 책에서 지금까지 만들어온 앱으로도 꽤 넓은 범위의 재미있는 것들을 할 수 있었지만, 디바이스의 기능을 완전히 이용할 수는 없었다. 이번 장에서는 코르도바 플러그인 커뮤니티를 활용하여 여러분의 앱을 장치와 더 깊이 통합시킴으로써 풍부하게 하는 방법을 알아보겠다.
지금까지 앱을 개발하면서 우리는 코르도바를 사용해 왔다. 왜냐하면 코르도바가 바로 우리가 만든 웹 애플리케이션을 네이티브 앱으로 감싸기 위해 사용한 플랫폼이기 때문이다. 코르도바는 핵심 기능을 가진 코어 세트를 가지고 있고, 여기에 기능을 확장하기 위한 플러그인 시스템을 가지고 있다. 플러그인을 통해 카메라와 같은 네이티브 기능을 사용하기 위해 네이티브 언어를 사용하는 대신 자바스크립트로 구현할 수 있는 방법을 제공한다.
또한 ngCordova에 대해서 알아볼 예정인데, ngCordova는 아이오닉 커뮤니티에서 운영하는 프로젝트로 공통적으로 사용되는 다수의 코르도바 플러그인을 아이오닉과 같은 AngularJS 애플리케이션에 쉽게 통합할 수 있게 만들어 준다. 가능하다면, 플러그인을 그 자체로 직접 사용하는 대신에 ngCordova를 쓰고 싶어질 것이다.
이전에 만들었던 예제에 네이티브 기능을 추가하기 위해 코르도바 플러그인을 사용하는 예제를 살펴볼 것이다. 전에 예제를 안 만들었더라도, 이번에 시작하기 전에 기존의 완료된 프로젝트 상태에서 시작할 것이다.
코르도바는 여기에서 다루는 것 이상으로 굉장히 강력한 플랫폼이다. Apache Cordova in Action(레이몬드 K. 캠든 저, 매닝 출판사, 2015년)라는 책을 통해 코르도바를 더 깊이 파보기를 추천한다.

<< 상자 시작 >>
  코르도바는 언제나 진화 중

  이 장의 모든 예제와 코드는 정기적으로 업데이트 된다. 코르도바 플러그인 에코시스템은 장치와 플랫폼에 대응하기 위해 빠르게 진화한다. 이 장에서 사용된 플러그인은 코르도바 CLI 4.2.0을 사용하여 작성되었고, 플러그인의 버전은 각각의 예제 안에 기록해 두었다.
<< 상자 끝 >>

8.1 코르도바 플러그인
대부분의 경우 현재의 웹 브라우저에서 작동하는 것은 하이브리드 앱에서도 작동될 것이다. 그러나 앱은 종종 브라우저에서 지원되는 것 이상의 것을 필요로 한다.
장치는 수 많은 센서와 기능을 탑재하고 있다. 카메라라던가 가속 센서등이 그렇다. 이런 부분은 브라우저의 기능이 아니기 때문에 코르도바 플러그인이라는 형태로 구현된다.
코르도바는 플러그인 구조를 가지고 있어서, 코르도바 코어 부분 외에도 새로운 기능을 추가할수 있다. 어떤 플러그인은 코르도바 프로젝트의 공식적인 파트로 존재하고, 나머지는 커뮤니티에 의해 제출 및 유지된다. 예를 들어, 아이오닉 팀은 코르도바를 위한 키보드 플러그인을 서밋했다. 수백 개에 이르는 코르도바 플러그인은 http://plugins.cordova.io/npm/index.html에서 검색할 수 있다.
공식적으로 지원되는 플러그인은 코르도바 환경의 변화에도 잘 대응해서 운영되고 있는 반면에 커뮤니티의 플러그인은 공식적인 지원 범위의 밖에 있다. 따라서 항상 플러그인을 사용하기 전에 현재 사용중인 코르도바의 버전에서 잘 작동하는지 검토하는 것이 좋다.
플러그인이 계속적으로 유지 운영이 되지 않을 수도 있기 때문에, 처음 사용할 당시에는 작동 했을지라도 계속 관리되고 있는지 상황을 주시해야 한다. 버그를 찾을 경우에는 (보통 GitHub에 호스팅 되어 있는)소스 코드 프로젝트에 티켓이나 이슈를 발행하는 것이 대체로 최선의 해결책이다. 아니면, 플러그인의 소유자가 한동안 관리를 해오지 않았다면, 해당 코드를 베이스로 해서 여러분 독자적으로 가지를 치는 것도 고려해봄직 하다. 그러나 일반적으로는 해당 코드 자체에서 문제를 해결하는 것이 최선이다.
한편, 여러분만의 코르도바 플러그인을 만들수도 있다. 다만, 이를 위해서는 플러그인이 지원할 네이티브 플랫폼에서 동작하는 방법을 알아야 한다. 이미 존재하는 플러그인들로 해결이 되지 않는다면, 코르도바 플러그인을 만들기 위해 자바나 스위프트같은 네이티브 언어를 알아야만 한다.

8.1.1 플러그인 사용시 고려할 점
바로 플러그인을 사용해 보고 싶겠지만, 프로젝트에 포함시키기 전에 검토해야만 하는 몇 가지 고려 사항들이 있다.

플러그인이 언제나 필요한 것은 아니다
플러그인을 골라 사용하기 전에 꼭 필요한 것인지 고민해야 된다. 때때로 특정 기능은 플러그인 없이 브라우저만으로 사용할 수 있는데, 기본적인 네트웍 커넥션이 그런 경우이다. 코르도바 커넥션 플러그인을 써야할 이유가 없다. 많은 플러그인들이 에전에 만들어진 것들인데, 그 당시에는 브라우저에 기능이 빠져 있어서 이를 추가하기 위한 것이었지만, 플랫폼이 발전하면서 많은 기능들이 브라우저로 편입되었다.

플러그인 사용을 위해 권한이 필요한 경우가 있다
유저가 승인해야 하는 권한을 필요로 할수 있다. 지오로케이션은 앱이 장치의 위치 정보에 접근하기 전에 권한 획득을 필요로 한다. 플랫폼에 따라 권한 구현 방식이 다르기 때문에 기능이 어떻게 구현되었는지, 사용자에게 무슨 영향을 주는지 사전에 확인해야 한다.

플러그인도 제한 사항이 있을 수 있다
잘 만든 플러그인은 문서화가 잘 되어 있고, 각 플랫폼에 따라 어떤 제약조건을 가지는지 잘 명기되어 있다. 예컨대, iOS와 안드로이드는 연락처 목록을 저장하는 방식이 약간 달라서 플러그인이 두 플랫폼에 대해서 같은 데이터를 반환하지 못할 수 있다.

플랫폼 업데이트로 인해 플러그인 업데이트가 수반되어야 할 수 있다
불가피하게도 플랫폼은 진화를 계속하면서 그들의 API를 바꿔 나간다. 코르도바도 플랫폼의 API를 사용하기 때문에, 안드로이드나 iOS가 업데이트 되면 플러그인도 최신의 기능을 지원하기 위해서 업데이트가 필요할 수 있다. 플러그인 내부에서 사용하던 API가 없어지거나 바뀌어 앱이 깨지는 경우도 일어날 수 있다. 아무리 플랫폼이 하위 호환성을 유지하는 방향을 갖고 있다고 해도 말이다.

플러그인도 버그가 있을 수 있다
언급했던 몇 가지 플러그인들은 코르도바 프로젝트의 일부분으로서 가장 지원이 잘되고 있는 편이다. 그러나 누구나 플러그인을 제출할 수 있고, 최소한의 품질에 대한 명확한 제약사항도 없는 것이 현실이다.

8.1.2 플러그인 설치
커맨드 라인으로 플러그인을 설치할 수 있다. http://plugins.cordova.io에서 플러그인을 검색할 수도 있고, 커맨드 라인으로 검색할 수도 있다. notification 플러그인을 찾기 위한 커맨드 라인은 다음과 같다.

$ cordova plugin search notification

이 명령으로 notification에 관련된 모든 플러그인의 목록이 나타날 것이다. 플러그인의 아이디와 간단한 설명도 첨부되어 있는데, 플러그인을 설치할 때 이 아이디를 사용한다. 아이오닉은 org.apache.cordova.device와 com.ionic.keyboard와 같은 플러그인 몇 개는 기본으로 탑재하고 있다. 공식 notification 플러그인을 설치하는 방법은 다음과 같다.

$ cordova plugin add org.apache.cordova.dialogs

최신의 플러그인이 다운로드 되어 plugins 폴더에 추가될 것이다. 프로젝트마다, 플러그인 마다, 위의 명령을 한번씩 호출만 해주면 된다. 프로젝트가 빌드될 때, 설치된 플러그인도 자동으로 추가된다. plugins 폴더를 열어보면 현재 설치된 플러그인들을 확인할 수 있다.

8.1.3 플러그인 사용하기
플러그인마다 동작은 조금씩 다르지만, 이들은 모두 자바스크립트 서비스를 노출하고 있어서 여러분이 플러그인을 조작할 수 있다. 카메라를 사용하기 위한 API는 navigator.camera 객체를 통해 노출된다. 플러그인을 설치하고 앱을 에뮬레이터나 장치에서 구동시키면 자동으로 API를 노출한다.
앱과 플러그인 모두 준비 완료된 상태가 되기 전에는 사용할 수 없다. 앱이 로딩되는 사이에는 많은 일들이 비동기적으로 발생한다. 이 때문에 코르도바는 플러그인이 사용 가능한 상태가 되기를 기다리는 deviceready 이벤트를 제공한다. 한번 발생하고 사라지는 여타의 이벤트들과는 달리 deviceready 이벤트에 대한 리스너는 이벤트 발생 후에 추가 되더라도 콜백을 처리할 수 있다. 이렇게 하면 준비 완료 전에 플러그인 사용을 시도함으로 인해 발생되는 오류를 피할수 있게 된다. 코르도바 기능을 호출하는 부분은 deviceready 리스너로 감싸야한다. 다음의 두 리스트는 호출 부분은 동일하지만, 하나는 자바스크립트의 addEventListener 메소드를 사용하고 있고 나머지는 $ionicPlatform.ready 메소드를 사용하고 있다. 아이오닉 프로젝트가 기본으로 생성해주는 키보드 플러그인 설정 코도를 두 가지 방식으로 구현한 예제이다.
두 리스트 모두 각각의 방식으로 deviceready 이벤트 리스너를 추가하고 있다.

<< 리스트 시작 >>
  리스트 8.1 네이티브 자바스크릡트로 플러그인 사용하기

  deviceready 이벤트에 대한 리스너 추가
  Keyboard 플러그인 메소드 호출
  코르도바와 플러그인이 사용 가능한 상태인지 확인
<< 리스트 끝 >>

<< 리스트 시작 >>
  리스트 8.2 아이오닉으로 플러그인 사용하기

  AngularJS는 준비 상태이지만 앱이 실행되기 전 상태로, 몇 가지 로직을 실행
  $ionicPlatform.ready 메소드로 이벤트 리스너를 추가
  코르도바가 준비된 상태에서 Keyboard 플러그인 메소드를 호출
<< 리스트 끝 >>

코르도바와 keyboard 플러그인 설정이 완료되면 앱은 hideKeyboardAccesoryBar 메소드를 호출할 것이다. 아이오닉을 사용한다면 $ionicPlatform 사용을 권장하며, 이 장의 나머지 부분도 이렇게 구현할 것이다.

8.1.4 에뮬레이터에서 플러그인 사용하기
2장에서 에뮬레이터는 실제의 장치와 동일한 경험을 제공하지 못한다고 했었다. 코르도바 플러그인을 사용할 때 실제 장치에서 앱을 테스트하는 것은 더욱 중요한데, 보통은 에뮬레이터에서도 테스트 할 수 있다.
대부분의 플러그인은 에뮬레이터에서도 잘 동작할 것이다. 기능에 따라 다르지만, 에뮬레이터로 시뮬레이션을 해보거나 기대한 값을 변경할 수 있을 것이다. 예를 들어 에뮬레이터가 실제로 그 위치로 가지 않고도 다른 장소를 시뮬레이션 할 수 있도록 지리 좌표를 바꿀 수 있다.
어떤 기능들은 에뮬레이터에서 가능하지 않거나 좀 다르게 행동할 수도 있다. 에뮬레이터는 가상의 장치기 때문에 물리적 장치가 가진 기능의 일부는 쉽게 가상화 할 수 있다. iOS에서는 에뮬레이터에서 카메라 기능을 쓸 수 있는 방법이 없다.
또 어떤 플러그인은 에뮬레이터가 기능을 지원하지 않아 작동하지 않는다. 계속 실패하고 있다면 에뮬레이터에서 실행될 수 있는지 여부를 도큐먼트를 통해 확인해야 한다. 이런 문제에 대한 에러 리포팅은 좋은 방법이 아니고, 트러블슈팅 단계에서 점검해야 할 것들이다. 연결된 장치를 사용하는 것이 이 문제를 피하는데 도움이 될 것이다. 가능하면 실제 디바이스를 사용하기를 권한다.

8.1.5 플랫폼에 따른 제약
어떤 플러그인은 한 가지 형태의 장치에서만 동작하도록 만들어 지기도 하고, 또 어떤 것들은 플랫폼에 따라 다르게 행동하기도 한다. 이는 하나의 플러그인으로 다중 플랫폼의 유사 기능을 추상화 해서 소화하는 것으로 인해 발생되는 사이드 이펙트이다.
local notification 플러그인은 구현된 방식 때문에 iOS 8에 대해서 변경되어야만 했다. 버전 8에서 iOS는 알림이 추가되기 전에 유저의 승인을 받기 시작했고, 이 때문에 플러그인도 적응해야 했다.
액션 시트를 위한 플러그인의 경우 iOS에서는 액션 시트를 사용하고, 안드로이드에서는 얼럿 대화상자를 사용해서 구현되었다. 가능한 선택지를 보여주는 구현을 위해 가장 근접한 방법을 사용한 것인데, 플러그인도 유연해야한다.
터치 ID 플러그인은 iOS만을 위한 것이다. 안드로이드에는 유사한 기능이 없기 때문이다. 터치 ID는 최근에 아이폰과 아이패드에서 지문을 통한 인증을 위해 홈 버튼에 추가한 기능이지만, 안드로이드는 같은 성격의 지원이 없다.

8.1.6 AngularJS와 코르도바 감잡기
이제 AngularJS 개발에 들어선 개발자들이 코르도바를 이용하게 될 때 맞딱드리게 되는 일들이 몇 가지 있다. 다음 절에서 다룰 ngCordova가 이런 문제들을 해결해주는데, 모든 플러그인을 지원하는 것은 아니다.
AngularJS는 digest loop라 불리는 것을 갖고 있다(그림 8.1). AngularJS는 digest loop에서 이벤트가 발생할 때 (two-way 바인딩 같은 것을 지원하기 위해)변수의 변화를 추적할수 있다. 이 루프는 닫힌 시스템으로 자바스크립트는 digest loop와 무관하게 실행될 수 있다. 그러나 이렇게 하면 AngularJS가 변화를 감지할 수 없다. AngularJS의 바깥에서 발생하는 일들도 실행은 잘되지만, 이렇게 되면 AngularJS가 어떤 트리거도 받지 못하고 실행되게 될 것이다. digest cycle은 어떤 일이 발생하면 통지를 받아야 하며, 그렇지 않으면 AngularJS가 변화를 감지하지 못하고, digest cycle을 실행하지 않는다.
대부분의 고민은 AngularJS의 digest loop의 바깥에서 실행되는 코드에 관해 AngularJS가 알수 있도록 하는데에 있다. AngularJS는 변화가 발생했다는 사실을 통지해줄수 있는 기능을 제공하는데, 이를 통해 새 digest loop가 변화된 내용을 갱신할 수 있도록 한다. 예를 들어, 장치의 지오로케이션 기능을 요청해서, 사용자의 움직임에 따라 지도의 위치를 바꿔줄 수 있다. 기본적으로 코르도바 지오로케이션 플러그인은 위치를 갱신하지만, 다음 digest cycle이 발생할 때까지 바뀌는 것은 없다. 이를 위해 여러분이 직접 이벤트를 발생시키거나, 다른 변경 이벤트가 발생할 때까지 기다려야 한다.
한편, 코르도바 플러그인을 사용할 때, 콘트롤러에 주입할 수 있는 AngularJS 서비스가 없다는 사실을 유념하는 것도 중요한 일이다. 플러그인 서비스를 전역으로 사용할 수 있는 형태라서 그냥 사용하면 되기 때문에 서비스 주입이 필수적인 것은 아니다(이것은 플러그인에 따라 다르다. 공식 플러그인은 서비스가 추가된 전역 navigator 객체를 사용하는 편이다).

<< 그림 시작 >>
  Templace : 템플릿
  Compile : 컴파일
  View : 뷰
  Digest cycle : 번역 불필요
  Model : 모델
  Changes to model update view : 모델이 뷰를 갱신하는 변경 내역
  Changes to view update model : 뷰가 모델을 갱신하는 변경 내역

  그림 8.1 AngularJS의 digest loop (AngularJS in Action에서 인용)
<< 그림 끝 >>

장치의 위치를 알기 위해 지오로케이션 플러그인을 사용하는 예제를 살펴보자. 코르도바가 어떤 작업을 완료한 후 AngularJS를 업데이트 하기 위해, $scope.$apply() 메소드를 사용한다.

<< 리스트 시작 >>
  리스트 8.3 AngularJS 업데이트를 위해 $apply 사용

  (윗줄 왼쪽->오른쪽)
  콘트롤러를 생성하지만 navigator 객체를 주입하지 않음(navigator는 전역 객체이기 때문)
  플러그인이 사용가능한 상태에서 호출하기 위해 $ionicPlatform.ready로 감쌈
  (아랫줄 왼쪽->오른쪽)
  AngularJS가 digest loop를 실행하도록 $scope.$apply() 호출
  $scope에 위치를 대입하지만, 자동으로 digest loop를 실행하지는 않음
  콜백 함수를 가지는 코르도바 지오로케이션 플러그인 호출
<< 리스트 끝 >>

예제는 장치의 위치를 받아오는 간단한 콘크롤러이다. navigator 서비스를 따로 주입할 필요는 없는데, 이 객체는 AngularJS의 DI 시스템 바깥에 있는 전역 객체이기 때문이다. getCurrentPosition() 메소드가 호출할 때, 앱은 위치 정보가 반환될 때 이를 처리할 콜백함수를 넘겨준다. 위치가 넘어오면, 스코프에 저장한다. 그러나 지오로케이션은 AngularJS의 서비스가 아니기 때문에, AngularJS는 언제 이 작업이 끝났는지 알지 못하고, 위치가 갱신되어도 스코프를 갱신하지 않는다. 그래서 $scope.apply()를 호출하는 것인데, 이렇게 하면 AngualrJS가 스코프가 바뀌었고 갱신이 필요함을 인식하게 된다.
예제에서 지오로케이션 호출이 실패하면(사용자가 앱의 위치 정보 접근을 차단한 경우와 같은 이유로), $scope.location 값을 설정하지 않고 진행된다. 앱은 이런 경우도 처리할 수 있어야 한다.
마지막으로, 코르도바 플러그인은 다른 자바스크립트 API를 사용해서 구현했을 수 있다. 같은 기능을 구현했지만 작동 방식은 다른, 여러가지 플러그인이 있을 수 있다. 예컨대, 어떤 플러그인은 콜백을 사용한 반면에, 어떤 것은 비동기 호출을 처리하기 위해 프로미스를 사용할 수 있다. 각 플러그인을 검토하고 구조를 이해해서 적절히 연동애야 한다.

8.1.7 장치나 에뮬레이터를 사용할 때 벌어지는 문제를 해결하기
때때로 뭔가 어긋나고 있는 것 같을 때가 있는데, 이는 예기치 않게 세팅을 잘못했거나 연결된 장치로 빌드할 때의 문제로 인하기도 한다. 여기 곤경에 처했을 때 시도할 수 있는 몇 가지 팁을 알려주겠다. 장치나 플랫폼에 따라 다르기 때문에, 다른 해결책이 더 나은 방법이 될 수도 있다.

장치를 끊었다가 다시 연결하기
장치가 연결되었음에도 제대로 통신이 안되는 경우가 있는데, 그냥 다시 연결하는 것으로 정리되는 경우가 있다.

장치와 컴퓨터를 껐다 켜기
구관이 명관이라고, 리부팅으로 멋지게 해결할 수 있다. 필자는 디바이스와 컴퓨터 둘 다 리부팅하기를 권하는데, 컴퓨터의 재부팅이 완료될 때까지 장치는 연결하지 않도록 한다.

Xcode, 안드로이드 스튜디오로 빌드하기
iOS 앱을 만들고 있다면, Xcode로 프로젝트를 빌드해보고, 안드로이의 경우에는 안드로이드 스튜디오로 해본다. 커맨드라인의 동작이 다를수 있기 때문에, Xcode/안드로이드 스튜디오로 직접 실행하는 것은 커맨드라인이 실패할 때도 작동한다.

에뮬레이터를 초기화 하거나 다시 빌드하기
에뮬레이터는 초기화 시키거나 재빌드를 할 수 있다. 이를 통해 에뮬레이터가 마치 신품인 것처럼 만들수 있고, 기존에 했던 변경 내용도 무시할 수 있다. 기존에 얻은 정보가 없는 무의 상태에서도 잘 작동하는지 알고 싶을 때 유용한 방법이다.

장치로부터 앱을 제거하고 다시 빌드하기
장치 연결을 해제하고 앱을 제거한다. 이미 앱이 설치된 상태이고, 그냥 실행해도 문제를 일으키지 않는 경우라고 해도, 다시 빌드하고 신선한 버전을 배포하는 것이 도움이 될 때가 있다.

플러그인을 제거했다가 다시 추가
플랫폼의 경우처럼 플러그인도 때때로 에러를 토한다. cordova plugin remove [plugin] 명령으로 플러그인을 제거하거나 plugins 폴더에서 제거하는 방법이 있다. 폴더 전체를 날렸다면, 모든 플러그인을 다시 추가해줘야 한다.

플랫폼을 제거했다가 다시 추가
장치로 앱을 빌드할 수 없는 오류에 직면했을 때, 필자는 보통 플랫폼을 제거했다가 다시 추가한다. cordova platform remove ios나 프로젝트 내의 platforms 폴더를 직접 삭제하는 방법으로 플랫폼 제거를 할 수 있다.

새 프로젝트로 만들기(-_-;;)
최후의 수단으로, 새로 프로젝트를 만들고 변경 내용을 복사하는 방법이 있다. www 디렉토리 하위의 파일들을 복사하고, 플러그인과 플랫폼을 추가한다.

코르도바와 아이오닉의 버전 확인
코르도바와 아이오닉을 업데이트 할 경우가 있다. 또한, iOS에서는 ios-sim과 ios-deploy를 업데이트 해야 할지 확인해야 할 수 있다. 이들은 모두 노드 패키지로, npm update -g [program]을 실행해서 업데이트 한다. 코르도바를 업데이트 한다면, cordova platform update [plaform]도 함께 실행해야 한다. 이 때 업데이트가 기능 변경으로 인한 문제를 발생시키는 경우를 대비해서 프로젝트를 미리 백업해 두는 것이 좋다.

8.2 ngCordova
코르도바 플러그인은 굉장한 기능을 많이 제공하지만, AngularJS의 서비스를 사용하던 방식으로 기능을 쓸 수는 없다. ngCordova 프로젝트는 아이오닉 커뮤니티에서 시작한 프로젝트로 코르도바 서비스를 AngularJS 서비스의 모습으로 만든 것이다. ngCordova가 아이오닉만을 위해서 만든 것은 아니지만, 아이오닉을 염두해두고 만들어진건 사실이다. ngCordova 사이트는 http://ngcordova.com이다.
ngCordova는 많은 수의 코르도바 플러그인을 지원한다. 사이트는 꽤 최신 목록을 제공하는데, 커뮤니티에서 필요로 하는 플러그인들이 점점 더 추가되고 있기 때문이다. 리스트에 없는 다른 플럭인에 대한 지원을 여러분이 할 수 있다면, ngCordova 커뮤니티는 환영할 것이다.
기본 코르도바 API 대신에 ngCordova를 사용하는 것의 이점은 다음과 같다:
* 코르도바 기능 호출을 AngualrJS에서의 일관된 프로그래밍 방식인 프로미스로 다룰 수 있다.
* 필요한 경우에 자동으로 digest loop를 호출하기 때문에 여러분은 자신의 코드 작성에만 집중하면 된다.
* 아이오닉 커뮤니티는 이미 양질의 플러그인 세트를 갖춰 놓았기 때문에 여러분이 직접 찾아다닐 필요가 없다.
* 각 플러그인마다 문서화가 잘 되어 있고, 최소한 한 개의 예제를 담고 있으며 추가적인 상세 내용을 확인할 수 있도록 소스 링크를 갖고 있다.
* 단위 테스트를 할 수 있도록 목(mock) 서비스를 제공한다.

8.2.1 ngCordova 설치
ngCordova는 아이오닉 CLI로 간단히 설치하고, index.html에 포함시키면 된다. ionic add 명령을 사용한다:
$ ionic add ngCordova
이 명령은 www/lib 디렉토리에 ngCordova를 추가한다. 다음으로 index.html에 라이브러리를 포함시키기 위해 <script> 태그를 추가한다:
<script src="lib/ngCordova/dist/ng-cordova.js"></script>
마지막 단계는 애플리케이션에 새 모듈을 포함시키는 것이다. www/js/app.js 파일을 열어 ngCordova를 포함시키기 위해 의존 목록을 갱신한다:
angular.module('App', ['ionic', 'ngCordova'])
여기까지가 앱에 ngCordova를 설치하기 위한 작업의 전부이다. 이제부터 예제를 통해 실전에 돌입하자!

8.3 리조트 앱에서 카메라와 사진 사용하기
4장의 리조트 앱에 사용자가 그들의 여행을 담은 사진첩을 만들수 있도록 하는 기능이 추가되면 멋질 것이다(그림 8.2). 이를 위해 사용자의 카메라와 사진 라이브러리에 접근할 수 있도록 허용해달라고 요청해야 한다. 꽤 단순한 인터페이스를 유지하면서 플러그인을 사용하는 재미있는 부분에 집중할 수 있다.

<< 그림 시작 >>
  1. 카메라 앱을 열기 위해 Capture New 선택.
  2. 카메라로 사진을 찍는다.
  3. 사진이 앱으로 반환된다.

  그림 8.2 사진이 보이는 사진첩과 카메라 또는 사진 라이브러리에서 사진을 가져오는 기능
<< 그림 끝 >>

8.3.1 카메라 프로젝트 설정
4장에서 완료했던 앱을 기본으로 한 새 프로젝트를 설정하는 것으로 시작한다. ionic start를 실행하는 대신 Git에서 체크아웃 하고, 기존 프로젝트에서 설정한다. 4장의 마지막 단계를 체크아웃하고, 다음을 실행한다:
git clone https://github.com/ionic-in-action/chapter4.git chapter8-camera cd chapter8-camera
git checkout step7
ionic plugin add org.apache.cordova.console
ionic plugin add org.apache.cordova.device
ionic plugin add com.ionic.keyboard
ionic platform add [ios/android]
추가하고 싶은 플랫폼에 따라 iOS나 안드로이드를 고르거나 둘다 선택하면 되겠다. Git으로 프로젝트를 클론했기 때문에 플러그인 추가는 직접 해줘야 한다. ionic start 명령으로 프로젝트를 생성한 경우에는 위의 플러그인이 자동으로 추가된다. 이들은 저장소에 저장되는 항목이 아니기 때문에 반드시 다운로드 받아 설치해 줘야 한다.
카메라를 쓸 수 있는 장치가 컴퓨터에 연결되어 있어야 한다. 다음의 명령에서 ios나 안드로이드를 선택하고 실행해서 장치로 배포할 수 있다:
$ ionic run [ios|android]
이번 예제에서는 livereload 명령을 사용할 수 없다는 점을 유념해야 한다. 이미지를 로딩하는 방식이 파일 프로토콜을 사용하기 때문이다. livereload를 쓰게 되면 아이오닉이 HTTP 프로토콜 위에서 실행되기 때문에 브라우저 보안 정책으로 인해 이미지 로딩이 블럭된다.
이제 앱이 실행되고 터미널로 콘솔 아웃풋이 나타나야 한다.

8.3.2 카메라 플러그인 추가
먼저 camera 플러그인을 추가하고, ngCordova도 사용할 것이다. 플러그인과 ngCordova를 설치하는 명령은 다음과 같다:
$ ionic plugin add org.apache.cordova.camera
$ ionic add ngCordova
camera 플러그인과 ngCordova 설치가 끝나면, ngCordova를 AngularJS 애플리케이션으로 추가해야 한다. index.html을 열고 아이오닉 번들 파일 뒤에 <script>태그도 추가한다.
<script src="lib/ngCordova/dist/ng-cordova.js"></script>
다음, 앱에 ngCordova를 추가한다. www/js/app.js를 열고 새로운 의존 관계가 설정되도록 모듈 정의를 갱신한다:
angular.module('App', ['ionic', 'ngCordova'])
이제 사진첩을 담을 새로운 뷰를 추가할 수 있게 되었다.

8.3.3 사진첩 뷰 만들기
먼저 사진을 위한 신규 뷰를 만들어야 한다. 이번 예제에서는 사진을 표시하기 위해 카드 컴포넌트를 사용할 것이다. 이 뷰는 사용자가 카메라로 새 사진을 찍거나 사진 라이브러리에 이미 존재하는 사진을 포함시킬 수 있는 버튼을 두 개 가지고 있다. 새 뷰 템플릿부터 추가한다: www/views/photos/photos.html 파일을 추가하고 다음 리스트의 코드를 삽입한다.

<< 리스트 시작 >>
  리스트 8.4 사진첩 템플릿 (www/views/photos/photos.html)

  Photo Book 제목을 가지는 뷰를 생성
  카메라나 라이브러리로부터 사진을 추가하기 위한 두 개의 버튼을 가지는 서브 헤더
  (다음페이지)
  카드 컴포넌트로 사진 목록의 각 항목을 반복해서 출력
  카드에 사진을 추가하기 위해 URI 스킴 사용
<< 리스트 끝 >>

템플릿의 서브 헤더에 카메라로 새 사진을 찍거나 라이브러리에서 한 장을 추가하기 위한 버튼을 두 개 추가했다. 이 둘은 콘트롤러의 메소드를 호출할 것인데, 다음에 추가할 것이다. 콘텐츠 영역의 card 컴포넌트는 ngRepeat를 갖고 있는데, 각 이미지는 카드 내부에서 보여질 것이다.
img 엘리먼트에 ngSrc가 있는데, 여기에 이미지의 URI가 설정될 것이다. camera 플러그인은 Base65로 인코딩된 이미지 데이터를 반환할 수 있지만, 메모리 상태에 제약을 받을 수 있다. camera 플러그인이 이런식으로 이미지 콘텐츠를 제공할 수 있음을 보여주려고 이렇게 했는데, 다른 옵션이 있지만 예제에서는 다루지 않았다.
이제 콘트롤러를 추가해 보자. www/views/photos/photos.js 파일을 만들고 다음 리스트의 코드를 추가한다. 여기에 카메라 관련 코드가 들어가는데, 상세하게 다룰 것이다.

<< 리스트 시작 >>
  리스트 8.5 camera 플러그인을 사용하는 사진첩 콘트롤러 (www/views/photos/photos.js)

  (왼쪽 위->아래)
  사진을 담을 모델 선언
  사진을 얻기 위해 요청
  이미지를 데이터 URI 버전으로 얻기 위한 파라미터
  (오른쪽 위->아래)
  콘트롤러를 생성하고 필요한 서비스 주입
  카메라 플러그인 호출을 다루는 메소드, 사진 라이브러리는 type 값을 처리
  카메라 플러그인을 호출하기 전에 장치가 준비된 상태인지 확인
  에러 처리 부분, 지금은 로그만 남김
  반환된 사진 데이터를 모델에 저장
  카메라 또는 사진 라이브러리를 선택하기 위한 파라미터
<< 리스트 끝 >>

이 콘트롤러는 카메라로 찍은 이미지나 라이브러리에 존재하는 이미지를 요청할 수 있다. 먼저, 콘트롤러를 만들고 $ionicPlatform과 $cordovaCamera 서비스를 주입한다. $cordovaCamera는 카메라로 접근하기 위해 ngCordova에서 제공하는 서비스이다. 사진을 담을 빈 모델을 설정하고, getPhoto() 메소드는 카메라 플러그인 호출을 담당한다. 장치가 준비된 상태인지 확인하고, 플러그인의 getPicture() 메소드를 호출한다.
getPicture() 메소드에 카메라를 사용할지, 사진 라이브러리를 사용할지 등의 몇 가지 옵션을 지정할 수 있는데, 상세 내용은 camera 플러그인 도큐먼트를 보자. 사진이 then() 메소드를 통해 반환되면, 이미지 URI를 받아 photos 배열의 앞 부분에 추가한다. 에러가 발생하면, 콘솔에 로그를 남긴다.
마지막 단계는 뷰와 연결하는 것이다. index.html 파일에 콘트롤러를 추가한다:
<script src="views/photos/photos.js"></script>
그 다음 www/js/app.js를 열고 사진첩을 위한 상태를 추가한다:

.state('photos', {
  url: '/photos',
  controller: 'PhotosController',
  templateUrl: 'views/photos/photos.html'
})

마지막으로 홈 뷰에서 사진첩으로 갈 수 있도록 연결한다. www/views/home/home.html을 열고 목록내에 항목을 하나 더 추가한다:
<a href="#/photos" class="item item-icon-left">
    <i class="icon ion-images"></i> Photo book
</a>
이제 장치에서 앱을 다시 실행해 보자. 홈 화면에서 사진첩으로 갈 수 있는 링크가 보여야 하고, 탭하면 새로 만든 뷰가 떠야 한다. Capture New 버튼을 선택하면 새로운 사진을 찍기 위한 카메라가 뜨고, From Library 버튼을 탭하면 사진 라이브러리가 떠서 한 장 선택할 수 있을 것이다.
이미지를 담을 영속적인 저장소를 구현하지 않았음을 유념해야 한다. 사진 뷰를 떠났다가 나중에 다시 돌아오면, 지정했던 사진들이 안 보일 것이다. 실제 상황에서는 사진을 서버로 업로드 하거나 장치의 파일 시스템을 사용해서 이미지의 복사본을 저장해야 한다.
이번 예제에서 카메라와 사진첩 플러그인을 다루면서, 장치에 특화된 기능에 접근하기 위한 방법을 살펴봤다. 상대적으로 간단하고 빨리 만들었다. 만일 사용자가 카메라나 사진첩에 접근하기 위한 권한을 승인하지 않았다면, 앱이 크래시되지는 않지만 아무일도 일어나지 않을 것이다. 사용자에게 앱이 카메라 접근 권한이 없음을 팝업으로 알리고, 장치 설정에서 변경할 수 있도록 오류를 처리하는 것이 좋다.

8.4 날씨 앱에서 지오로케이션 사용하기
6장에서 날씨 앱을 만들었었다. 위치를 검색하고 현재의 날씨 정보를 얻을 수 있었다(그림 8.3). 그러나, 사용자가 위치를 검색하는 대신 바로 알 수 있으면 더 유용할 것이다. 코르도바 지오로케이션 플러그인을 사용하면 사용자 위치를 위도와 경도 정보로 얻을 수 있고, 그 지역에 대한 일기 예보를 보여줄 수 있다.

<< 그림 시작 >>
  그림 8.3 iOS에서 위치 정보에 접근할 수 있도록 승인을 요청한다.
<< 그림 끝 >>

8.4.1 지오로케이션 예제 설정
6장에서 완료했던 프로젝트를 기반으로 신규 프로젝트를 설정해보자. 지오로케이션 플러그인과 ngCordova를 추가하고, 사용자의 위치를 요청하는 구현을 한 후, 새 기능을 담도록 앱을 업데이트 할 것이다:
git clone https://github.com/ionic-in-action/chapter6.git chapter8-geolocation cd chapter8-geolocation
ionic plugin add org.apache.cordova.console
ionic plugin add org.apache.cordova.device
ionic plugin add com.ionic.keyboard ionic platform add [ios/android]
이로써 6장의 날씨 앱의 마지막 버전에 기본 플러그인까지 설치했다. 저장소를 복제했기 때문에 코어 플러그인(console, device, 그리고 keyboard)은 재설치해야 한다. ionic start 명령이 그런 처리를 해주지만, 저장소에서 복제했기 때문에 그 단계를 생략했다. platform add 명령 부분에서는 iOS나 안드로이드를 선택한다. 이제 앱을 실행할 수 있는데, 장치를 연결해 둬야 한다:
$ ionic run [ios/android] -l -c -s
브라우저에서 볼 수 있는 모습과 동일한 앱이 나타나야 한다. 브라우저에서 사용해보는 대신 터치 환경에서 앱을 잠시 사용해보자.

8.4.2 지오로케이션 플러그인과 ngCordova 추가
플러그인과 ngCordova를 설치하자. 이쯤되면 이런 작업에 친숙해져 있어야 하지만, 친절하게도 다시 알려주겠다:
ionic plugin add org.apache.cordova.geolocation
ionic add ngCordova
이제 지오로케이션 플러그인과 ngCordova가 다운로드 후 설치되었을 것이다. 마지막으로 해줘야 할 것은 역시 ngCordova를 애플리케이션에 추가하는 것이다. index.html 파일의 아이오닉 번들 파일 포함부분 다음에 <script> 태그를 추가하자:
<script src="lib/ngCordova/dist/ng-cordova.js"></script>
그 다음 앱에 ngCordova 의존 관계를 설정한다:
angular.module('App', ['ionic', 'ngCordova'])
플러그인을 사용할 모든 준비가 되었다.

8.4.3 사용자의 위치를 요청하기
사용자의 위치 정보는 위도와 경도 값으로 얻을 수 있다. 날씨 API가 위도와 경도를 사용했다는 사실을 기억한다면, 이번의 경우에 딱이라는 걸 알 것이다. 사용자의 위치를 먼저 요청하고, 현재 위치에 대한 날씨를 보여주자(그림 8.4).

<< 그림 시작 >>
  1. 앱은 위치를 코르도바에 질의한다
  2. 코르도바는 장치에 위치를 질의한다
  3. 장치가 위치를 알려준다
  4. 코르도바가 위치를 반환한다
  5. 앱은 위치 정보를 구글 지오로케이션 API에 질의한다
  6. API는 위치 정보를 반환한다
  7. 앱은 Forecast.io에 해당 위치에 대한 날씨 정보를 질의한ㄷ
  8. 날씨 정보를 받아 표시한다

  그림 8.4 앱이 위치를 요청하고, 날씨를 알기 위해 좌표를 이용하는 방법
<< 그림 끝 >>

www/js/app.js의 run() 메소드를 수정해서 지오로케이션 플러그인에 요청을 보내야 한다. 필요하다면, 사용자에게 위치 정보 접근 승인을 요청하는 창이 뜰것이다. 사용자가 동의했다면, 현재 위치가 반환될 것이다. 위치에 대한 주소를 조사하기 위해 구글 지오로케이션 API를 사용해서 보다 친숙한 이름을 얻고, Forecast.io API로 일기예보 정보 요청을 보낼 것이다. 다음 리스트에서 app.js에 추가해야할 코드를 볼드체로 표시해 두었다.

<< 리스트 시작 >>
  리스트 8.6 위치에 접근하기 위해 갱신된 run() 메소드 (www/js/app.js)

  (왼쪽)
  지오로케이션과 기타 서비스 주입
  다른 플러그인을 위한 기존의 코드
  좌표로 주소를 역으로 알아내기
  (오른쪽)
  현재 위치를 얻기 위해 지오로케이션 호출, 성공하면 데이터가 반환됨
  새 위치 정보를 생성하고, Locations 서비스에 추가
  지역 뷰로 이동하기 위해 $state.go 호출
<< 리스트 끝 >>

getCurrentPosition()을 호출하면 프로미스가 반환되고, 응답을 처리하기 위해 then()을 사용한다. 여기서는 success() 함수만 처리했는데, 권한 승인이 거절되었거나 기타 오류가 발생한 경우를 처리하기 위한 두 번째 함수를 추가로 구현할 수도 있다. 그러나 이번에는 그냥 오류는 무시하고 현재 위치를 노출하지 않았다.
위치 데이터를 얻었다면, 구글 지오코딩 API로 주소를 알아낸다. 검색 뷰에서 사용했었던 것과 같은 서비스인데, 여기서는 위도와 경도 좌표를 제공한다. 그 다음 사용자의 위치를 나타내는 주소의 첫 번째 결과를 사용한다. 이 주소는 매우 상세한 주소일 수도 있고 지역만 대략 나타낸 것일 수도 있는데, 구글 지오로케이션 API의 응답에 따른 것이라 개선할 여지가 있다.
마지막으로 Locations 서비스에 새 객체를 추가하는데, 여기에 사용자가 추가한 모든 지역 목록이 들어있다. 이런 고유한 지역은 현재 장소라는 표식을 해두면 나중에 구별해서 사용할 수 있다. 서비스에 위치가 저장되면 그 장소로 이동시키는데, 유저가 기본적으로 현재 위치에 대한 일기 예보를 보고 싶어할 것이라는 가정을 하고 있기 때문이다.

8.4.4 날씨 앱 개선
현재 위치 기능을 추가했기 때문에, 앱이 좀 더 자연스럽게 느껴지도록 몇 가지 기법을 넣어봄직 하다. 예를 들자면 현재 위치는 다른 모양의 아이콘으로 나타내고, 기본 위치로 사용했던 시카고를 제거하며, 현재 위치는 지울 수 없게 하는 것이다.
www/js/app.js 파일을 다시 열고, 두 군데 수정을 해보자. 수정되는 곳이 없는 부분은 생략했으니 다음 리스트에 나타난 부분으로 이동을 해서 볼드체로 표시된 부분을 수정한다.

<< 리스트 시작 >>
  리스트 8.7 날씨 앱 개선 (www/js/app.js)
  LeftMenuCtrl 이전의 코드
  위치에 따라 적절한 아이콘을 얻기 위한 신규 스코프 메소드 추가
  중략
  Locations 서비스에 저장되어 있던 기본 위치 제거
  후략
<< 리스트 끝 >>

왼쪽 메뉴 콘트롤러에 적절한 아이콘을 반환하는 메소드를 추가했다. 위치가 현재 위치와 같다면, ion-ios-navigate 아이콘을 사용한다. 그렇지 않은 경우에는 ion-ios-locatioin을 사용한다. 현재 위치를 구별해서 표시하기 위한 간단한 개선이다. 마지막으로, 기본 장소인 시카고를 제거한다. 이제 현재 위치를 사용할 수 있기 때문에 더이상 필요하지 않다.
이제 index.html을 열고 사이드 메뉴의 목록을 수정하자. 목록내 아이템에 getIcon() 메소드를 호출하는 ngClass를 추가해서 아이콘을 제대로 표시하도록 한다. 볼드체로 표시된 부분이 변경해야 할 부분이다.

<< 리스트 시작 >>
  리스트 8.8 사이드 메뉴의 위치 아이콘 (www/index.html)

  사이드 메뉴 이전의 템플릿 코드
  후략
  getIcon을 호출하는 ngClass
<< 리스트 끝 >>

이제 앱을 실행하면 다른 저장된 장소와는 달리 현재 위치의 아이콘이 바뀐것을 볼 수 있다. 작은 변화이지만, 사용자 인터페이스 기능은 사용자가 맥락을 이해하도록 돕는데 중요한 것이다.
마지막으로 할 것은 현재 위치가 지워지지 않도록 하는 것이다. 현재 위치는 특별한 지역이면서 사용자의 선호 지역은 아니기 때문에 보호해야 한다. 현재 위치가 지워지면 사용자가 현재 위치 관련 기능을 쓰지 못하게 되기 때문에 피해야 할 일이다.
이를 위한 방법은 많고 많지만, 여기서는 그냥 설정 페이지의 목록에서 현재 위치를 제외하는 처리로 구현하려고 한다. www/views/settings/settings.html의 설정 템플릿을 열고, 다음 리스트의 볼드 처리된 부분을 추가한다.

<< 리스트 시작 >>
  리스트 8.9 현재 위치 삭제 방지 (www/views/settings/settings.html)

  바뀌지 않은 부분의 템플릿 코드
  현재 위치를 제외하기 위해 ng-if 추가
  나머지 바뀌지 않은 부분
<< 리스트 끝 >>

이 변경으로 현재 위치는 지역 목록에 노출되지 않게 되고, 이 때문에 지울수도 없게 된다. 이것으로 예제는 끝났다. 사용자의 위치를 얻는 기능도 상당히 간단하지만 강력했다. 위치 데이터를 다른 정보와 결합하는 것은 뭔가 재미있는 앱을 만들수 있는 매우 유용한 방법이다.
사용자가 위치 권한 승인을 거절하면 어떤일이 벌어질까? 글쎄, 좋은 소식은 위치 정보 없이도 앱은 여전히 작동한다는 것이다. 앱을 설계할 때 이런 부분을 고민하는 것은 중요하다. 가능하면 지오로케이션이 없이도 여전히 사용할 수 있게 해야 한다. 사용자의 위치에 접근할 수 있는 기능은 언제든지 중지될 수 있기 때문에 언제나 작동한다고 가정하면 안된다. 권한 획득이 필요한 다른 종류의 플러그인도 마찬가지다. 권한 승인은 언제든지 거절될 수 있으므로, 어떤 방식으로든 기능해야 한다. 위치 승인 없이는 실행이 불가능한 경우도 있을수 있는데, 이럴때는 친근한 메세지로 사용자를 설득할 필요가 있다. 앱이 지오로케이션에 접근할 수 있는지는 사용을 시도함으로써 확인할 수 있고, 권한 문제인지는 에러 핸들러에서 확인할 수 있다.

8.5 도전 주제들
리조트 앱과 날씨 앱에서 구현할 수 있는 플러그인과 기능은 매우 많이 있지만, 여기서는 코르도바 플러그인 사용을 연습해 볼 수 있는 몇 가지만 해봤다:
* 사용자가 오프라인 상태인 경우를 처리 - 7장에서 오프라인 상황을 다루는 방법을 이야기했었지만, 여기에 적용할 수 있을지 생각해 보자. 현재 앱은 연결되지 않으면 실패하기 때문에 연결 없이도 동작하는 방법을 체크할 필요가 있다. $http 인터셉터로 에러를 처리하는 방법도 고민해보자.
* 사진을 저장하기 위해 file 플러그인을 사용 - 현재 리조트 앱에서의 사진은 앱이 종료될 때가지만 유효하다. 이미지를 아무데에도 저장하지 않기 때문이다. 실제 상황이라면 이를 유지하고 싶을 것이나 사진은 가능한 localStorage의 공간을 빨리 넘어가게 된다. file 플러그인으로 사진을 저장하고, 앱이 구동될 때 불러오도록 해보자.
* 이벤트를 추가하기 위해 calendar 플러그인을 사용 - 리조트 앱에서는 이벤트가 사용자의 일정에 선택적으로 추가될 수 있다. 다가오는 이벤트를 사용자의 일정으로 추가할 수 있게하는 버튼을 추가하자.
* 앱 평가를 권하기 - 사용자가 앱스토어에서 우리의 앱을 평가하도록 권할 수 있다. 사용자가 앱을 어느 정도 사용하고 난 다음이 적기이고, 양질의 리뷰를 받을 수 있다.
* 플러그인으로 액션 시트 대체 - 날시 앱에서 아이오닉의 액션 시트 컴포넌트를 사용했다. 이 컴포넌트를 액션 시트 플러그인으로 바꿔보자.

8.6 요약
이번 장에서는 코르도바와 플러그인을 깊이 살펴봤다. 사진을 이용하고 위치 정보를 얻어내고 앱에서 사용하는 것이 얼마나 쉬운지 여러분이 놀랐기를 바란다. 예제로 코르도바 플러그인의 강력함, 특히 ngCordova의 힘을 보였다. 모바일 기기가 제공하는 모든 것에 접근할 수 있는 능력을 가지게 되었다. 이번 장에서 다른 큰 주제들을 복습해 보자:
* 코르도바 플러그인 설치로 아이오닉 앱에 네이티브 기능 더하기.
* 공통적인 플러그인 사용시 문제점과 해결 기법들.
* ngCordova는 앱에서 코르도바 플러그인을 쉽게 다루게 한다.
* 6장의 날씨 앱을 개선하기 위해 지오로케이션 플러그인 사용
* 4장의 리조트 앱에 사진첩을 더하기 위해 카메라 플러그인 사용
다음 장에서는 앱 테스트를 작성하는 방법, 추가적인 디버깅 툴과 테크닉을 알아보겠다.
