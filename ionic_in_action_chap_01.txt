1. 아이오닉과 하이브리드 앱 개발

<< 상자 시작 >>
	이 장에서 다룰 내용
	* 왜 아이오닉을 선택해야 하며, 장점은 무엇인가?
	* 아이오닉은 무엇이며, AngularJS와 코르도바를 어떻게 이용하고 있는가?
	* 하이브리드 앱이 모바일 개발을 위한 이상적인 선택인 이유.
	* 안드로이드와 iOS 플랫폼
<< 상자 끝 >>

이제 모바일 앱 개발은 많은 개발자들에게 필수적인 기술이 되고 있다. 아이오닉을 이용하면 네이티브 모바일 앱과 유사한 룩앤필을 가지는 하이브리드 앱을 만들 수 있다. 하이브리드 앱은 모바일 앱의 여러 형태 중 하나로, 인터페이스를 표현하기 위해 웹브라우저 윈도우를 사용한다. 아이오닉은 개발자들이 웹사이트와 웹 애플리케이션 개발에 사용했던 기술들(HTML, CSS, 자바스크립트)을 그대로 사용하여 하이브리드 앱을 빠르게 제작할 수 있게하는 도구와 유틸리티의 모음이다. 코르도바를 사용해서 네이티브 앱 내부에 웹 애플리케이션을 탑재함으로써 동작한다. 모바일 환경의 웹 애플리케이션을 개발하기 위해 AngularJS를 사용하고, 사용자 인터페이스 컨트롤과 터치 입력 반응과 같은 모바일 특성에 대한 지원을 포함한다.
이 책의 목적은 아이오닉 모바일 앱 개발을 위해 필요한 기술을 소개하는 것이다. 프로젝트를 올바르게 설정하기 위한 기본 지식을 가르치고, 실제 제품과 유사한 형식의 예제를 구현하면서 리치 인터페이스를 구성하는 방법을 설명한다. 이 외에 제품 출시을 위해 필요한 일련의 프로세스(빌드-테스트-배포)를 구성할 수 있도록 도울 것이다. 우선, 아이오닉에 대해 좀 더 깊이 알아보고, 왜 이것이 하이브리드 모바일 앱 개발을 위한 확실한 솔루션이 되는지 알아보도록 하겠다.

1.1 아이오닉이란?
아이오닉은 하이브리드 앱을 빠르고, 쉽고, 미려하게 개발할 수 있도록 설계된 기술과 유틸리티의 조합이다. 웹 애플리케이션 프레임워크인 AngularJS와 네이티브 앱 빌드를 위한 코르도바를 기반으로 삼고 있다. 각각에 대해서는 차차 심도 있게 다룰 것이다. 그림 1.1은 아이오닉에 포함된 기술 스택을 대략적으로 나타낸 것이다. 각 기술들이 디바이스 위에서 어떻게 구성되는지 알아보자.
<< 그림 시작 >>
	아이오닉 스택 내부 모델

	(상자 바깥의 왼쪽 텍스트)
	사용자가 앱을 구동
	(왼쪽 칸)
	디바이스
	디바이스가 코르도바 앱 래퍼를 로드
	(중앙 칸: 윗줄, 아랫줄 순서)
	코르도바 앱 래퍼
	자바스크립트 API를 사용하는 웹뷰
	코르도바 앱 래퍼가 새 웹뷰를 로드
	웹뷰는 index.html 파일을 로드
	(오른 칸: 윗줄, 아랫줄 순서)
	AngularJS
	아이오닉
	AngularJS가 구동되고, 초기 뷰를 결정
	아이오닉 콤포넌트가 UI로 표시

	그림 1.1 아이오닉 프레임워크에 사용된 기술 스택과 작동 방식
<< 그림 끝 >>
그림 1.1은 사용자가 디바이스에서 앱을 구동하는 시점에서 시작한다. iOS에서 동작하는 아이폰이나 안드로이드의 넥서스10을 가정하고, 각 단계를 좀 더 자세히 살펴보자.

	* 디바이스 - 앱을 로드한다. 디바이스는 각 플랫폼별 스토어에서 다운로드 받은 앱을 설치하고 관리하는 운영체제를 포함하고 있다. 또한 운영체제는 GPS 위치 추적, 연락처 목록, 카메라와 같은 여러 기능을 앱이 사용할 수 있는 API 세트를 제공한다.
	* 코르도바 앱 래퍼 - 웹 애플리케이션을 로딩하는 네이티브 앱이다. 코르도바는 HTML, CSS와 자바스크립트를 사용해서 네이티브 앱을 개발할 수 있도록 만든 하이브리드 앱 개발 플랫폼이다. 플랫폼과 애플리케이션 사이의 브릿지를 생성하기 위한 도구이며, 설치가능한 네이티브 앱을 만들어 준다(그림 1.1의 앱 래퍼 부분). 생성된 앱은 웹 뷰를 포함하는데, 자바스크립트 API를 이용하여 구현된 웹 애플리케이션이 실행되는 공간이다.
	* 코르도바 자바스크립트 API - 앱과 디바이스 사이의 커뮤니케이션을 위한 다리 역할을 한다. 앱 래퍼는 자바스크립트 API를 통해 웹 애플리케이션과 네이티브 플랫폼 양쪽에 접근한다. 주요 작업은 뒷단에서 수행되고, 이를 통해 코르도바는 네이티브 앱을 생성한다.
	* AngularJS - 앱 내 이동과 기능을 제어하는 웹 애플리케이션 부분이다. AngularJS 웹 애플리케이션은 웹 뷰 안에서 실행된다. AngularJS는 강력한 웹 애플리케이션을 제작할 수 있는 매우 유명한 프레임워크이다. 아이오닉에서 AngularJS는 웹 애플리케이션의 로직과 데이터 관리 역할을 담당한다.
	* 아이오닉 - 앱에서 렌더링되는 유저 인터페이스 컴포넌트를 제공한다. 아이오닉은 AngularJS를 기반으로 제작되었으며, 유저 인터페이스와 UX(사용자 경험)를 디자인하기 위한 것으로 탭, 버튼, 네비게이션 헤더 등의 비주얼 요소를 포함하고 있다. 이런 인터페이스 컨트롤들은 아이오닉의 핵심이며, 하이브리드 앱을 네이티브 앱과 거의 흡사하게 만들어 준다. 한편, 아이오닉은 앱의 생성부터 배포까지의 관리를 도와주는 몇 가지 도구도 포함하고 있다.

이러한 기술들의 조합은 아이오닉을 여러분의 모바일 앱 개발을 위해 매우 풍부한 기능을 제공하는 플랫폼이 되도록 한다. 이제 아이오닉과 관련 기술을 조망해 봤으니, 모바일 경험의 세 가지 주요 타입과 아이오닉을 이용하는 접근 방식의 이점을 알아보자.

1.2 모바일 경험의 종류
모바일 디바이스용 애플리케이션을 제작하는 방법은 몇 가지가 있는데, 각각의 방식은 강점과 약점을 가지고 있다는 점을 이해하는 것이 중요하다. 기본적으로 세 가지 형태가 있는데, 네이티브 앱, 모바일 웹사이트와 하이브리드 앱이 있다. 각 방식의 차이점을 명확히 이해하기 위해서 좀 더 상세하게 살펴볼 것이다.
그림  1.2은 각 타입의 설계와 구조를 비교해서 보여준다. 또한 데이터를 불러오기 위해서 데이터베이스나 웹 서비스 API에 접근하는 방법도 나타낸다.

1.2.1 네이티브 모바일 앱
네이티브 앱을 만들기 위해서는 각 모바일 플랫폼을 위한 기본 언어로 개발을 한다. 예컨대, iOS를 위해서는 오브젝티브 C나 스위프트(Swift)를 쓰고, 안드로이드를 위해서는 자바를 사용하는 식이다. 개발자는 앱을 컴파일하고 디바이스에 설치한다. 플랫폼의 SDK를 이용해서, 앱이 디바이스 데이터에 접근하기 위해 플랫폼 API로 커뮤니케이션을 하거나 HTTP 요청을 보내 외부 서버로부터 데이터를 불러온다.
iOS와 안드로이드 모두 사전에 정의된 API로 플랫폼 기능을 제어하는데 용이한 일련의 도구 세트를 개발자에게 제공한다. 공식, 비공식 도구들이 존재하는데, 모두 네이티브 앱을 개발하는데 이용할 수 있다. 손쉬운 네이티브 앱 개발을 위한 프레임워크를 사용하는 것도 개발자들에게는 보편적인 방법이다.

<< 그림 시작 >>
	This is where the app code exists : 앱 코드가 존재하는 곳
	네이티브 앱, 모바일 웹사이트, 하이브리드 앱
	웹 서비스(데이터베이스), 웹 서버, 웹 서비스(데이터베이스)
	HTTP 요청

	그림 1.2 네이티브 앱, 모바일 웹사이트, 하이브리드 앱의 구조 비교
<< 그림 끝 >>

	네이티브 앱의 장점
네이티브 앱은 하이브리드 앱이나 모바일 웹사이트에 비해 몇 가지 장점이 있다. 이 장점들은 디바이스 플랫폼과 밀접하게 통합되어 있다는 특징에 기인한다.
	* 네이티브 API - 네이티브 앱은 네이티브 API를 직접 호출하여 사용하므로, 플랫폼과 밀착되어 있다.
	* 성능 - 가장 높은 성능으로 사용성을 높인다.
	* 동일한 환경 - 네이티브 API로 작성되었으므로, 해당 언어에 이미 친숙한 개발자들이 쉽게 익숙해질 수 있다.

	네이티브 앱의 단점
네이티브 앱의 단점은 일반적으로 높은 난이도와 유지 보수성에 있다.
	* 언어적 제약 - 네이티브 앱을 개발하기 위해서는 해당 플랫폼에서 요구하는(예를들어 자바와 같은) 기본 언어와 플랫폼 의존적인 API 사용에 능숙해야 한다.
	* 플랫폼 한정적 - 한 번에 하나의 플랫폼에 대해서만 개발할 수 있다.
	* 더 많은 수고 - 통상적으로 빌드를 위해서 더 많은 작업과 부하를 일으키는데, 이는 비용 증가로 이어진다.

1.2.2 모바일 웹사이트 (웹앱)
모바일 웹사이트나 웹앱은 모바일 기기에서 잘 작동하고, 모바일 브라우저를 통해 접근할 수 있다. 웹 앱은 모바일 디바이스의 화면 크기에 맞도록 특별히 디자인 된, 모바일 브라우저에서 볼 수 있는 웹사이트이다. 그림 1.3은 이에 대한 예를 보여준다.

<< 그림 시작 >>
	그림 1.3 모바일 웹사이트: 보스턴 글로브의 반응형 웹사이트(왼쪽)와 이베이의 모바일 특화된 웹사이트(오른쪽)
<< 그림 끝 >>

웹사이트 디자이너들은 모바일 장치에서의 활용을 위한 별도의 버전을 제작하기도 한다. 여러분도 아마 모바일 기기를 통해 특정 웹사이트에 방문했을 때, 제한적인 기능을 가진 별도 버전의 사이트로 리다이렉트 된 적이 있을 것이다. 이베이를 방문 했을 때 http://m.ebay.com와 같은 서브 도메인으로 이동하는 식이다. 이와는 달리, www.bostonglobe.com과 같은 곳은 사이트의 디자인이 모바일 장치의 화면 사이즈에 맞게 변형이 된다. 이는 반응형 디자인이라 불리는 기술을 사용해서 만들 수 있다. 웹사이트의 콘텐츠는 크기가 조정되고, 브라우저 윈도우의 크기에 맞게 배치되고, 일부는 숨겨지기도 한다.

	모바일 웹사이트의 장점
모바일 웹사이트를 통해 여러 이점을 누릴 수 있는데, 특히 노력의 수준과 장치 호환성이 우수하다:
	* 유지 보수성 - 모바일 웹사이트는 장치에 직접 설치하고 승인하는 과정이 없기 때문에 업데이트와 유지 보수를 하기가 쉽다.
	* 설치 불필요 - 웹사이트가 인터넷상에 존재하기 때문에 별도의 설치 과정이 필요없다.
	* 크로스 플랫폼 - 모든 모바일 기기가 브라우저를 가지고 있기 때문에 여러분의 웹앱은 어떤 장치에서도 접근될 수 있다.

	모바일 웹사이트의 단점
모바일 웹사이트는 브라우저 내에서 실행되기 때문에 중대한 제약과 단점을 가진다:
	* 네이티브 액세스 불가 - 모바일 웹사이트는 브라우저 안에서 실행되므로 네이티브 API에 접근할 수 없고, 브라우저가 제공하는 API만 이용할 수 있다.
	* 키보드 입력이 필요 - 모바일 웹사이트에 접속하려면 브라우저에 주소를 입력해야 하기 때문에, 아이콘을 탭하여 구동시키는 앱보다 사용하기 어렵다.
	* 유저 인터페이스의 제약 - 터치-친화적인 애플리케이션을 개발하기가 어려운데다, 데스크탑에서도 잘 동작해야 하는 반응형 웹이어야 한다면 더욱 그렇다.
	* 모바일 브라우징의 감소 추세 - 시간이 흐르면서 모바일 웹 브라우징을 하는 추세는 줄고, 앱을 사용하는 행태가 늘고 있다.
모바일 웹사이트는 여러분의 제품이나 서비스를 위한 별도의 앱을 갖고 있다고 하더라도, 중요할 수 있다. 그러나, 연구에 따르면 사용자가 모바일 브라우저에 비해 앱을 사용하는 시간이 더 많으며, 모바일 웹은 사용자 경험 측면에서 뒤떨어지는 경향이 있다.

1.2.3 하이브리드 앱
하이브리드 앱은 네이티브 앱에서 웹 애플리케이션을 실행하기 위한 목적으로 웹뷰로 불리우는 격리된 브라우저 인스턴스를 포함하고 있는 모바일 앱이다. 이것은 네이티브 디바이스 플랫폼과 웹뷰 사이에서 통신할 수 있는 앱 래퍼를 이용한다. 즉, 웹 애플리케이션이 모바일 기기에서 실행되며 카메라나 GPS 기능 등도 사용할 수 있다는 뜻이다.
웹뷰와 네이티브 플랫폼 사이의 통신이 가능하도록 하는 도구는 하이브리드 앱 모델을 가능하게 한다. 이 도구들은 iOS나 안드로이드 플랫폼에서 공식적으로 제공하는 것이 아닌 서드 파티 툴이며, 이 책에서 다룰 아파치 코르도바와 같은 것들이 이에 해당된다. 하이브리드 앱이 컴파일 되면, 여러분이 개발한 웹 애플리케이션은 네이티브 앱으로 변신한다.

	하이브리드 앱의 장점
하이브리드 앱은 모바일 웹사이트와 네이티브 앱에 비해 몇 가지 장점을 가진다.
	* 크로스 플랫폼 - 한 번의 개발로 다수의 플랫폼에 배포할 수 있는 앱을 빌드할 수 있다.
	* 웹 개발과 동일한 기술 - 웹사이트나 웹 애플리케이션을 개발하기 위해 사용했던 기술을 그대로 써서 모바일 앱을 개발할 수 있다.
	* 기기 접근성 - 웹뷰가 네이티브 앱 내부에 있기 때문에, 네이티브 앱에서 가능한 모든 기기적 특성에 접근할 수 있다.
	* 쉬운 개발 - 산출물을 미리보기 위해 지속적으로 빌드해야 할 필요 없이 빠르고 쉽게 개발할 수 있다. 또한 웹사이트 개발에 사용했던 도구를 그대로 활용할 수 있다.
하이브리드 앱은 모바일 앱을 개발할 수 있는 견고한 기반을 제공하면서, 동시에 웹 플랫폼을 여전히 이용할 수 있도록 해준다. 웹사이트와 동일한 방식으로 앱을 개발하면서, 네이티브 API에 접근해야 할 필요가 있을 때에는 하이브리드 앱 프레임워크가 자바스크립트를 통하여 API를 호출할 수 있는 브릿지를 제공한다. 스와이프, 핀치와 클릭과 같은 제스쳐, 키보드 이벤트를 감지하는 앱을 작성할 수 있다. 그러나 몇 가지 단점도 존재한다.

	하이브리드 앱의 단점
하이브리드 앱은 웹뷰 내부에 존재한다는 점 때문에 제약 사항과 단점이 존재한다.
	* 웹뷰의 제약 - 애플리케이션이 웹뷰에서 실행되기 때문에 성능이 각 플랫폼별 브라우저의 성능에 고정된다.
	* 플러그인을 통한 네이티브 기능 접근 - 현재 사용할 수 없는 네이티브 API의 기능을 사용하기 위해서, 별도의 플러그인 개발을 해야 할지도 모른다(역주: 이 경우에는 결국 네이티브 개발 지식을 필요로 한다).
	* 네이티브 유저 인터페이스 컨트롤의 부재 - 아이오닉과 같은 도구가 없다면, 개발자가 모든 유저 인터페이스 컨트롤을 직접 만들어야 한다.
아이오닉을 사용하면, 이미 웹 개발을 수행하면서 익숙해 있던 기술과 지식으로 하이브리드 앱을 개발할 수 있게 된다.

1.3 아이오닉 스택의 작동 방식 이해하기
하이브리드 앱을 개발을 위한 기술들이 여럿 있는데, 아이오닉에는 세 가지 주요 기술로써 아이오닉, AngularJS와 코르도바가 있다. 그림 1.4는 아이오닉 앱에서 카메라를 켜는 상황에서 이 기술들을 어떻게 조합하는지 보여준다.
그림 1.4의 각 단계를 하나씩 뜯어보자.
	1 사용자가 버튼을 탭한다.
	2 버튼은 AngularJS 컨트롤러를 호출하고, 자바스크립트 API로 코르도바를 호출한다.
	3 코르도바는 네이티브 SDK를 사용하여 디바이스와 통신하고, 카메라 앱 실행을 요청한다.
	4 장치는 카메라 앱을 열고(필요에 따라 관련 권한을 요청하는 창을 띄운다), 사용자는 사진을 찍는다.
	5 사용자가 사진을 선택하면, 카메라앱은 닫히고 코르도바에 사진 데이터를 반환한다.
	6 코르도바는 AngularJS 컨트롤러에 데이터를 전달한다.
	7 이미지를 화면에 표시하는 것은 아이오닉 컴포넌트에서 담당한다

<< 그림 시작 >>
	아이오닉 내부 스택 모델
	디바이스, 코르도바, 웹 애플리케이션
	코르도바 앱 래퍼, 자바스크립트 API를 사용하는 웹뷰, AngularJS, 아이오닉
	(윗 줄: 왼쪽 -> 오른쪽)
	사용자가 앱을 구동
	디바이스가 코르도바 앱 래퍼를 로드
	코르도바 앱 래퍼가 새 웹뷰를 로드
	웹뷰는 index.html 파일을 로드
	AngularJS가 구동되고, 초기 뷰를 결정
	아이오닉 콤포넌트가 UI로 표시

	(중간 줄: 오른쪽 -> 왼쪽)
	사용자가 카메라를 열기 위해 버튼을 탭
	아이오닉 버튼이 눌러지면, AngularJS를 호출
	AngularJS는 코르도바 카메라 자바스크립트 API를 호출
	코르도바 자바스크립트 API가 코르도바에 카메라 기능을 질의
	코르도바가 디바이스에 카메라 앱을 구동하라고 요청
	디바이스가 카메라 앱을 구동 (이미 승인받지 않은 경우, 허락을 요청)

	(아랫 줄: 왼쪽 -> 오른쪽)
	카메라 앱이 닫히고 사진을 반환
	코르도바가 사진을 받고 전달
	코르도바 자바스크립트 API가 사진 전달
	AngularJS가 사진을 받고 뷰에 표시
	아이오닉 콤포넌트가 표시됨

	그림 1.4 하이브리드 앱에서 아이오닉, AngularJS, 코르도바가 작동하는 방식
<< 그림 끝 >>

이와 같은 흐름은 아이오닉 앱의 실제 기술 스택을 잘 나타낸다. 몇 가지 모르는 용어가 나온다고 걱정할 필요는 없다 - 앞으로 이 책에서 계속 다룰 것이다. 핵심은 여러분의 앱이 디바이스의 특성을 끌어내는 방식을 이해하는 것이다. 각각의 기술 요소를 더 알아보자.

1.3.1 아이오닉 : 사용자 인터페이스 프레임워크
아이오닉은 HTML에는 없지만 모바일 앱에서는 보편적인 유저 인터페이스 컨트롤의 집합이다. 사용자의 위치에 기반하여 현재의 상태를 보여주는 날씨앱을 생각 해 보자. 아이오닉은 온도, 일기 예보, 날씨 지도와 같은 정보를 표시하는 몇 개의 박스를 넘겨보기 위한 슬라이드 박스와 같은 컴포넌트를 제공한다. 이 컴포넌트들은 CSS, HTML과 자바스크립트를 조합해 작성되었으며, 네이티브 컨트롤과 유사하게 작동된다. 예시에서 보여주는 컴포넌트들은 다음과 같다.
	* 측면에서 들어오는 사이드 메뉴
	* 토글 버튼
	* 모바일 탭

<< 그림 시작 >>
	아이오닉 네비게이션 버튼
	아이오닉 네비게이션 바
	아이오닉 팝오버
	아이오닉 리스트
	아이오닉 아이콘
	아이오닉 푸터 바
	아이오닉 탭

	그림 1.5 쓸만한 인터페이스를 만들기 위해 아이오닉의 각 부분이 상호 작용하는 예
<< 그림 끝 >>

그림 1.5은 이 책 뒷부분에서 다를 샘플 앱 중 하나의 스크린샷이다. 이 그림은 강력한 유저 인터페이스를 생성하기 위해 한 화면에 얼마나 많은 아이오닉 컴포넌트들이 사용되는지를 보여준다.
아이오닉은 아이오닉 팀이 개발한 오픈 소스 프로젝트 이다. 2013년 11월에 시작된 이래 빠르게 성장하고 있으며, 하이브리드 앱 개발을 위한 중요한 선택지 중의 하나가 되었다. 매월 2만개가 넘는 앱이 아이오닉으로 개발되고 있다. 아이오닉은 MIT 라이센스를 따르며, http://ionicframework.com에서 구할 수 있다.
아이오닉은 CLI(Command-Line Interface)라는 도구를 통해 개발에 유용한 기능을 제공한다. 이 후부터는 CLI라고 지칭하겠다. 이 툴은 프로젝트를 시작하고, 미리 보기, 빌드, 앱 설치 등을 도와준다. 앞으로 예제를 통해 CLI 기능들의 대부분을 살펴볼 것이다.
또한 아이오닉은 애플리케이션에 적용할 수 있는 괜찮은 수준의 유용한 아이콘 라이브러리를 제공한다. 이는 기본으로 제공되는 것이며 활용 여부는 여러분이 선택하면 된다. 이 책의 예제에서는 활용할 예정이다.
모바일 앱 개발을 지원하는 몇 가지 서비스를 역시 제공하는데, 비주얼 드래그-앤-드랍 앱 개발 툴, 배포 툴, 유저 행동 분석, 푸시 알림등이 그것이다. https://ionic.io 사이트에서 아이오닉 플랫폼의 전체 기능을 살펴 볼 수 있다.
이상과 같은 유저 인터페이스 컨트롤은 아이오닉의 주요 특징으로, 다음 절에 다룰 AngularJS, 코르도바와 잘 연동되도록 아이오닉 개발팀이 심혈을 기울여 왔다.

1.3.2 AngularJS : 웹 애플리케이션 프레임워크
AngularJS(또는 AngularJS)는 구글의 오픈 소스 프로젝트로 웹 애플리케이션 개발자들 사이에 매우 인기있는 기술이 되었다. 웹 개발자들에게 훌륭한 애플리케이션 구조를 제공하고, 완전한 애플리케이션을 빠르게 작성할 수 있도록 도와준다. 이 책의 날씨 앱 예제에서는 AngularJS로 사용자의 데이터를 관리하고, 날씨 서비스로부터 정보를 갖고 오는데 사용할 것이다.
AngularJS는 미스코 헤브리(Miško Hevery)와 애덤 앱론스(Adam Abrons)가 2009년부터 만들기 시작했다. 헤브리가 구글에 입사하면서 AngularJS를 가지고 온 것으로 우연히 시작된 이 프로젝트는 오늘날 개발자들 사이에 엄청나게 유명해졌고, www.stackoferflow.com과 www.nasa.gov를 비롯한 수 많은 사이트에 도입되었다. AngularJS는 MIT 라이센스를 따르고 있는데, http://angularjs.org에서 확인할 수 있다.
이제 더 이상 복잡한 애플리케이션을 개발하기 위해 서버 기반의 언어들(PHP, Ruby나 Java와 같은)을 사용하지 않아도 된다. AngularJS와 같은 자바스크립트 기반의 웹 애플리케이션 프레임워크로도 브라우저 내에서 돌아가는 복잡한 애플리케이션을 작성할 수 있게 되었다. 이 때 서버 애플리케이션은 비공개 데이터 관리를 돕고 비즈니스 로직을 은닉하기 위해 사용된다. 브라우저는 앱 제작을 위해 사용될 플랫폼으로써 작동되기 때문에 하이브리드 앱 개발자에게는 명백한 장점이다. AngularJS(또는 Ember나 Backbone과 같은 여타의 자바스크립트 프레임워크)에 친숙하다면, 아이오닉으로 모바일 앱을 개발할 때 여러분의 지식을 십분 활용할 수 있다.
이 책에서는 서드 파티 개발자들이 개발해 온 별도의 AngularJS 모듈들도 활용할 예정이다. 그 중의 중요한 모듈 하나로서 ui.router가 있는데, 이는 오픈 소스 AngularJS 모듈로 AngularJS의 기본 라우팅 모듈보다 더 나은 라우팅과 네비게이션 방식을 제공한다.

1.3.3 코르도바 : 하이브리드 앱 프레임워크
	이 책에서 우리는 하이브리드 앱 프레임워크로 아파치 코르도바를 사용할 것이다. 코르도바는 브라우저 윈도우와 네이티브 API 간의 통신을 담당하는 중간 계층에 위치한다. 날씨 앱 예제는 위치 정보를 알아내기 위해 기기의 GPS 정보에 접근할 필요가 있는데, 코르도바는 AngularJS와 장치 사이의 브릿지가 되어 해당 정보를 불러온다.
	어쩌면 여러분이 폰갭에 대해서 들어본 적이 있을지도 모르겠다. 어도비는 폰갭을 코르도바라는 이름으로 아파치 소프트웨어 재단에 기부했다. 오늘날 폰갭은 코르도바의 한 갈래로, 바꿔 말하자면 폰갭은 기본적으로는 코르도바이며, 여기에 어도비가 몇 가지 상업적 기능을 추가한 버전이다. 이 책에서는 코르도바를 사용할 것이지만, 원한다면 폰갭을 사용할 수도 있다.
	코르도바는 아파치의 오픈 소스 프로젝트로 거대한 커뮤니티가 형성되어 있다. 어도비는 이 프레임워크의 메인 개발자로서 지속적으로 참여하고 있다. 코르도바는 아파치 2.0 라이센스를 따른다.
	코르도바는 여러 가지 중요한 기능을 제공한다. 또한 개발자가 새로운 기능을 추가할 수 있도록 플러그인 시스템을 제공하는데, 이것으로 핸드폰 카메라를 이용하기 위해 네이티브 API를 호출하는 플러그인 모듈을 개발할 수도 있다(역주: 사실 이미 개발되어 있다. https://github.com/apache/cordova-plugin-camera 참고). 코르도바 프로젝트는 개선 사항과 새로운 기능이 활발히 추가되면서 운영된다. 코르도바에 대한 더 많은 정보는 http://cordova.apache.org를 참고하자.

1.4 왜 아이오닉인가?
아이오닉은 jQuery 모바일과 같은 다른 도구가 제공할 수 없었던 하이브리드 앱 개발의 새롭고 중요한 진전을 가져 왔다. 최근까지도 모바일 기기에서 여전히 상대적으로 느렸고, 네이티브 앱이 아니면 개발자들이 원하는 성능과 경험을 제공할 수가 없었다. 모바일 플랫폼 개발사들은 브라우저를 네이티브 플랫폼만큼 빠르게 만들지 않았다. 그러나 기기들의 성능이 향상되고, 플랫폼이 개선되면서 상황이 변했고, 이제는 아이오닉과 같은 새로운 툴로 멋진 하이브리드 앱을 만드는 것이 가능해졌다.

1.4.1 아이오닉이 개발자에게 좋은 이유
아이오닉은 하이브리드 앱으로도 네이티브 앱과 유사한 룩-앤-필과 경험을 제공할 수 있다. 네이티브 앱만이 빠르고 풍부한 기능을 제공할 수 있다라는 해묵은 논쟁은 이제 틀린 것으로 증명되었다. 사람들은 그들의 앱이 빠르고, 부드럽고, 사용하기 쉽기를 기대하는데, 아이오닉 앱은 이를 충족시킬수 있다.
	* 웹 플랫폼으로 앱을 개발 - HTML, CSS와 자바스크립트로 네이티브 앱과 유사하게 동작하는 하이브리드 앱을 개발할 수 있다.
	* AngularJS를 이용한 개발 - AngularJS(또는 Ember와 같은 다른 자바스크립트 프레임워크)에 친숙한 개발자들에게 아이오닉은 훌륭한 선택이다. 아이오닉은 AngularJS를 사용해서 만들어졌기 때문에, AngularJS의 특징과 서드-파티 모듈을 완벽히 활용할 수 있다. AngularJS는 애플리케이션을 개발할 용도로 설계되었는데, 아이오닉은 여기에 AngularJS를 모바일 환경으로까지 확장시킨다.
	* 최신 기술을 사용 - 아이오닉은 애니메이션과 같은 CSS3의 최신 기술들과 연계하도록 설계되었다. 모바일 브라우저는 가장 최근의 웹 플랫폼 명세들을 더 잘 지원하고 있기 때문에, 이러한 기술들을 활용할 수 있다.
	* 활발한 커뮤니티와 오픈 소스 정신 - 아이오닉 커뮤니티는 포럼을 통해 코딩 조언, 팁과 묘수를 공유하는 활동이 매우 활발하게 일어나고 있다. 오픈 소스 정신이 프로젝트 안에서  살아 숨쉰다.
	* 강력한 CLI 도구 - 아이오닉 CLI 도구로 브라우저 상에서 미리 보기를 한다거나, 에뮬레이터로 앱을 돌려보거나, 연결된 기기에 배포하는 작업을 빠르게 실행해 볼 수 있다. 또한 시작 프로젝트를 구성하고 설정하는 일도 도와준다.
	* 아이오닉 서비스 - 한편, 개발을 더 손쉽게 하기 위한 서비스들을 제공한다. 아이오닉 크리에이터 서비스로 드래그-앤-드롭으로 인터페이스를 디자인하고 앱으로 익스포트할 수 있다. 아이오닉 뷰 서비스로는 베타 버전의 앱을 고객이나 테스트 유저에게 배포할 수 있다. 간단히 말해, 아이오닉은 하이브리드 앱을 제작하기 위한 기본 도구 뿐만이 아니라, 개발 작업 전반을 효과적으로 수행할 수 있도록 도와주는 도구를 포함하고 있다.
	* 아이오닉은 개발 전담 팀이 있다 - 오픈 소스 프로젝트는 개발한 사람들이 제대로 만들고, 지원을 해주는지 확신할 수 없기 때문에 선택하기가 곤란한 경우가 있다. 아이오닉은 플랫폼을 지속적으로 유지하면서 리드하는 전담 팀을 가지고 있다.
	* 네이티브와 유사한 경험 - 아이오닉으로 네이티브 앱과 유사한 룩-앤-필을 가지는 앱을 만들 수 있기 때문에, 고객 사용자들이 더 쉽게 앱 사용에 적응할 수 있다.
	* 성능 - 아이오닉의 성능은 네이티브 앱에 비견할 만 하다. 앱 성능이 좋을 수록 이를 사용하는 유저들도 행복하다.
	* 아름답고 유연한 디자인 - 유저 인터페이스 컴포넌트는 네이티브 스타일 가이드라인을 충족시키면서도 쉽게 커스터마이징 할 수 있도록 주의 깊게 설계 되었다.
아이오닉으로 훨씬 적은 시간과 노력으로 고객을 위해 풍부한 기능으로 무장한 앱을 만들 수 있다. 그럼으로써 여러분, 팀, 고객들에게 굉장한 가치를 제공하게 된다.

1.4.3 아이오닉의 문제점
제 아무리 아이오닉이라도 언제나 적절히 여러분의 필요를 만족시키는 해결책은 아니다. 아이오닉이 적절한 솔루션이 될 것이라고 확신하기 위해서 각 프로젝트의 요구 사항을 따져보는 것은 중요한 일이다.
	* 제한된 플랫폼 - 아이오닉 1.0은 iOS와 안드로이드 플랫폼만 완전히 지원한다. 윈도우 폰이나 파이어폭스 OS와 같은 다른 플랫폼들은 향후 완전히 지원할 계획이지만 보장하지는 않았다. 다른 플랫폼에서도 앱이 작동은 할 것이나, 적극적으로 지원하고 있지는 않다.
	* 지원되지 않는 옛날 플랫폼 - 아이오닉은 iOS는 버전 7 이상, 안드로이드는 4 이상을 지원한다. 이전 버전도 동작은 할 것이나 완전히 테스트 되지는 않았다. 옛날 모델이나 저사양 기기에서 실행되어야 한다면 도전적인 주제가 될 것이다.
	* 네이티브와 동일하지 않음 - 네이티브 API는 코르도바가 지원하는 범위내에서만 사용할 수 있다. 장치에 깊이 의존하는 앱을 만든다면, 어려운 일이 될 것이다.
	* 무거운 그래픽에는 적절치 않음 - 이것은 브라우저 안에서 작동하는 하이브리드 앱이 가지는 근본적인 제약 사항이다. 게임 앱이나 무거운 그래픽 작업을 하는 앱을 개발해야 한다면, 하이브리드 앱은 네이티브 앱 환경에 비해 능력이 떨어진다.
앱 요구사항을 충족시키기 위해  아이오닉이 아닌 다른 것을 선택해야만 하는 상황이 발생할 수 있다. 그러나, 그런 상황에서도 아이오닉은 빠르게 프로토타이핑 해보는 단계에서는 유용한 도구가 될 것이다.

1.5 아이오닉 앱 빌드를 위해 필요한 사전 지식
하이브리드 앱을 개발하려면 이 책에서 다루지 않는 몇 가지 기술을 알고 있어야 한다. 각 영역에 대해 전문가 수준의 지식이 필요한 것은 아니지만, 모두 사용할 수 있을 정도의 준비는 해야 한다.

1.5.1 HTML, CSS, JavaScript에 대한 경험
웹 사이트를 개발한 적이 있다면, 웹 플랫폼을 사용해 본 것이다. 브라우저는 이 책의 예제 모바일 앱을 개발하기 위한 운영체제와 같다. HTML, CSS와 자바스크립트는 브라우저가 이해하는 핵심 언어이다. HTML로 콘텐츠의 구조를 잡고, CSS로 디자인을 구현한다. 자바스크립트는 웹 애플리케이션에 필요한 인터렉션과 로직을 담당한다.
자바스크립트의 문법과 비동기 호출, 이벤트, 프로토타입 상속, 변수 범위에 대한 개념에 친숙해질 필요가 있다.

1.5.2 웹 애플리케이션과 AngularJS에 대한 경험
웹 애플리케이션에 대한 기본적인 이해는 하고 있어야 하는데, 샘플 앱의 내부 개발이 그걸 만드는 일이기 때문이다. 많은 수의 웹 애플리케이션을 개발하기 위해 사용되는 기술과 라이브러리가 있는데, 이에 대한 이해와 익숙함이 크게 도움이 될 것이다.
이 책의 웹 앱은 AngularJS 프레임워크를 사용하고, 자바스크립트로 작성될 것이다. 아이오닉은 특히 AngularJS를 이용하도록 만들어졌기 때문에, AngularJS로 애플리케이션을 개발하는데 익숙한 개발자들은 쉽게 적응을 할 수 있을 것이다. Ember나 Backbone 같은 다른 프레임워크를 경험했을 수도 있는데, 이 경우에도 AngularJS에 특화된 접근 방식을 배우는데 있어 밑거름이 될 것이다.
3장에서 AngularJS에 대해 간략히 다룰 예정이지만, 이 책은 AngularJS에 관한 책이 아니다. AngularJS in Action(http://manning.com/bford)이나 AngularJS in Depth(http://manning.com/aden)와 같은 책을 참고하면, 이 책이 다루지 못하는 AngularJS에 대한 모든 것을 배울 수 있을 것이다.

1.5.3 모바일 장치에 대한 경험
모바일 앱을 개발함에 있어 모바일 기기를 갖고 있는 것은 매우 중요한 일이다. 필자는 모든 플랫폼의 실제 장치에서 테스트하기 위해 플랫폼당 적어도 하나 이상의 기기는 갖추기를 추천한다. 각 플랫폼의 기기에서 어떻게 보일 것인지 확인하기 위한 에뮬레이터가 있긴 하지만, 실제 상황을 모두 반영하지는 못한다.
이 장치들을 여러분의 개발자 계정으로 등록해야 할 것이므로, 빌려 쓰는 것도 바람직하지 않다. 장치가 필요하다면, 개발과 테스트 용도의 리퍼 제품이나 중고품을 알아보는 것이 좋을 것이다. 여러 타입의 장치에서 테스트 할수록 앱의 품질은 좋아진다.

이상의 세 가지 선행 조건들은 여러분의 성공적인 앱 디자인, 테스트, 개발에 도움을 줄 것이다. 아이오닉이 지원하는 모바일 플랫폼에 대해서 살펴보자.

1.6 모바일 장치와 플랫폼에 대한 지원
iOS, 안드로이드, 윈도우즈 8, 파이어폭스 OS, 타이젠, 블랙베리, 기타 등등의 여러 가지 모바일 플랫폼들이 현재 사용되고 있다. 아이오닉으로 iOS와 안드로이드를 위한 개발을 할 수 있다. 윈도우즈 8과 파이어폭스 OS에 대해서는 향후 지원할 계획을 가지고 있으나, 현재는 가능하지 않다.
시뮬레이터를 통해 미리 보기를 하면서 앱을 개발하는 일이 가능은 하지만, 실제 장치는 다르게 작동할 수도 있다. 두 가지 메인 플랫폼과 요구 사항을 살펴보자.

1.6.1 애플의 iOS
애플이 생산하는 아이폰, 아이패드는 iOS라는 공통 플랫폼을 공유하고 있다. 애플은 폐쇄적인 시스템을 만들고, 그 테두리 안에서 장치부터 소프트웨어까지 전반적으로 강력히 통제하고 있다. 이런 정책은 iOS를 사용자에게나 개발자에게 강력한 플랫폼이 되도록 만들었다.
애플은 iOS와 OS X 프로그램을 개발하기 위한 메인 도구로써 Xcode를 제공한다. Xcode는 무료이고, 아직 다운로드 받지 않았다면 앱스토어에서 받을 수 있다. 다음 장에서 iOS 개발을 위해 설정하는 법을 설명할 것이다.
Xcode는 각기 다른 버전의 아이폰과 아이패드를 시뮬레이션 해볼 수 있는 시뮬레이터 세트를 가지고 있다. 시뮬레이터는 잘 만들어졌고, 실제와 유사한 경험을 주기 때문에 동일한 앱을 여러 버전의 IOS 테스트 해 보기에 유용하다.
애플은 iOS 모바일 앱을 개발하기 위한 단 하나의 제약 조건을 걸고 있는데, 맥 장비가 필요하다는 것이다. 애플은 개발 도구가 애플의 운영체제에서만 동작하도록 만들었고, 최신 버전에서 실행하도록 추천하고 있다.
맥을 사용하지 않는 당신이라면, 그리고 iOS 개발을 할 계획을 가지고 있다면, 하나 구입하는 걸 고민해보기 바란다. 단지 모바일 앱을 개발할 용도 만이라면, 어떤 종류의 맥 컴퓨터를 고르더라도 문제가 없다. 신규 맥 모델들은 시뮬레이터를 돌리고 빌드를 수행하기에 충분한 프로세싱 파워를 가지고 있다. 중고 장비를 구매할 생각이라면, 최신 버전의 OS X가 구동될 수 잇는 것인지 꼭 확인해야 한다.
맥이 없다면, 앱 개발에 도움이 되는 몇 가지 옵션이 있다. 아이오닉은 여러분이 맥을 갖고 있지 않은 상황이라도 플랫폼에 무관하게 빌드할 수 있는 서비스를 만들고 있다.
애플 개발자 프로그램은 iOS와 OS X 개발이라는 두 가지 형태의 멤버십이 있다. http://developer.apple.com에 방문해 계정을 만들고 iOS 프로그램에 가입하자. 1년에 99 달러의 비용이 발생하는데, 앱을 인증하고 앱스토어에 배포할 시점에 가입하면 된다. 앱 스토어에 앱을 배포하는 방법을 설명하기 전까지는 Xcode를 다운로드 받고, 계정 없이 책을 따라 개발하면 된다.

1.6.2 구글의 Android
구글은 안드로이드를 오픈 소스 모바일 플랫폼으로 만들었고, 모바일 기기 제조사들이 그들의 제품에 안드로이드를 탑재할 수 있도록 했다. 애플의 접근 방식과는 달랐기에 안드로이드 장치는 파편화가 매우 심해졌는데, 구글이 안드로이드가 설치되는 모든 기기들을 통제하지 않았기 때문이다. 이런 오픈 시스템은 제조사의 수용을 촉진시켰고, 운영체제 라이센스 비용이 없어서 저렴한 가격의 기기를 출시할 수 있었기 때문에 시장에서 선도적인 플랫폼으로 자리를 잡았다.
안드로이드는 공식 사이트(http://developer.android.com/)에서 무료로 다운로드 할 수 있는 다양한 도구들을 제공한다. 또한 구글 브라우저인 크롬에 장착되어 하이브리드 앱 개발자들을 지원하는 별도의 도구를 제작했다. 다음 장에서 안드로이드 개발을 위해 컴퓨터를 설정하는 방법을 다룰 것이다. 안드로이드 SDK는 많이 사용되는 안드로이드 기기들의 스크린 사이즈와 해상도를 지원하는 시뮬레이터를 가지고 있다.
안드로이드 개발은 맥, 리눅스와 윈도우에서 할 수 있다. 안드로이드 개발 툴에 대한 정확한 요구 사항은 http://developer.android.com/sdk/index.html에서 확인할 수 있다.
구글도 역시 개발자 프로그램을 가지고 있다. 25달러의 비용을 한 번 지급해야 한다. iOS와 마찬가지로, 앱을 플레이 스토어에 배포하기 전까지는 가입할 필요는 없다. https://play.google.com/apps/publish/signup/을 통해 가입할 수 있다.
몇 개의 다른 안드로이드 앱스토어도 있는데, 아마존 웹스토어가 특기할 만하다. 이 곳도 개발자 프로그램에 가입하기 위해 비용을 지불해야 하는데, 이 책에서는 다루지 않는다. 그러나, 스토어가 달라도 안드로이드 기반 기기를 위한 앱을 빌드하고 배포할 수 있을 것이다.

1.7 정리
이번 장에서는 아이오닉이 하이브리드 앱 개발을 위해 어떤 강력한 도구들을 제공하는지 살펴보았다. 주요 주제들을 요약해 보겠다.
	* 아이오닉은 개발자, 관리자, 사용자에게 이로운 확실한 선택이다.
	* 하이브리드 앱 개발은 웹 플랫폼에 이미 친숙한 개발자들에게 유리한 방식이며, 별도로 프로그래밍 언어를 배우지 않아도 된다.
	* 하이브리드 앱은 네이티브 앱이 내포하고 있는 웹뷰를 이용하여 네이티브 API에 접근하는 웹 애플리케이션을 실행시킨다.
	* 아이오닉은 웹 애플리케이션 개발을 위해 AngularJS를 사용하고, 장치의 플랫폼과 통신하기 위해 코르도바와 연동되도록 설계되었다.
	* 안드로이드와 iOS를 지원하며 별도의 개발자 등록이 필요하다. iOS 개발툴은 맥 장비를 필요로 한다.
다음 장에서는 아이오닉 앱을 개발하기 위해 컴퓨터를 설정하는 방법을 살펴보고 간단한 앱을 하나 만들어 볼 것이다.
