7.6.2 플랫폼이나 디바이스 타입에 맞게 스타일 조정하기
아이오닉은 사용중인 플랫폼이나 디바이스가 어떤 것인지 판단할 수 있는 간단한 방법을 제공하기 때문에, 필요에 따라 앱의 스타일을 적응시킬 수 있다. 무슨 플랫폼인지 결정하기 위해 body 엘리먼트에 여러개의 클래스가 추가되어 있다.
* iOS을 위한 platform-ios
* 안드로이드를 위한 platform-android
* 브라우저를 위한 platform-browser
이 클래스들은 사용하고 있는 플랫폼의 종류에 따른 통찰을 제공한다. 또한 플랫폼의 버전 넘버에 기반한 다른 클래스들도 제공하고 있는데, 예를 들어, platform-ios-ios7과 같은 것이 있다. 때때로 특정 버전을 타켓으로 해야할 때가 있다. version 클래스는 이런 정보를 제공해 준다.
이런 테크닉을 써야할 필요가 있는 경우가 크게 두 가지가 있는데, 플랫폼 종속적인 스타일을 제공하기 위한 경우와 특정 플랫폼에서만 나타나는 버그를 다뤄야 할 때 이다. 대개의 경우에는 플랫폼 종속적인 디자인의 양을 제한하고 싶을 것이다. 늘어날 수록 테스트해야 할 양이 추가되기 때문이다.
이번 절에 대한 코드는 adaptive-style 디렉토리에 있다. 배경 위에 아이오닉 로고가 보이는 단순한 앱이지만, 플랫폼에 따라 배경색이 다르게 보일 것이다(그림 7.4). 관련 템플릿은 다음 리스트를 참고하고, CSS는 리스트 7.7에서 확인할 수 있다.

<< 리스트 시작 >>
  리스트 7.6 적응형 스타일 템플릿 (adaptive-style/www/index.html)
<< 리스트 끝 >>

<< 그림 시작 >>
  body 클래스를 사용하여, 플랫폼에 따라 앱의 배경색을 바꾼다
  (그림 밑의 영문은 별도의 번역이 필요 없음)
  그림 7.4 플랫폼 종속적인 스타일, 안드로이드(왼쪽)과 iOS(오른쪽)
<< 그림 끝 >>

<< 리스트 시작 >>
  리스트 7.7 적응형 CSS 스타일링 (adaptive-style/www/css/style.css)

  iOS에만 적용되는 CSS 셀렉터
  안드로이드에만 적용되는 CSS 셀렉터
<< 리스트 끝 >>

CSS 규칙 앞에 body의 플랫폼 클래스를 붙여주면, 플랫폼에 따라 다른 배경 화면을 볼 수 있다.

7.6.3 플랫폼이나 디바이스에 따라 다른 동작
플랫폼에 따라 앱의 동작도 다르게 할 수 있다. 예를 들어, iOS에서는 액션 시트 컴포넌트를 사용하지만, 안드로이드에서는 팝오버를 사용할 수 있다. 아이오닉은 어떤 플랫폼상에서 작동하는지 감지할 수 있기 때문에, 그에 따라 동작을 수정하면 된다.
ionic.Platform 서비스가 이런 정보를 제공한다. isIOS()와 isAndroid() 같은 메소드들은 각각의 플랫폼이 활성화 되어있느냐에 따르는 불리언 값을 반환하고, platform() 메소드는 현재 플랫폼의 이름을 반환한다.
그림 7.5에 나타난 간단한 예제는 (세 개의 점으로 표시된)더보기 버튼을 눌렀을 때 플랫폼에 따라 다른 행동을 보여준다. iOS로 확인되면 액션 시트를 보여주고, 그렇지 않은 경우에는 팝오버를 보여준다.

<< 그림 시작 >>
  안드로이드에서는 팝오버, iOS에서는 액션시트
  콘트롤러에서 현재 플랫폼을 확인하기 위해 platform 서비스를 사용
  (그림 밑의 영문은 별도의 번역이 필요 없음)

  그림 7.5 플랫폼에 따라 버튼의 동작을 바꿀 수 있다
<< 그림 끝 >>

<< 리스트 시작 >>
  리스트 7.8 플랫폼에 따른 적응된 동작 (adaptie-behavior/www/js/app.js)
  (왼쪽)
  iOS인지 판단하기 위해 ionic.Platform 사용
  (오른쪽)
  콘트롤러를 생성하고 서비스를 주입
  ngClick으로 호출되는 more() 메소드
  iOS라면 더미 버튼을 장착한 액션 시트가 나타남
  그렇지 않은 경우 더미 버튼 버튼을 장착한 팝오버를 보여줌
<< 리스트 끝 >>

예제로 장치가 iOS에서 작동하는지를 확인하는 메소드를 한 개 갖고 있는 콘트롤러를 만들었다. ionic.Platform 서비스는 AngularJS 서비스가 아니기 때문에, 별도로 주입할 필요는 없다. $ionicPlatform 서비스도 있긴 한데, 이것은 코르도바 플러그인고 함께 사용할 용도리고, 현재 플랫폼에 대한 정보를 제공하지 않는다.
플랫폼을 확인하면, 액션 시트를 보여줄 것인지 팝오버를 보여줄 것인지 선택한다. 예제를 위한 마크업은 다음 리스트에 나타나 있다.

<< 리스트 시작 >>
  리스트 7.9 적응형 동작을 위한 템플릿 (adaptive-behavior/www/index.html)

  more() 메소드 호출을 위해 ngClick을 사용하고 팝오버를 위해 이벤트를 전달한다
<< 리스트 끝 >>

ionic.Platform 서비스는 플랫폼에 관한 현재 정보를 제공해준다. 앱의 동작을 변경할 수 있는 메소드도 몇 개 가지고 있는데, 전체 화면으로 실행하게 한다거나 프로그래밍적으로 앱을 종료시킬 수도 있다.

7.7 $ionicConfigProvider로 기본 동작을 수정하기
아이오닉은 몇 가지 기본 동작을 변경할 수 있는 방법을 가지고 있다. 앞서 커스텀 Sass 변수를 이용해서 기본 스타일을 수정하는 법을 살펴봤다. 같은 개념으로 트랜지션 타입(뷰 사이를 이동할 때 적용되는 효과)이라던가 네비게이션 바의 배치등을 바꿀 수있다.
아이오닉의 기본값은 구동되고 있는 현재의 플랫폼에 맞추도록 설계되어 있다. 예컨대, 네비게이션 바의 타이틀 배치가 안드로이드에서는 왼쪽 정렬, iOS에서는 중앙 정렬로 각각의 스타일 가이드라인을 맞추고 있다. 그러나, 플랫폼의 종류에 관계 없이 타이틀을 동일하게 보이도록 강제할 수 있다.
설정 가능한 항목에 대한 전체 목록은 도큐먼트에 나타나 있다. 이번 예제에서는 탭 스타일의 기본값을 수정하여, 항상 스트라이프 형태로 하단에 표시되도록 해보겠다. 모든 설정 가능한 옵션은 예제에서 보는 바와 같은 방식으로 수정될 수 있다. 그림 7.6은 갱신된 탭 모습을 보여주고 있다.

<< 그림 시작 >>
  $ionicConfigProvider로 탭의 기본 표현 방식을 오버라이딩 한다.
  탭은 모든 플랫폼에서 스트라이프 스타일로 아래에 나타난다.

  그림 7.6 아이오닉의 기본 탭 오버라이딩
<< 그림 끝 >>

설정 기본값은 이전의 예제에서 상태를 선언했었던, 모듈의 config() 메소드 안에서 설정된다. 다음 리스트에서는 탭에 대한 기본값을 수정하고 있다.

<< 리스트 시작 >>
  리스트 7.10 기본 설정 갱신하기 (config/www/js/app.js)

  $ionicConfigProvider 주입
  tabs 설정을 변경, 메소드 체인으로 호출할 수 있다
<< 리스트 끝 >>

$ionicConfigProvider는 아이오닉 설정을 위한 특별한 서비스 프로바이더인데, 메소드 호출시 인자를 전달해서 값을 갱신할 수 있다. 한편 예제에서는 두 개의 탭 메소드를 체인 형식으로 호출했다. 만일 탭에 관련되어 있지 않은 다른 부분에 대한 값을 수정하게 되면, 메소드 체인은 작동하지 않을 것이다. 위의 코드는 탭을 스트라이프로 설정하고 하단에 위치시킨다.
이런 설정은 CSS 클래스를 사용해서 탭 구현 방식을 오버라이딩 할 수도 있다. 탭 표현 방식과 같은 것은 꼭 config()에서 바꿀 필요는 없는 것이, 탭에 CSS 클래스를 설정해서 표현 방식을 수정할 수도 있기 때문이다. 그러나, 어떤 설정들은 아무데서나 바꿀수 없는 경우도 있다. 뷰의 정보를 캐싱하는 것에 관한 것이 그 예다.

7.8 요약
이번 장은 아이오닉 앱을 만들기 위한 추가적인 도구와 관점을 다루었다. 큰 주제 위주로 복습해보자:
* Sass를 사용해서 아이오닉의 앱 스타일링을 커스터마이징 하는 방법과 아이오닉이 Gulp를 이용하는 프로세스 만들기
* 이벤트 디렉티브와 $ionicGesture 서비스로 이벤트와 제스쳐 지원하기
* 앱 데이터의 영속성을 유지하기 위한 locaStorage와 Web SQL, IndexedDB 같은 대안들
* 플랫폼에 특화된 경험을 제공하기 위해 앱이 구동되고 있는 디바이스의 플랫폼에 기반하여 동작과 표현 방식을 바꾸기
* 글로벌 파라미터를 설정해서 아이오닉의 기본 설정값을 수정하기
다음장에서는 코드도바에 대해서 좀 더 깊이 파보려고 하는데, 아이오닉 앱을 위한 플러그인의 에코시스템을 활용하는 방법을 배우게 될 것이다.
