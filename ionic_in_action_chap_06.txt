6. 날씨 앱 : 사이드 메뉴, 모달, 액션 시트와 ionScroll 사용하기

<< 상자 시작 >>
  이 장에서 다룰 내용
  * 앱 네비게이션을 위한 기반으로 사이드 메뉴 사용하기
  * 액션 시트와 팝업으로 사용자에게 선택지 보여주기
  * 모달로 연관된 컨텐츠를 또 다른 뷰에서 표시하기
  * 더 진보한 스크롤 인터랙션 만들기
<< 상자 끝 >>

이번 장에서는 날씨 앱을 만들어 볼 터인데, 이를 통해 아이오닉이 제공하는 더 많은 컴포넌트들을 보게 될 것이다. 애플리케이션 네비게이션을 위한 기반은 사이드 메뉴 컴포넌트가 될 것이다. 이것으로 기상 상황, 일기 예보, 관심 지역을 찾아 보고, 모달 윈도우로 일출과 일몰 데이터를 보여주며, 날씨 정보를 보기 위해 페이지 스크롤링 패널을 사용하려고 한다.
이 장을 통해 여러가지 아이오닉의 기능과 컴포넌트를 살펴볼 예정이다. 앱 네비게이션의 기본이 될 사이드 메뉴는 왼쪽 메뉴 형태로 나타나 네비게이션을 지원한다. 액션 시트 컴포넌트는 사용자에게 선택 가능한 목록을 제공한다. 모달은 내년의 일출, 일몰 시간을 차트로 보여줄 때 사용할 것이다. 이 차트가 더 나은 성능을 낼 수 있도록 아이오닉 리스트의 컬랙션 반복 기능을 활용할 것인데, 필요한 아이템에 대해서만 렌더링을 수행하여 거대한 목록에 대해서 적은 메모리를 쓰도록 한다.
이번 앱에서 데이터를 불러오기 위해서 두 개의 다른 서비스를 이용할 것이다. Forecast.io는 위도와 경도로 지정된 지리적 위치에 대한 현재의 기상상태와 일기 예보 데이터를 제공해주는 유명한 날씨 API 서비스이다. 지역을 결정하기 위해 구글의 지오로케이션(geolocation) 서비스를 사용하여, 지역과 좌표를 검색한다. 둘 다 무료이지만, Forecast.io를 사용하기 위해서는 API 키를 발급받기 위해 등록을 해야한다.
그림 6.1은 이번 앱에 대한 서로 다른 뷰를 보여준다. 조각 조각 서서히 만들어 갈 것이지만, 앱에 관한 대부분은 날씨 뷰에 들어 있다고 보면 되겠다.
완성된 프로젝트는 https://ionic-in-action-chapter6.herokuapp.com에서 확인할 수 있고, 소스코드는 https://github.com/ionic-in-action/chapter6에서 받으면 된다.

<<그림 시작>>
  사이드 메뉴
  * 링크 목록을 보여준다
  * 좋아하는 지역의 목록
  * 보이기와 숨기기
  * 버튼늘 눌러 열기
  검색
  * 지역 검색
  * 검색 상자 사용하기
  * 리스트 컴포넌트
  날씨
  * 커스텀 스크롤링
  * 버티컬 페이지(?)
  * 일출 차트를 위한 모달 윈도우
  * 액션 시트로 선택하기
  설정
  * 앱 설정
  * 라디오 버튼 컴포넌트
  * 리스트 컴포넌트
  * 범위 컴포넌트
  * 목록 내 아이템 삭제

  그림 6.1 이번 장을 위한 날씨 앱 예제. 사이드 메뉴로 뷰 사이를 이동한다.
<<그림 끝>>

6.1 이번장 프로젝트를 위한 설정
이번 장도 역시 새로운 아이오닉 앱을 생성하고 코드를 추가하면서 따라가는 방법과 아이오닉-인-액션 Github 저장소에서 완성된 코드를 복제해서 각 단계마다 맞춰갈 수 있다. 앱 설정이 완료되면 ionic serve 명령을 실행하여, 브라우저에서 미리보기를 할 수 있다.

새 앱을 만들고 직접 코드를 추가하기
CLI를 사용해서 앱을 위한 새 프로젝트를 만들려면, 커맨드 라인 창을 열고 다음의 명령을 실행한다(프로젝트를 설정하는 방법을 복습하고 싶으면 2장을 참조하면 된다는 걸 기억하자):
$ ionic start chapter6 https://github.com/ionic-in-action/starter
$ cd chapter6
$ ionic serve

완성된 앱을 복제하고 따라가기
다 만들어진 앱을 체크아웃해서 각 단계를 맞춰가기 위해서는 다음 명령어를 통해 저장소를 복제하고 첫 번째 단계에 해당하는 태그를 체크아웃 한다:
$ git clone https://github.com/ionic-in-action/chapter6.git
$ cd chapter6
$ git checkout –f step1
$ ionic serve

6.2 사이드 메뉴와 뷰 셋업
이미 네비게이션을 만들고 탭을 사용하는 방법은 익혔기 때문에, 이번에는 메인 네비게이션을 위해 사이드 메뉴를 사용해 볼 것이다. 사이드 메뉴는 자주 사용되는데, 왜냐하면 필요에 따라 슬라이드 인, 아웃하는 방법으로 메인콘텐츠 영역을 방해하지 않고 중요 링크로 접근할 수 있기 때문이다. 사이드 메뉴는 오른쪽이나 왼쪽에서 열릴수 있는데, 이번에는 그냥 왼쪽을 쓰기로 한다. Git으로 따라오고 있다면, 이번 작업을 위한 코드를 체크아웃 하자:
$ git checkout –f step2
사이드 메뉴는 세 가지 방법으로 열릴수 있는데, 어떻게 구현하느냐에 달려 있다. 기본적으로 아이오닉이 지원하는 방법은 옆에서 쓸어서(스와이핑) 메뉴를 여는 방식이다. 이런 쓸어내는 방식을 다른 목적으로 쓰고자 한다면, 이 기능을 끌 수 있다. 버튼을 눌러 메뉴를 열수도 있는데, 보통 이 버튼은 화면 좌상단에 있으며 우리 예제에서 쓸 방식이다. 마지막으로 사이드바 델리게이트 서비스를 써서 메뉴를 토글하는 프로그래밍 방식이 있다.
이번 예제에서는 사이드 메뉴를 한개만 쓸 예정이지만, 한 개의 앱에서 여러 개의 사이드 메뉴를 쓸 수 있다. 사이드 메뉴 사용을 위한 설정 옵션이나 방법이 많이 있지만, 여기서 사용할 방식과 기본적으로는 같은 구조로 되어 있다.
우선 사이드 메뉴를 써서 이번 애플리케이션과 네비게이션의 기본부터 잡아보자. ionSideMenus 컴포넌트를 써야 하는데, 오른쪽으로 스와이핑할 때 메뉴가 나타거나, 좌상단의 토글 버튼으로 보이게 할 것이다. 그림 6.2에서 작동하는 모습과 이번 섹션에서 만들 결과를 볼 수 있다.

<< 그림 시작 >>
  사이드 메뉴 토글 버튼 (menuToggle)
  사이드 메뉴와 콘텐츠 (ionSideMenu)

  그림 6.2 사이드 메뉴 작동 : 왼쪽은 닫혀 있던 상태이고 오른쪽은 열려 있던 상태
<< 그림 끝 >>

사이드 메뉴 제작을 위해, 생성된 프로젝트 폴더에서 www/index.html 파일을 수정한다. 다음 리스트는 사이트 메뉴와 콘텐츠 영역을 나타낸다.

<< 리스트 시작 >>
  리스트 6.1 사이드 메뉴 구성 (www/index.html)

  [위쪽 중앙]   사이드 메뉴와 콘텐츠 영역을 감쌀 ionSideMenu 콘테이너를 선언
  [위쪽 오른쪽]  중앙의 콘텐츠 주영역을 담당할 ionSideMenuContent
  [아래 왼쪽]   사이드 메뉴를 선언하고, 왼쪽으로 위치 시킴
  [아래 오른쪽]  콘텐츠 영역에 토글 아이콘을 가진 네비게이션 컴포넌트를 배치

  [다음장 : 순서대로]
  사이드 메뉴를 위한 새로운 헤더 바
  ionContent는 네비게이션 링크 목록에 사용
<< 리스트 끝 >>

사이드 메뉴 선언은 간단하다. ionSideMenus, ionSideMenuContent와 ionSideMenu 디렉티브만 쓰면 된다. 자바스크립트도 필요 없다. 먼저 ionSideMenus로 전체 콘텐츠 영역을 감싸서, 사이드 메뉴를 위한 다른 디렉티브가 기능할 수 있도록 한다. 이게 없으면 사이드 메뉴가 작동을 안한다. ionSideMenus 안에는 ionSideMenuContent와 ionSideMenu를 자식으로 추가한다. side 어트리뷰트를 써서 메뉴가 왼쪽에 있도록 선언한다. ionSideMenuContent는 각 사이드 메뉴 하나당 하나씩만 선언할 수 있지만, ionSideMenu는 왼쪽, 오른쪽, 또는 양쪽 다 선언할 수 있다.
콘텐츠 영역 안에는 저번에 썼었던 네비게이션 디렉티브를 선언한다. 이렇게 해서 사이드 메뉴가 네비게이션 뷰 컨테이너를 포함한 글로벌 메뉴처럼 동작한다. 개인적으로는 이런 구조가 아주 직관적이라고 보는데, 실제로도 사이드 메뉴가 글로벌 네비게이션을 위해 쓰이기 때문이다.
ionNavButtons를 보면 menu-toggle="left"가 있다. menuToggle 디렉티브는 버튼이 동작할 때 사이드 메뉴를 열거나 닫는데 사용되기 위한 디렉티브이다. 이와 비슷하게, 사이드 메뉴의 아이템 목록에는 menu-close라는 네비게이션 링크가 있다. menuClose 디렉티브는 해당 아이템이 활성화 될 때 열려있던 사이드 메뉴를 닫아준다. "Find a City"를 탭할 때, 왼쪽 메뉴는 자동으로 닫히게 되는데, 이렇게 안하면 주 화면이 새로운 콘텐츠로 갱신되어도 메뉴가 남아있게 된다.
ionSideMenu와 ionSideMenuContent는 각자의 뷰를 가진다는 점을 명심해야 된다. 사이드 메뉴는 헤더바와 네비게이션 목록을 감싸기 ion-content를 사용했다. 이렇게 하지 않으면, 콘텐츠 영역이 엘리먼트의 적절한 크기와 위치 값을 계산할 수 없다.
사이드 메뉴는 원하는 콘텐츠는 무엇이든 포함할 수 있지만, 네비게이션 링크 목록이 가장 보편적으로 사용된다. 오른쪽 사이드 메뉴를 추가해서 추가적인 검색 필터나, 2차 네비게이션을 제공하는 방법도 있다.
리스트 6.1의 내용으로 사이드 메뉴를 위한 모든 작업은 완료했다. 사이드 메뉴의 다른 특징들을 알아보려면 도큐먼트를 보자. 사이드 메뉴를 프로그램으로 제어하기 위해 필요한 델리게이트 서비스의 특징도 자세히 알아볼 수 있다.
사이드 메뉴에 선언된 링크는 아직 라우팅할 상태로 선언하지 않았기 때문에 작동하지는 않지만, 사이드 메뉴를 열거나 닫을 수 있고, 스와이핑하여 열수도 있다. 이제 검색을 위한 뷰를 만들어, 위치와 좌표를 찾을 수 있도록 해보자.

6.3 위치 검색
앱이 처음에 시작되면 사용자는 보고 싶은 위치를 설정할 수 있도록 해줘야 한다. 구글의 지오로케이션 API를 사용하면 우편번호, 도시명, 주소와 같이 특정 위치를 지칭하는 말과 같이, 어떤 형식이든 텍스트로 입력하여 위치를 검색할 수 있다. 사용자가 검색할 수 있는 새로운 뷰를 만들고, 검색 API를 통한 결과 목록도 보여주도록 만들 것이다. 그림 6.3은 검색과 그에 대한 결과를 보여준다. Git를 통해 따라오고 있다면, 이번 단계를 위한 코드를 체크아웃 하자:
$ git checkout -f step3

<< 그림 시작 >>
  사이드 메뉴를 열기 위한 버튼 (menuToggle)
  검색 컴포넌트
  검색 결과 목록 (ionList)

  그림 6.3 키보드 입력과 결과를 보여주는 검색뷰
<< 그림 끝 >>

이번 작업을 완료하려면, 상태 프로바이더(state provider)에 새로운 상태를 등록하고, 템플릿과 컨트롤러를 정의해야 한다. 템플릿은 검색 창과 버튼을 가지고 있고, 컨트롤러는 결과 목록을 얻기 위해 API 요청을 수행한다. 지금쯤 되면 상태를 선언하는 일에는 익숙해져 있어야 한다. www/js/app.js 파일에 다음 리스트의 코드를 추가하자.

<< 리스트 시작 >>
  리스트 6.2 검색을 위한 상태 선언 (www/js/app.js)

  app에 config() 메서드 추가
  검색용 상태 선언
  검색을 위한 상태를 기본 뷰로 사용
<< 리스트 끝 >>

처음으로 상태를 추가하기 때문에 config() 메서드부터 추가하고, $stateProvider와 $urlRouterProvider 서비스를 주입해야 한다. 검색을 위한 상태를 선언하고 기본 라우트 경로로 만든다. 이제 템플릿과 컨트롤러를 추가해야 한다.
검색뷰 템플릿 코드는 리스트 6.3에 나타나 있는데, 검색 상자와 결과를 표시하기 위한 리스트 컴포넌트가 들어있다. www/views/search/search.html 파일을 새로 만들고 다음의 코드를 입력하자.

<< 리스트 시작 >>
  리스트 6.3 검색뷰 템플릿 (www/views/search/search.html)

  검색 상자와 버튼이 포함된 리스트 아이템
  결과 목록을 순회하면서 주소와 날씨뷰로의 링크를 표시
<< 리스트 끝 >>

목록을 표시하는 기본적인 템플릿이다. 첫 리스트 아이템은 검색 상자를 갖고 있는데, 검색 결과가 존재하게 되면 아래로 표시하게 된다. 검색 상자세 사용된 인셋 인풋 스타일을 적용하여 입력 상자를 약간 회색으로 표시하는 등, 조금 다른 외관을 가지도록 했다. 한편 입력 상자의 형식을 검색(type="search")으로 선언했는데, 장치에서 제공하는 키보드의 레이아웃이 검색용으로 바뀌게 된다.
아직 날씨 보기를 위한 상태를 선언하지는 않았지만, ui-sref를 사용하여 링크를 추가한 것을 볼 수 있다. 리스트의 경우, 도시, 위도와 경도 값을 전달했다.
템플릿 작동을 위해 컨트롤러도 필요하다. www/views/search/search.js 파일을 새로 생성하고 다음 리스트의 코드를 추가하자. 또한, 이 파일을 www/index.html의 스크립트 포함부분에 추가시키자:
<script src="views/search/search.js"></script>
<< 리스트 시작 >>
  리스트 6.4 검색 컨트롤러 (www/views/search/search.js)

  검색어를 위한 모델 정의
  검색어와 지오코딩 API로 검색한 결과를 저장하기 위한 메소드
<< 리스트 끝 >>

컨트롤러에서 정의한 모델은 뷰가 로딩될 때마다 초기화 된다. search() 메소드는 버튼을 탭할 때마다 호출되는데, 구글 지오코딩 API로 보낼 HTTP 리퀘스트를 만든다. 응답은 $scope.results에 저장되고, 결과 목록이 유효할 때 뷰에 업데이트 된다.
이제 검색 화면은 완성되었다. 다음에는 설정 뷰와 데이터를 저장하고 공유할 몇 가지 서비스를 만들어 보겠다.

6.4 설정뷰와 데이터 서비스 추가
이 앱에는 몇 가지 옵션에 대한 설정이 필요한데, 가령 선호하는 단위 형식을 고르기(온도를 화씨로 볼 것이냐, 섭씨로 볼 것이냐 같은) 기능이 있다. 그리고, 일기 예보를 조회하려는 날짜 수도 사용자가 지정할 수 있게 한다. 마지막으로 목록의 아이템을 제거함으로써 보고 싶은 장소만 관리하는 기능도 구현한다. Git을 통해 따라오고 있다면, 이번 단계를 위한 코드를 체크아웃 하자:
$ git checkout –f step4
설정 뷰를 위한 컨트롤러와 템플릿을 만들고 새로운 상태로 추가해야 한다. 그리고 나서, 앱 관리를 위해, 뷰들 간에 데이터와 메소드를 공유해서 쓸 수 있는 서비스를 두 개 만들 것이다. 마지막으로, 간편한 접근을 위해 사이드 메뉴에 선호하는 지역의 목록을 포함시키도록 수정할 것이다.

6.4.1 위치와 설정을 위한 서비스 만들기
첫 번째 단계는 두 개의 서비스를 만드는 것으로 시작한다. 그 중 하나는 좋아하는 지역을 주시하기 위한 것이고, 나머지는 설정 내용을 담고 있는 것이다. 어느 컨트롤러이든 주입할 수 있도록 AngularJS의 팩토리 메소드를 사용해서 서비스를 만든다. Settings 서비스는 속성만 가지고 있는 간단한 자바스크립트 객체이고, Locations는 지역 목록을 관리할 수 있게 해주는 몇 가지 메소드들을 포함하고 있다.
이번 예제에서는 간단하게 app.js에 서비스를 추가할 것이지만, 원한다면 개별 모듈로 만들어 추가해도 된다. www/js/app.js 파일을 열고 다음 리스트의 코드를 참고해서 서비스를 두 개 추가한다.

<< 리스트 시작 >>
  리스트 6.5 지역과 설정을 위한 서비스 (www/js/app.js)

  팩토리로 Settings 서비스 선언
  기본 설정 값을 가지는 자바스크립트 객체을 만들고, 반환
  팩토리로 Locations 서비스 선언
  Locations 객체를 생성하고, 데이터 배열에 시카고 지역의 값을 기본으로 저장
  특정 지역의 인덱스 값을 얻기 위한 메소드
  Locations에서 아이템 추가, 삭제를 토글링하는 메소드
  주어진 아이템을 맨 위로 옮기거나 추가하는 primary 메소드
  데이터와 메소드를 가지는 Locations 객체 반환
<< 리스트 끝 >>

각각의 컨트롤러들 사이에 공유할 될 수 있는 서비스를 정의하기 위해 AngularJS의 서비스를 사용했다. 이 후에 서로 다른 뷰에 이들이 추가될 것인데, 서비스에 어떤 변경이 가해지면, 그 즉시 다른 뷰에도 이 내용이 반영된다. 5장의 내용을 잠시 떠올려 보면, 화폐 목록에서 특정 아이템을 토글링하면 앱 전체에 이 내용이 반영되도록 하기 위해 같은 테크닉을 썼었다. 지역 목록을 저장하기 위해 Locations.data를 썼는데, 도시명, 위도와 경도 값을 포함하고 있다. 시작을 위해 내가 좋아하는 도시 중 하나인 시카고를 미리 설정해놨다.
Locations 서비스는 메소드를 세 개 가지고 있다. getIndex() 메소드는 입력한 아이템이 Locations.data 배열에 존재한다면, 해당하는 인덱스를 반환다. toggle() 메소드는 Locations.data 배열에 지역을 추가하거나 삭제하는 메소드로, 수행전에 그 지역이 Locations.data 배열에 존재하는지 아닌지를 체크한다. primary() 메소드는 새로운 지역 아이템을 목록의 상단에 추가하거나, 이미 존재한다면 옮긴다.

6.4.2 사이드 메뉴에 선호하는 목록을 보여주기
Locations 서비스를 만들었으니 사이드 메뉴에 좋아하는 지역들을 목록으로 보여줄 수 있다. 이를 위해 사이드 메뉴용 컨트롤러를 추가해서 Locations 서비스를 주입할 수 있도록 해보자. 그리고나서 지역 목록을 표시하기 위해 ngRepeat로 반복되는 아이템을 추가한다.
먼저, 아까 서비스를 추가했던 app.js 파일에 컨트롤러를 정의한다. 이 컨트롤러는 여타의 뷰와는 달리 사이드 메뉴에 속하는 것이라, 별도로 파일을 만들지 않고 app.js에 포함시켜도 되겠다. 다음 리스트를 보면, 코드가 아주 간단하다.

<< 리스트 시작 >>
  리스트 6.6 사이드 메뉴 컨트롤러 (www/js/app.js)

  컨트롤러를 만들고 서비스를 주입
  Locations.data 배열을 스코프에 대입
<< 리스트 끝 >>

이 매우 단순한 컨트롤러는 스코프에 지역 데이터 배열을 대입시키기만 한다. 컨드롤러에 이이상 복잡한 작업을 할 것은 없고, 사이드 메뉴 템플릿에 추가하면 된다. www/index.html 파일의 ionSideMenu에 ngController 디렉티브를 추가하고 새로만든 컨트롤러를 연결한다:
<ion-side-menu side="left" ng-controller="LeftMenuController">
지금까지 만든 아이오닉 앱에서 ngController를 쓴적은 없었으나, 3장에서 AngularJS를 다루면서 썼었다. 보통은 config() 안에서 $stateProvider를 이용해 뷰에 연결될 컨트롤러를 선언했었다. 이번과 같은 경우, 사이드 메뉴는 그 만의 경로를 위한 상태가 없기 때문에, 이렇게 컨트롤러를 직접 붙여줘야 한다. 이제 사이드 메뉴는 지역 목록에 접근할 수 있으므로, 뷰의 목록을 업데이트 할 수 있다.
www/index.html 파일을 열어둔채로 다음 리스트에서 볼드체로 표시된 두 줄을 추가한다.

<< 리스트 시작 >>
  리스트 6.7 네비게이션 목록에 지역 추가하기 (www/index.html)

  텍스트 표시를 위해 divider 추가
  지역 목록을 순회하면서, 지역별 날씨로의 링크를 추가하고 도시명을 표시
<< 리스트 끝 >>

ngRepeat로 locations 배열을 돌면서, (나중에 정의할)날씨 뷰로의 링크를 삽입한다. 이제 사이드 메뉴를 열면 기본으로 지정된 시카고가 좋아하는 지역으로 나타나야 한다. 이 후에 사용자가 지역을 추가하면, 그 역시 여기에 나타나게 될 것이다. 이제 설정 뷰를 만들어 보자.

6.4.3 설정 뷰 템플릿 추가
설정 뷰 템플릿은 크게 세 가지 영역으로 구성된다: 단위를 야드법이냐 미터법이냐를 선택할수 있는 라디오 버튼 리스트, 앞으로 며칠간의 일기 예보를 보여줄지 설정하는 인풋 영역, 삭제가 가능한 선호 지역의 목록 영역들이 그것이다. 리스트 6.8에서 전체 코드를 둘러보고, 개별 컴포넌트를 따져보도록 하자. www/views/settings/settings.html 파일을 새로 만든다. 결과적으로 만들어진 사용자 인터페이스는 그림 6.4의 모습과 같다.

<< 리스트 시작 >>
  리스트 6.8 설정 뷰 템플릿 (www/views/settings/settings.html)

  ionRadio 컴포넌트로 단위 형식을 선택
  표시할 날 수를 정하기 위해 범위 형식의 input 사용
  canDelete 상태를 토글링하기 위한 버튼
  지역 목록을 돌면서 실행
  canDelete 값에 따라 삭제 버튼을 보여줄 목록 생성
  삭제 상태가 활성화 되었을 때에만 목록에 나타나는 삭제 버튼
  API 출처를 밝힘
<< 리스트 끝 >>

<< 그림 시작 >>
  (왼쪽만 위에서부터 순서대로)
  라디오 리스트 컴포넌트 (ionRadio)
  범위 컴포넌트
  선호 지역 목록
  (오른쪽만 위에서부터 순서대로)
  삭제를 위한 상태 값을 토글링하는 버튼
  목록 내 아이템은 지워질 수 있음 (ionDeleteButton)

  그림 6.4 라디오 옵션, 범위 입력, 삭제 가능한 목록 아이템이 보이는 설정 뷰
<< 그림 끝 >>

라디오 옵션부터 살펴보자. ionRadio 컴포넌트는 모바일 장치를 위해 디자인된 라디오 버튼을 래핑한 컴포넌트이다. 웹 페이지에서 보통 보여지는 작은 동그라미를 보여주는 대신에, 아이템이 선택되었는지 여부를 알려주는 체크 표시를 가지는 목록 아이템으로 모양새를 바꿨다. 또한 list 컴포넌트 내부에서 사용된다고 가정되었기 때문에, ionItem과 같은 형식으로 보인다. 별도의 ionItem 안에 자식 엘리먼트로 자리하지 않고 있는 이유가 그것 때문이다. 두 ionRadio에 같은 ngModel을 지정했기 때문에, 사용자가 하나를 선택하면, 다른 하나는 동시에 선택되지 않은 상태가 됨으로써, 라디오 버튼의 기능을 만족시키게 된다.
다음 컴포넌트는 범위 슬라이더(range slider)이다. 이는 아이오닉이 제공하는 새로은 스타일의 HTML 엘리먼트 이다. 그림 6.4를 보면 값을 설정하기 위해 이리저리 움직일 수 있는 원형의 핸들이 부착된 가로 줄을 볼 수 있다. 예제의 경우 2에서 8까지의 값을 가지게 되는데, 첫날은 무조건 예보에 포함되는 상황에서, 며칠을 추가로 더 보여줄 것인가를 선택하는 것이기 때문에 그렇다. 컴포넌트를 드래그 하면, 값은 자동으로 갱신된다.
마지막 컴포넌트는 아이템을 리스트로부터 제거할 수 있는 옵션을 가진 ionList이다. 삭제 버튼을 보여주는 동작은 ionList 컴포넌트에서 알아서 수행되지만, 실제 아이템 삭제를 처리하는 로직은 개발자가 구현해야 할 몫이다. 삭제 기능을 쓰기 위해서 show-delete="canDelete" 어트리뷰트를 사용했다. 표현식의 값이 true이면, 삭제 버튼이 나타나고, 그렇지 않으면 숨겨진다. 또한 각 아이템에 개별적으로 ionDeleteButton을 사용하고 싶은 아이콘을 더해서 선언해야 한다. 또한 목록 아이템은 ngClick으로 아이템 삭제를 처리하기 위한 컨트롤러의 메소드를 호출한다. 아이템 구분(divider) 영역에는 canDelete의 값을 true, false로 토글링하는 버튼이 들어 있다. 이 버튼은 다소 복잡한 표현식을 사용하고 있는데, 3항 연산자를 이용해서 표시할 텍스트를 canDelte의 값에 따라 Edit이나 Done으로 바꿔주고 있다.
마지막으로 데이터의 출처 두 곳을 밝히고 있다. 때때로 API 서비스들은 무료로 사용할 수 있게 허용하지만, 저작권은 밝히도록 요구하기도 한다. 이를 위해 리스트 6.8에서도 출처를 밝혔다.

6.4.4 설정 뷰의 컨트롤러
설정 뷰를 완료하려면 컨트롤러를 만들어야 한다. 이전에 만든 Locations와 Settings 서비스에 접근해야 하고, 삭제 버튼이 눌러졌을 때 지역을 삭제하기 위한 로직을 추가해야 한다.
www/views/settings.js 파일을 새로 만들고 다음 리스트에 표시된 컨트롤러 코드를 추가하자.

<< 리스트 시작 >>
  리스트 6.9 설정 뷰 컨트롤러 (www/views/settings/settings.js)

  컨트롤러를 선언하고 서비스를 주입
  설정값, 지역 목록 데이터를 스코프에 저장
  삭제 가능 상태의 기본값 지정
  지역 목록에서 특정 아이템을 삭제 처리하기 위한 메소드
<< 리스트 끝 >>

컨트롤러는 두 가지 작업만 수행하기 때문에 간단하다. 첫째는 서비스에서 정의했던 값을 불러와 $scope로 저장하는 것이다. 앞서 서비스로 만들어 두었던 자바스크립트 객체에 어떤 변화가 가해지면, 바로 연관된 곳들에 반영이 된다는 사실을 기억하라. 두번째, remove() 메소드는 해당 지역을 가리키는 인덱스 값을 엽력받아 Locations.toggle() 메소드를 아이템 삭제를 위해 호출한다. 지역을 추가하거나 삭제하는 동작은 Locations 서비스에서 추상화 해두었기 때문에, 여기서 로직을 재작성할 필요는 없다.
이제 설정 뷰를 위한 새로운 상태를 추가하고 컨트롤러도 애플리케이션에 추가하자. www/index.html 파일을 열고 다음의 <script> 태그를 앞에 추가했던 <script> 태그들 다음에 새로 추가하자:
<script src="views/settings/settings.js"></script>
그 다음, www/js/app.js 파일을 열고 다음 리스트 6.10의 코드로 설정 뷰를 위한 상태를 선언하자. 이것이 설정 뷰를 보기 위해 해야할 마지막 단계가 되겠다. $stateProvider 선언부에 추가하자.

<< 리스트 시작 >>
  리스트 6.10 설정 뷰를 위한 상태 선언 (www/js/app.js)
<< 리스트 끝 >>

라디오 아이템과 범위 입력 컴포넌트, 아이템 삭제 기능을 가지는 목록을 포함하는 설정 뷰 제작은 완료했다. 이제 날씨 뷰를 만들 시간이다.

6.5 날씨 뷰 만들기
만들어야 할 마지막 뷰는 날씨 뷰로써, 현재 날씨와 그 지역의 일기 예보를 보여준다. 이번 섹션에서는 날씨 뷰를 위한 밑작업을 진행하고, 이번 장의 남은 부분은 좀 더 복잡한 기능을 추가하게 될 것이다. Git을 사용하고 있다면, 이번 단계를 위한 소스 코드를 체크아웃하자:
$ git checkout -f step5
이번 색션의 결과는 그림 6.5의 모습이다. 지금은 되게 간단한 상태이지만, 진행하면서 더 다듬고, 내용을 추가할 것이다.

<< 그림 시작 >>
  날씨 데이터를 뷰에 바인드
  그림 6.5 Forecast.io로부터 데이터를 불러와 현재 온도를 표시하는 날씨 뷰
<< 그림 끝 >>

6.5.1 Forecast.io API의 키 얻기
Forecast.io 서비스는 요청을 보낼때 API 키를 필요로 한다. 유료 서비스를 이용할 생각이 아니라면, 이메일 주소와 비밀번호를 지정해서 계정을 만들어야 하는데, 별도의 신용카드나 개인정보 제공은 필요없다. http://developer.forecast.io/로 가서 무료로 계정을 만들고 토큰을 얻길 바란다. 몇 분이면 토큰을 얻을 수 있다.

6.5.2 아이오닉 CLI 프록시 사용하기
이 책을 쓰는 시점에 Forecast.io는 CORS(Cross-Origin Resource Sharing)를 허용하지 않는다. 이게 무슨말이냐면, 기본적으로는 브라우저에서 그들의 API를 써서 데이터를 불러올 수 없다는 것을 의미한다. 자바스크립트 코드에서 Forecast.io로 보내는 데이터 요청이 실패한다는 말이다.

<< 상자 시작 >>
  CORS (cross-origin resource sharing)
  CORS는 브라우저들이 구현하고 있는 보안 규칙의 하나로 웹애플리케이션이 다른 도메인의 데이털르 불러올 수 있게 하는데에 관련되어 있다. 기본적으로 브라우저는 다른 도메인의 데이터 로딩을 금지시키는데, 외부 도메인이 보내줄 데이터를 신뢰할 수 없기 때문이다. 그러나 사용자가 데이터의 출처를 신뢰하고 API가 CORS를 지원한다면, 데이터를 불러올 수 있다. CORS에 대한 추가 정보는 http://enable-cors.org나 http://manning.com/hossain에 소개된 'CORS in Action' 책을 참고하기 바란다.
  이 책에 사용된 다른 RESTful API들은 CORS를 모두 지원하기 때문에 여러분 단에서 추가로 해줘야할 일은 없다.
<< 상자 끝 >>
아이오닉 CLI 유틸리티는 프록시를 사용함으로써 이 제약 조건을 비껴갈 수 있는 기능을 가지고 있다. 이를 위해 일종의 바로가기 또는 별칭 URL로 향하는 리퀘스트를 만들어서 ionic serve로 실행되는 서버로 보내면, CLI가 원래의 요청을 실제 API URL로 전달해 준다. (역주: 이게 무슨말인지 이해가 안된다고 해서, 지금의 이 문장에 얽매이지 말고 계속 읽어나가기 바란다. 이 절의 끝까지 보고나서 다시 복기해보면, 이해가 될 것이다.)
실제 서비스되는 애플리케이션 상황에서는 여전히 CORS 제한이 걸려있는 Forecast.io API의 적절한 주소가 필요한데 이 때는 다른 방법을 이용한다. 앱이 장치에서 실행될 때에는 API 요청을 프록시를 통해 보낼 CLI 유틸리티가 없다. 그렇기 때문에 CORS를 지원하는 API로 바꾸거나 앱을 위해 제작한 공개 CORS 프록시 서버를 사용하는 것이다.
무튼, 앱 폴더를 보면, 이번에 열어야 할 ionic.project 파일이 있다. 이 파일은 아이오닉 프로젝트의 설정을 담은 JSON 객체가 들어있는데, 여기에 URL 목록을 프록시로 매핑하는 새 프로퍼티를 추가할 수 있다. JSON 형식이 유효하도록 유지하면서, 다음 리스트에서 볼드로 표시된 부분을 여러분의 ionic.project 파일에 추가하자. 다음 리스트에서 보이는 것 외의 정보가 들어 있을 수도 있다.

<< 리스트 시작 >>
  리스트 6.11 ionic.project 파일에 프록시 선언 (ionic.project)
  객체 배열 형식의 프록시 프로퍼티 추가
  (다음 페이지)
  앱에서 호출할 새로운 프록시 URL인 경로 추가
  결국 호출되어야 할, proxyUrl 프로퍼티 추가
<< 리스트 끝 >>

이제 프록시를 선언했으니, /api/forecast를 호출하면, 실제로는 로컬 서버의 프록시를 통해서 리스트 6.11에서 정의한 proxyUrl 값으로 요청이 가게 된다. YOUR_KEY 부분은 Forecast.io로부터 받은 API 키 값으로 대체한다.
이제부터 ionic serve 명령을 실행하면, 프록시가 설정된다. ionic emulate나 ionic run을 라이브 리로드 옵션을 주고 실행한 경우에도 역시 작동한다. 이렇게 해서 로컬애서 Forecast.io 서비스를 개발할 수 있게 되었다. CORS를 지원하지 않는 다른 서비스와 연동되는 앱을 로컬에서 개발하게 될 때, 이 테크닉을 동일하게 쓰면 되겠다.

6.5.3 날씨 뷰 컨트롤러와 템플릿 추가
이제 날씨 뷰가 애플리케이션에 추가할 것이다. 아직은 일기예보 데이터를 불러와 현재 온도를 보여주는 정도의 수준이 될것이다. 나중에 여러가지 아이오닉 컴포넌트와 컨텐츠를 뷰에 추가할 것이다.
먼저, 템플릿부터 만들자. 되게 평범한데, 헤더 바에 지역의 이름을 표시하고, 현재 온도를 보여준다. 그림 6.5에서 시카고는 화씨 18도임을 볼 수 있었다. www/views/weather/weather.html 파일을 새로 만들고 다음의 코드를 추가한다.

<< 리스트 시작 >>
  리스트 6.12 날씨 뷰 템플릿의 기초 작업 (www/views/weather/weather.html)
<< 리스트 끝 >>

여기서 할 건 많지 않다. 몇 개의 데이터를 제목과 콘텐츠 영역에 바인드만 하면 된다. 이 데이터는 다음에 컨트롤러가 불러올 것이다. number 필터를 온도에 사용해서 온도를 정수로 변환했는데, 서비스로부터 받은 값은 필요 이상으로 정확한 값이기 때문이다. 사용자는 온도가 정수로 간단히 보이길 바랄거라 가정했다.
이제 컨트롤러를 추가하자. 현재는 뷰만큼이나 가볍지만, 앞으로 진행하면서 슬슬 확장해 나갈 것이다. 다음 리스트는 www/views/weather/weather.js 파일에 추가해야할 컨트롤러 코드를 담고 있다.

<< 리스트 시작 >>
  리스트 6.13 날씨 컨트롤러 (www/views/weather/weather.js)

  컨트롤러를 정의하고 서비스 주입
  서비스 데이터를 스코프에 대입
  HTTP 요청을 만들어 일기예보를 불러옴
<< 리스트 끝 >>

컨트롤러가 실행될 때, 먼저 몇 가지 값을 $scope에 저장한다. $stateParams는 $scope.params에 저장되어, 헤더바를 위한 지역 이름에 사용된다. Settings 값들도 나중을 위해 스코프에 저장된다. 그다음 프록시 URL로 보낼 HTTP 요청을 만드는데, 위도, 경도와 단위 형식을 지정한다. 응답이 오면, 템플릿이 사용할 수 있도록 $scope.forecast에 저장한다.
마지막으로, 새로운 상태를 $stateProvider에 추가하고, 컨트롤러를 index.html에 추가해야 한다. index.html을 열고 다음의 <script> 태그를 추가하자:
<script src="views/weather/weather.js"></script>
www/js/app.js를 열고 다음 리스트의 상태 정의 코드를 추가하자. 이로써 날씨 뷰를 위한 현 단계의 작업은 끝이 난다.

<< 리스트 시작 >>
  리스트 6.14 날씨 뷰를 위한 상태 선언 (www/js/app.js)
<< 리스트 끝 >>

다음 절에서는 일기예보 정보를 보기 위해 페이지 단위의 뷰 스크롤 기능을 만들것이다.

6.6 ionScroll : 커스텀 스크롤 콘텐츠 만들기
이번 절은 날씨 데이터을 보여주기 위해 커스텀 스크롤을 제공하고, 멋지게 보이기 위해 필요한 마크업과 스타일을 추가하는데 초점을 맞춘다. 널려있는 날씨 앱이 무지하게 많기 때문에, 좋은 사용자 경험을 제공하는 것은 중요하다. Git을 사용한다면, 이번 단계를 위한 코드를 체크아웃 하자:
$ git checkout -f step6

<< 그림 시작 >>
  (왼쪽)
  고정된 스크롤 영역과 콘텐츠의 첫 페이지
  스크롤 영역에 세 페이지가 적재된 콘텐츠 콘테이너
  (오른쪽)
  두번째 페이지를 보이기 위해 콘텐츠 콘테이너가 위로 옮겨짐

  그림 6.6 분리된 일기예보 콘텐츠를 페이지 단위로 보기위해 ionScroll 사용하기
<< 그림 끝 >>

페이지 단위로 수직 스크롤을 하기 위해 ionScroll을 사용한다. 즉, 사용자가 위 아래로 스와이핑하면, 다음 페이지가 나타날때까지 현재 페이지에서 스크롤이 계속 된다. 어떤 면에서는 ionSlideBox와 비슷와 같은데, 수직으로 이동한다는 것과 사용자 경험면에서 약간 다른 점이 있다.
그다음 콘텐츠를 더하고 스크롤러 안의 각 페이지에 스타일을 입힌다. 마지막으로 데이터를 좀 더 의미가 잘 전달되도록 형식을 다듬기 위해 몇 가지 필터를 추가할 것이다.
이번 장 마지막에 그림 6.6처럼 일기 예보를 스크롤해 볼 수 있게 될 것이다. 스크롤은 다음 페이지에 다다랐을 때에만 멈춘다.

6.6.1 ionScroll로 페이징하기
먼저 ionScroll로 스크롤 영역을 만들어야 한다. 보통은 ionContent를 사용할 때, 수직 스크롤은 디폴트 값으로 설정하고 콘텐츠는 자동으로 채우도록 한다. 그러나 ionScroll은 스크롤되는 콘텐츠 영역의 작동 방식을 좀 더 조절할 수 있게 해주는데, 이번 예제의 경우 우리가 원하는 페이징 단위로 움직이게 할 것이다.
ionScroll 디렉티브는 너비와 높이 값이 주어져야 한다. ionContent에서는 이 부분이 자동으로 처리되지만, ionScroll은 그렇지 못하다. 앱이 서로 다른 화면 사이즈를 가지는 각각의 장치에 적재될 수 있기 때문에 화면 사이즈에 기반한 ionScroll의 사이즈를 계산할 수 있어야 한다.

<< 그림 시작 >>
  콘텐츠 영역은 모든 페이지의 크기를 합친 하나의 큰 콘테이너이다.
  사용자가 위 아래로 스크롤하면, 페이지 경계 포인트에서만 멈춘다.
  콘텐츠 영역은 다음 보일 영역으로 슬라이드 된다. 한번에 하나의 프레임만 보여주는 영사기의 필름과 같다.
  페이지 사이즈는 화면의 높이와 너비에 기반한다.
  전체 콘텐츠 콘테이너는 세 페이지를 합친 높이를 가지거나, 한 페이지가 화면 사이즈와 같다면 1500 픽셀이 된다.

  그림 6.7 ionScroll로 페이지 단위 스크롤을 구현하는 방법
<< 그림 끝 >>

ionScroll 각 페이지로 스크롤되고 멈추기 위해서 화면 높이의 세 배의 영역으로 생성해야 한다. 계산을 좀 해보면 콘텐츠 영역을 생성하여, 페이지들 간에 위 아래 스크롤을 할 수 있을 것이다. 그림 6.7을 보고 스크롤 기능을 만들기 위해 작동하는 방식을 이해해 보자.
스크롤 영역을 위해서 ionScroll을 볼 수 있는 영역과 같은 크기로 만들고, ionScroll안에 div 엘리먼트를 ionScroll의 높이의 세 배로 생성한다. 이 안쪽의 div 엘리먼트는 위 아래로 슬라이드가 되어 나중에 체험할 스크롤 효과를 제공하게 된다. 수직으로만 스크롤 되도록 하고, 페이징 기능을 넣어서, 다음 페이지에 도착할 때까지 스크롤 되게 한다. ionScroll의 높이가 500픽셀이라고 가정해보자; 안에 있는 div는 1500 픽셀로 세 페이지의 높이다(500 X 3 = 1500). 높이가 500 픽셀이기 때문에, 페이징이 가능할 때 스크롤링은 ionScroll의 높이에 기반한 경계면에서 멈춘다. 즉, 0픽셀(1페이지), 500 픽셀(2페이지), 또는 1000픽셀(3페이지)가 된다.
ionScroll이 포함하고 있는 템플릿을 보자. 몇 가지 계산을 이용하고 있는데, 요다음 컨트롤러에서 추가할 것들이라 만들어 질때까지는 작동하지 않는다.

<< 리스트 시작 >>
  리스트 6.15 ionScroll이 추가된 날씨 뷰 템플릿 (www/views/weather/weather.html)
  (왼쪽)
  ionScroll을 올바로 위치시키기 위해 ionContent 사용
  (오른쪽)
  페이징을 위래 ionScroll을 수직으로만 가능하도록 설정. 높이와 너비를 정확히 지정.
  안쪽에 div를 생성하고 세 페이지만큼의 높이로 지정
  ionScroll 영역과 같은 높이와 너비를 가지도록 선언된 페이지
<< 리스트 끝 >>

ionContent를 선언하고 그 안에 ionScroll을 두었다. ionContent는 헤더바의 사이즈를 고려한 컨테이너를 제공한다. ionScroll은 그안에 있으면서, 컨트롤러로부터 계산된 높이와 너비를 갖는다. ionContent는 실제로 스크롤되지는 않는데, ionScroll이 보이는 영역과 같은 크기를 가지기 때문이다.
ionScroll안에는 div 엘리먼트가 있는데, 스크롤 될 세 개의 페이지 전체 높이를 가진다. 스크롤 될 실제 페이지는 그 안에 순서대로 쌓여있다(그림 6.7).
이제 사이즈를 계산하는 컨트롤러 메소드를 추가하면, 스크롤 되는 모습을 미리 볼 수 있다. www/views/weather/weather.js 파일을 열고, 다음 리스트의 코드를 컨트롤러 안에 삽입하자.

<< 리스트 시작 >>
  리스트 6.16 크기를 결정하는 콘트롤러 메소드 (www/views/weather/weather.js)

  헤더 바의 높이를 구함
  앱의 너비를 제공
  페이지의 수 만큼 곱해서 전체 높이를 구함
  헤더바를 제외한 영역의 높이를 구함
<< 리스트 끝 >>

헤더 바의 높이를 구하는 것으로 시작하는데, 이 값은 플랫폼에 따라 달라지는 값이다. getWidth(), getHeight()와 getTotalHeight() 메소드는 가능한 영역의 크기를 구하기 위해 window의 크기에서 바의 높이를 뺀다. 크기를 구하기 위해 프로그래밍으로 접근하는 이런 방식이 필요한 이유는, 장치에 따라 화면의 크기가 다른 상황에서 페이지의 크기가 화면의 크기와 같도록 해야하기 때문이다. 고정된 크기를 갖는 아이템을 스크롤하기 위한 영역을 만들때 명시적으로 크기를 지정하는 대신, 이와 같은 로직을 사용하면 된다.
이제 스크롤 동작을 이해했으니, 스크롤 될 각각의 페이지 내부에 콘텐츠를 추가하면 되겠다. 다음 리스트는 www/views/weather/weather.html 파일에 갱신할 템플릿 코드이다.

<< 리스트 시작 >>
  리스트 6.17 날씨 템플릿에 추가되는 콘텐츠 (www/views/weather/weather.html)
  (왼쪽)
  페이지 콘텐츠의 위치를 잡기 위해 has-header 클래스를 지정
  조건에 따라 아이콘을 매핑하기 위해 icons 필터 사용
  설정에서 지정한 날 수를 보여주기 위해 limitTo 필터 사용
  (오른쪽)
  서브 헤더처럼 보이기 위해 헤더 바 사용
  풍향을 표시하기 위해 화살표를 주어진 각도만큼 회전시킴
  유닉스 타임스탬프를 요일로 변환하기 위해 date 필터 사용
  (다음 페이지)
  (왼쪽)
  10단위로 근사시킨 퍼센트 값을 만들기 위해 chance 필터 사용
  (오른쪽)
  지역별 시간대에 맞게 변환시킨 일출, 일몰 시간
<< 리스트 끝 >>

템플릿에 포함된 콘텐츠가 많은데, 대부분은 뷰에 바인딩된 데이터들이고 스타일와 위치를 지정하기 위해 엘리먼트들이 사용되었다. 각 페이지는 바 엘리먼트를 가지는데, 페이지의 제목을 담고 있다. 그 뒤를 따르는 엘리먼트들은 페이지에 따라 각각 다른 콘텐츠를 포함한다. 필터를 만들기 전까지는 애플리케이션이 정상적으로 로딩되지 않을 것이다.
두 번째 페이지의 내부에는 콘텐츠의 레이아웃을 잡기 위해 아이오닉의 그리드 기능을 사용했다. row 클래스를 가지는 div 엘리먼트 하나와 col 클래스를 가지는 다수의 div가 있다. 부트스트랩과 같은 CSS 프레임워크에 친숙하다면, CSS 그리드 시스템이 사용되었다는 걸 눈치챌 수 있을 것이다. 즉, CSS 그리드는 행과 열로 레이아웃을 자동으로 조정하는 장치이다. 이것을 사용하면 콘텐츠를 table 엘리먼트를 쓰지 않으면서 테이블과 유사하게 배치시킬 수 있다(table 엘리먼트는 레이아웃을 잡기 위한 목적이 아닌 데이터를 표로 표시하기 위한 용도로 만들어진 것이다). 예제 코드의 경우 4개의 열을 갖고 있는데, 첫 번째 열은 너비의 50%를 차지하도록 설정했다. 아이오닉의 CSS 그리드 컴포넌트는 열의 레이아웃을 자동으로 조정하기 위해 CSS 플렉스박스 기능을 사용한다. 그래서, 열의 너비를 지정하지 않으면, 자동으로 남은 공간을 나누어 같은 크기를 가지게 된다.
지금 상태로 미리보기를 하면 다소 난잡하게 보일 것이다. 디자인이 좀 더 자연스럽게 보이도록 하기 위해 CSS를 몇 개 추가해야 한다. www/css/styles.css 파일을 열고 다음 리스트의 CSS 규칙을 추가하자.

<< 리스트 시작 >>
  리스트 6.18 날씨 뷰를 위한 스타일 (www/css/styles.css)
<< 리스트 끝 >>

이 CSS 규칙들은 스크롤 될 페이지의 콘텐츠에만 적용되고, 엘리먼트를 깔끔하게 표시하기 위한 용도로만 사용되었다. 여러분의 앱에서는 이 예제보다 더 많은 CSS를 적용하고 싶을 수도 있겠지만, 초점은 아이오닉의 기능을 이해하는 것에 두어야 한다.

6.6.2 일기 예보 데이터에 적용할 필터 만들기
3장에서 다뤘지만, 필터는 뷰에서 데이터를 표현하는 방법을 변경하는데 사용된다. 필터의 로직은 컨트롤러에 둘 수 있지만, 재사용하기 쉬운 방법은 아니다. Forecast.io로부터 많은 데이터를 받게 되는데, 모두가 원하는 형식을 갖고 있는 것은 아니다. 예를 들어, 일출과 일몰 시간은 타임스탬프로 얻게 되는데, 타임스탬프는 사람이 읽기 쉬운 형식은 아니다. 이럴 때 타임스탬프를 "5:46 p.m"과 같이 친숙한 방식으로 변환할 필터를 만들 수 있다.
먼저, 일기 예보에 관련된 아이콘을 표현한다. 예를 들어, 비가 오고 있다면 아이오닉의 비 아이콘들 중 하나를 사용하면 된다. 템플릿에서 이미 필터를 사용하고 있기 때문에, 이제 이것들을 구현해야 한다. 그 다음에 비가 올 확률을 가장 가까운 10단위의 수로 근사시킨다. 다시말해, 강우 확률은 20%와 같이 표현하지, 17%와 같은 값은 쓰지 않는다.
마지막으로 타임스탬프로 표현된 일출와 일몰 시간을 고친다. 이 때 타임스탬프는 사용자가 있는 위치의 시간대에 기반하고 있다. 예를 들어, 시카고에 살고 있으면서 런던의 날씨를 볼 때, 시카고의 시간대로 나타난다. 이는 혼란을 야기시키는데, 일출 시간이 한밤중이 되기 때문이다. 타임존을 관리하는데 도움을 주는 Moment.js라는 자바스크립트 라이브러리를 사용하여, 시간을 사용자의 시간대가 아닌 해당 지역의 시간대에 기반하여 표시되도록 한다.
먼저, Momento.js 라이브러리를 ionic add 기능을 이용해서 인스톨한다. 프로젝트의 루트에서 다음의 명령어를 실행하면, 빠르게 파일을 설치할 수 있다. Git을 사용해서 따라오고 있다면, 이미 설치가 되어 있기 때문에 다음 명령을 실행할 필요는 없다:
$ ionic add moment-timezone
시간대를 관리하기 위해 사용될 Moment.js와 Moment Timezone이 다운로드하고 설치하는데는 시간이 약간 걸릴것이다. Moment Timezone은 Moment.js에 의존성을 갖고 있다. 다운로드가 끝나면, index.html 파일의 아이오닉 <script> 태그와 앱 관련 <script>태그 사이에 추가한다:
<script src="lib/moment/moment.js"></script>
<script src="lib/moment-timezone/builds/moment-timezone-with-data.js"></script>
이제 Moment.js 라이브러리 설정은 마쳤으니, 타임스탬프를 해당 지역의 타임존에 맞춰 변환할 새 필터를 만들수 있게 되었다. 다행스러운 것은 일기 예보 데이터가 지역의 시간대 정보를 포함하고 있기 때문에 별도로 이를 찾기 위한 수고를 들일 필요가 없다.
다음 리스트는 이번에 만들어야 할 세 개의 필터 코드를 담고 있다. www/js/app.js파일을 열고, 앱에 필터를 추가해보자.

<< 리스트 시작 >>
  리스트 6.19 날씨 뷰를 위한 필터들

  해당 지역의 시간대로 변환하는 timezone 필터
  타임스탬프와 타임존 인자가 모두 주어질 때에만 타임스탬프를 변환
  강수 확률을 변환할 chance 필터
  값이 주어지면 10의 배수에 가까운 값으로 근사
  (다음 페이지)
  값이 주어지면 10의 배수에 가까운 값으로 근사
  날씨 상태에 따라 아이콘을 변경하는 icons 필터
  조건과 아이콘의 매핑을 갖고, 상황에 맞는 아이콘을 반환
<< 리스트 끝 >>

여기의 필터들은 꽤 직관적이다. timezone 필터는 타임스탬프를 특정 시간대에 기반한 형태로 변환한다. chance 필터는 퍼센티지 값을 받아 가장 가까운 10의 배수로 근사시킨다. icons 필터는 일기 예보 데이터로부터 아이콘을 지정할 값을 뽑아 적절한 아이콘을 반환한다.
이제 앱이 실행되어 전체 날씨 정보를 보여줄 수 있게 되었다. ionScroll 컴포넌트를 사용한 덕에 위 아래로 스크롤도 할 수 있되, 다음 페이지에서 멈춘다. 이번 절은 다소 복잡한 부분도 있었지만, 각 컴포넌트를 하나씩 뜯어보면 그들의 역할을 명확하게 알 수 있을 것이다. 다음 단계는 새로운 옵션 버튼을 만들것인데, 사용자가 선택할 수 있는 목록을 가지는 액션 시트를 열게 한다.

6.7 액션 시트: 옵션 목록 보여주기
액션 시트 컴포넌트는 사용자들에게 선택지 목록을 보여줄 때 유용한 도구이다. 예제에서는 사용자에게 옵션 리스트를 보여줘서, 선호하는 지역을 토글하거나 주요 지역으로 설정할 수 있도록 한다. Git을 쓰고 있다면, 이번 단계를 위한 코드를 체크아웃하자:
$ git checkout -f step7

옵션 목록을 보여주기 위한 액션 시트는 화면 아래로부터 올라오는 버튼의 목록이다. 보통은 여기에 취소 버튼이 붙고, 삭제와 같은 파괴적인 동작을 알리는 스페셜 버튼이 추가되기도 한다. 버튼의 바깥 영역을 탭하면 모달 상자나 팝오버 창과 같이 시트가 닫힌다. 그림 6.8에서 액션 시트를 볼 수 있다.
액션 시트 컴포넌트는 iOS 사용자라면 친숙할텐데, 안드로이드의 경우 이와 유사한 네이티브 컴포넌트를 가지고 있지 않다. 따라서 안드로이드도 지원할 계획을 갖고 있다면, 이 기능을 사용을 신중히 고민해야 한다. 안드로이드에서는 동작하지 않는다는 류의 기술적인 문제가 있기 때문은 아니고, 안드로이드 사용자에게는 직관적이지 않을 수 있기 때문이다.

<< 그림 시작 >>
  액션 시트를 열기 위한 버튼
  시트를 닫기 위해 배경을 탭
  취소 버튼이 분리되어 있는 액션 시트 버튼들

  그림 6.8 액션 시트를 열기 위한 버튼
<< 그림 끝 >>

액션 시트를 위한 템플릿은 따로 없는데, $ionicActionSheet 서비스에 모두 포함이 되어 있기 때문이다. 우리가 해야 할 것은 버튼 목록을 선언하고, 각 버튼이 선택되었을 때 수행해야할 일을 정의하는 것이다. 액션 시트를 띄우기 위한 더보기 버튼을 뷰에 추가하기 위해 다음 리스트를 참고하자.

<< 리스트 시작 >>
  리스트 6.20 액션 시트 보기 버튼 (www/views/weather/weather.html)

  (왼쪽)
  오른쪽에 네비게이션 버튼 추가

  (오른쪽)
  사이드 바를 토글하는 왼쪽 버튼 재선언
  showOptions를 호출할 네비게이션 버튼 추가
  템플릿의 나머지 부분은 전과 동일
<< 리스트 끝 >>

헤더바의 제목 오른쪽에 세 개의 점으로 표현된 더보기 아이콘을 갖는 버튼을 새로 추가한다. 이 버튼은 다음에 작성할 컨트롤러의 메소드를 호출하는데, 그 메소드가 액션 시트 구동을 처리하는 로직을 갖고 있다. 또한 왼쪽의 버튼도 다시 추가했는데, 이렇게 하지 않으면 이번 뷰에서 정의한 새 버튼으로 바뀌어 버리게 된다.
www/views/weather/weather.js 파일의 콘트롤러도 수정해야 한다. $ionicActionSheet 서비스를 콘트롤러에 주입해야 하는데, 리스트에 나타내지는 않았다. 다음 목록의 코드를 살펴보자.

<< 리스트 시작 >>
  리스트 6.21 콘트롤러 속 액션 시트 (www/views/weather/weather.js)

  (왼쪽)
  취소 버튼의 텍스트 지정
  (오른쪽)
  액션 시트를 설정하고 보여주기 위해 show 메소드를 사용. $ionicActionSheet 서비스가 주입되어 있어야만 한다.
  버튼을 위한 객체들의 배열. 객체는 text 속성을 가져야 한다.
  버튼이 클릭되었을 때 실행될 메소드. 선택된 버튼의 인덱스가 주어진다.
  현재 지역을 선호 지역으로 지정하거나, 빼기위해 Locations 서비스 사용
  현재 지역을 주요 지역으로 정하기 위해 Locations 서비스 사용
  모달 창을 연다(다음 절에서 다룰 예정)
  true를 반환하면 액션 시트가 닫히며, 그렇지 않을 경우에는 열려 있던 상태가 유지된다
<< 리스트 끝 >>

버튼에 의해 이 콘트롤러의 메소드가 호출되면, 그 즉시 액션 시트가 뜨게 된다. $ionicActionSheet.show()의 반환 값을 sheet 변수에 대입했는데, 이 값은 시트를 닫을 수 있는 함수이다. 즉, 언제든 sheet()를 호출해서 닫을 수 있는 것이다. show() 메소드는 여러가지 속성을 가지는 객체를 인자로 받는데, 여기서는 세 개의 버튼을 만들었고, 별도로 분리된 영역을 가지는 취소 버튼을 추가했다. 취소 버튼은 (버튼 배열에 속하지 않고)별도의 속성으로 정의하는데, 특별한 버튼이기 때문이다. 기본적으로 취소 버튼은 창을 닫기만 할 뿐이고, 여기서도 그렇게 사용했다. 원한다면 취소 버튼의 클릭 이벤트를 처리해서 커스텀 함수를 실행시킬 수 있다.
마지막 속성은 buttonClicked 함수 있다. 버튼이 선택되었을 때 호출되는데, 버튼의 인덱스가 전달된다. 취소 버튼이나 여타의 파괴적인 버튼이 클릭되었을 때는 이 함수가 실행되지 않는데, 그들은 여기서는 보이지 않지만, 별도의 함수를 가진다. 여기서는 세 개의 버튼을 갖고 있기 때문에, 인덱스의 값을 체크하는 세 개의 조건을 가지고 있고, 버튼에 맞는 로직을 실행한다. 처음 두 버튼은 이전에 만들었던 Locations 서비스를 사용하고, 세번째 버튼은 아직은 아무것도 하지 않는다. 요부분은 다음 절에서 다룰 것이다.
여기까지가 앱에 액션 시트를 추가하기 위해 해야할 일의 전부이다. 이제 마지막 버튼의 처리를 할 것인데, 추가 정보를 보여주기 위한 모달 윈도우가 아래에서부터 위로 올라오게 한다.

6.8 ionModal : 일출과 일몰 시간의 차트를 보여주기
오늘날 모달 창은 사용자 인터페이스로 빈번히 사용되고 있다. 모달이란 현재 뷰 위에 겹쳐 올려진 임시 뷰이다. 웹 사이트에서 모달은 사용자에세 뉴스레터 구독을 신청하게 하거나 콘텐츠의 나머지 부분은 어둡게 처리하고 그 콘텐츠에만 집중시키는 용도로 종종 사용된다. Git을 사용하고 있다면, 이번 단계를 위한 코드를 체크아웃 하자:
$ git checkout -f step8
모바일 장치에서 모달은 조금 다른 맥락에서 사용될 수 있지만 원칙은 동일하다. 모달의 핵심은 현재의 콘텐츠 위에 열리고, 돌아가기 위해서 닫아야 한다는 점이다. 모달이 사용되는 몇 가지 예를 보자면, 별도의 검색 결과 페이지 없이 검색 결과 항목을 보여주기, 추가적인 검색 필터 목록을 나타내는 모달 열기, 날씨 이벤트에 관련된 공지나 경고를 표시하기 등이다. 그림 6.9에서 모달이 적용된 모습을 볼 수 있다.

<< 그림 시작 >>
  모달이 아래에서 위로 올라온다
  닫기 버튼
  일출과 일몰 시간이 반복되는 컬렉션

  그림 6.9 모달이 아래에서 위로 밀려 올라오며 열리고, 앱 화면 전체를 덮어버린다
<< 그림 끝 >>

앱이 스마트폰에서 실행될 때에는 모달이 앱 전체를 덮도록 디자인되어 있다. 이보다 좀 더 큰 타블렛 장치에서 실행된다면, 전체를 덮지 못하고, 중앙에 떠있게 된다. CSS로 사이즈를 변경할 수 있으나, 모달의 기본 사이즈는 타블렛 화면 크기의 일정 퍼센트를 차지하도록 되어 있다. 이것은 중요한 점인데, 커스텀 스타일을 지정하지 않는다면, 모달 창의 사이즈는 장치에 따라 변하기 때문이다.

6.8.1 모달 설정하기
이번 예제에서 모달은 해당 지역의 일출 시간과 일몰 시간을 보여줄 것이다. 새로운 모달 인스턴스를 만들기 위해서 $ionicModal을 사용하고, 액션 시트의 세번째 버튼을 갱신해서 모달을 띄우도록 한다. 팝오버와 유사하게, 메모리 누수 방지를 위해 스코프가 소멸될 때 모달을 제거해 줘야 한다.
www/views/weather/weather.js 파일을 열고 $ionicModal 서비스를 주입하고, 다음의 코드를 삽입한다.

<< 리스트 시작 >>
  리스트 6.22 날씨뷰 안의 모달 (www/views/weather/weather.js)
  (왼쪽)
  존재하지 않는다면, 모달 템플릿을 로드라고 사용할 스코프를 할당한다
  (오른쪽)
  모달을 열기 위한 메소드
  모달이 이미 존재한다면, 다시 보여준다
  템플릿이 로드되면, 모달 인스턴스를 스코프에 저장하고
  모달을 보여준다
  모달을 숨기는 메소드
  현재 뷰가 소멸될 때, 모달도 메모리에서 제거한다
<< 리스트 끝 >>

모달 문법은 5장에서 봤던 ionPopover의 문법과 거의 유사하다. 모달은 별도의 뷰를 가지고 있는데, 이는 새로운 템플릿이 필요함을 뜻한다. 예제의 경우 템플릿을 URL을 지정해 로드했지만, 직접 인라인으로 작성할 수도 있다. 필자는 자바스크립트 안에 HTML을 작성하는 일은 피하길 권한다.
showModal() 메소드를 작성하는 것으로 시작했는데, 모달이 이미 생성되었는지 아닌지를 먼저 확인한다. 생성되었었다면 다시 보여주기만 한다. 그렇지 않은 경우, 모달을 생성한다.
모달 생성을 위한 fromTemplateUrl() 메소드는 두 개의 인자를 받는다. 템플릿 URL을 나타내는 문자열과 객체가 그것이다. 추가 옵션을 설정할 수 있는데, 창이 나타나는 애니메이션을 지정하거나 장치의 뒤로가기 버튼을 탭해서 모달창을 닫을 수 있다(안드로이드 장치에 한함). 모달은 격리된 자식 스코프를 만드는데, scope 파라미터로 모달의 부모 스코프를 지정한다. 기본값은 루트 스코프이지만, 우리는 이 모달창이 날씨 뷰 스코프에 접근할 수 있기를 원하기 때문에 날씨 뷰의 스코프를 부모로 지정했다.
템플릿을 로딩하는 과정은 비동기로 진행되기 때문에 then()으로 완료를 확인할 수 있는 프라미스 객체를 반환한다. 이 때 모달 콘트롤러 객체의 인스턴스가 전달되는데, 이것은 모달을 보여주거나 숨기는 속성을 가지고 있다.
$destroy 이벤트를 처리해서 생성했던 모달을 정리해야 한다. 그렇지 않으면 메모리에 남아있게 된다. 대부분의 아이오닉 컴포넌트는 스스로 정리할 수 있지만, 모달은 설계된 방식 때문에 그렇게 할 수 없다.

<< 상자 시작 >>
  잠재적 메모리 누수와 성능

  아이오닉과 AngularJS는 앱이 느려질 수 있는 상황을 피하고 고성능을 유지하는데 초점을 맞추고 있다. 메모리 누수는 메모리를 할당받아 브라우저에 로딩된 뭔가가 더이상 필요없게 되었을 때 적절히 정리되고 제거되지 않아 발생하는 자바스크립트의 문제이다. 요즘의 자바스크립트 엔진은 필요 없을 때 메모리를 정리하는 가비지 컬렉션을 매우 잘 수행한다.
  대부분의 아이오닉의 기능들은 필요 없을 때 쉽게 반환되도록 되어 있다. 예를 들어, 사용자가 다른 뷰로 네비게이션을 하면, 이전의 뷰를 위해 할당된 메모리는 제거된다. 또한, 아이오닉의 네비게이션은 캐시 기능을 제공해서 나중에 이전 뷰로 신속하게 돌아 오도록 메모리를 보존할 수도 있다.
  모달과 팝오버 두 개는 사용을 마쳤을 때 명시적으로 제거해줘야 하는 컴포넌트들이다. 이들은 콘트롤러에서 새로운 뷰를 생성하기 위해 사용되는 서비스들로, 만든 쪽에서 제거를 해줘야 한다. 아이오닉 입장에서는 $stateProvider에서 선언된 뷰들과는 달리, 이들이 더이상 필요없는 시점을 알지 못한다.
  모달이나 팝오버의 정리를 까먹게 된다고 해서 앱이 깨지거나 하지는 않는다. 그러나, 제거하지 않고 모달과 팝오버를 많이 사용하게 되면, 앱이 종료될 때까지 사용할 때마다 메모리에 남아있게 된다. 최선의 방법은 리스트 6.22에서 보는바와 같이 언제나 제거해주는 것이다.
<< 상자 끝 >>

모달이 제대로 나타나게 하려면 이를 위한 템플릿을 만들어 줘야 한다. www/views/weather/modal-chart.html 파일을 새로 로 만들고 다음 리스트의 내용을 추가한다.

<< 리스트 시작 >>
  리스트 6.23 모달 콘텐츠 템플릿 (www/views/weather/modal-chart.html)

  (왼쪽)
  ionModalView로 모달 템플릿을 감싸줘야 한다
  (오른쪽)
  닫기 버튼을 가지는 헤더 바 추가
  지금은 콘텐츠 영역을 비워둠
<< 리스트 끝 >>

ionModalView는 ionView의 특별한 버전으로 다른 곳에서도 사용할 예정인데, 모달 템플릿을 만들때 필요한 것이다. 모달 창을 구성하기 위해 적절히 디자인하고 위치를 잡은 후에 ionModalView로 둘러싸기만 하면 모달 템플릿이 된다.
헤더 바와 콘텐츠 영역을 추가했다. 헤더 바는 부모 스코프에 소속된 hideModal() 메소드를 호출하기 위한 닫기 버튼을 갖고 있다. 콘텐츠 영역을 채우기 위해 지금은 일출과 일몰 시간을 추가했다.

6.8.2 콜렉션 반복 : 일출과 일몰 목록을 빠르게 구성하기
1년 동안의 일출, 일몰 시간을 보여주고 싶은데, SunCalc라는 라이브러리의 도움을 빌려 계산할 수 있다. 일출, 일몰 시간은 1년 단위로 반복적으로 변하기 때문에 1년치 도표만 보여주면 된다.
긴 아이템 목록을 생성하기 위해 ngRepeat를 사용할 수 있지만, 이것은 작은 화면에서 한번에 볼 수 있는 몇 개 안되는 아이템을 위해 365개의 아이템을 만들어야 함을 의미한다. 아이템 365개를 전부 만들면, 이들이 화면에 보이냐에 관계 없이 메모리를 점유하고 렌더링을 하게 된다. 너무 많은 DOM 엘리먼트를 그려야 하는 이유 때문에 성능에 타격을 주게 되고, 결국 화면이 느려지고 스크롤이 버벅이게 된다.
이런 점을 다루기 위해 콜렉션 반복 기능을 사용할 것이다. 365개 아이템을 만드는 대신 화면에 보여주기에 충분한 수만 생성한다(그림 6.10). 사용자가 스크롤을 할 때 뷰에서 사라지는 아이템은 제거하고 새 아이템을 생성해서 목록에 추가시킨다. 이렇게 하면 메모리 관리 효율이 좋아지고, 부드러운 스크롤링이라는 중요한 경험을 제공할 수 있게 된다. 스크롤하고 싶은 거대한 데이터 셋이 있을 때 콜렉션 반복 기능은 쓸모가 있다.
콜렉션 반복을 쓸 때 주의할 점이 몇 가지 있는데, 이 때문에 여러분의 요구 조건에 들어맞지 않을 수도 있다. 예를 들어:
* 아이템 배열에 대해서만 작동하기 때문에, 객체를 가지고 콜렉션 반복을 쓸수 없다.
* 목록내 각 아이템의 높이와 너비를 저오학히 정의하지 않으면, 모든 아이템이 첫 번째 아이템과 같은 크기를 가진다고 가정한다. 모든 아이템이 같은 크기라면 높이와 너비를 선언을 하면 안되지만, 변한다면 해야 한다.
* 콘테이너의 전체 공간을 차지하게 된다.

<< 그림 시작 >>
  24 이전의 아이템은 스크롤 영역에 가까와 질 때까지 그려지지 않는다.
  화면 밖이지만 그려지는 부분
  배열내 아이템의 인덱스
  보이는 영역이자 그려지는 부분
  화면 밖이지만 그려지는 부분
  47 뒤의 아이템은 스크롤 영역에 가까와 질 때까지 그려지지 않는다.

  그림 6.10 성능을 향상 시키기 위해 콜렉션 반복 기능이 화면에 보여줘야 할 아이템과 그 주변의 아이템을 그리는 방식
<< 그림 끝 >>

* AngularJS의 원-타임 바인딩이 사용되면 안된다. 아이템이 생성되고 소멸되는 방식은 원타임 바인딩 기능과 충돌한다.
* 스타일링이 잘 작동하기 위해, 목록내 아이템을 숨기거나 보여주는 행동, 크기를 바꾸는 행위는 피해야 한다.
* 콜렉션 반복에 쓰이는 이미지는 성능 문제를 야기시킬 수 있기 때문에, 가능하다면, 미리 아이템을 캐시하거나 안쓰기를 권한다.
콜렉션 반복을 쓰기 전에, 1년간의 일출, 일몰 시간을 담은 배열을 만들어야 한다. 그러기 위해 SunCalc 라이브러리를 설치해야 한다:
$ ionic add suncalc
다음, index.html 파일을 열고 다른 라이브러리 스크립트를 로딩하는 부분 뒤에 <script> 태그를 넣어 라이브러리를 포함시킨다:
<script src="lib/suncalc/suncalc.js"></script>
마지막으로, 모달이 요청 받을 차트를 만든다. 날씨 콘트롤러의 showModal()을 수정해서, 모달을 보여주기 전에 내년에 대한 목록을 생성한다. www/views/weather/weather.js를 열고, showModal() 메소드를 다음 리스트의 내용으로 수정한다.

<< 리스트 시작 >>
  리스트 6.24 차트 생성 (www/views/weather/weather.js)
  (왼쪽)
  계산을 위한 변수들 생성
  (오른쪽)
  각각의 날에 대한 타임스탬프 지정
  날짜 목록을 스코프에 부여
  위도, 경도, 날짜를 기반으로 시간을 얻기 위해 SunCalc 사용
<< 리스트 끝 >>

내일을 시작으로 한 1년 동안의 각 날에 대한 일출, 일몰등의 시간 객체를 얻어 배열을 만들었다. SunCalc는 타임스탬프, 위도와 경도 값을 갖고 일출와 일몰 시간을 게산한다. 이 값들은 배열로 추가되고, 배열은 스코프에 저장된다. 스코프에 저장되는 이유는 모달 창이 콜렉션 반복을 위한 배열을 얻기 위해 액세스해야 하기 때문이다.
콜렉션 반복을 구현하기 위해 모달 템플릿을 다시 열어보자. www/views/weather/modal-chart.html 파일을 열고 다음 리스트의 코드로 콘텐츠 영역을 바꿔준다.

<< 리스트 시작 >>
  리스트 6.25 실제 콜렉션 반복 (www/views/weather/modal-chart.html)
  (왼쪽)
  ngRepeat과 비슷하게 콜렉션 반복을 사용
  (오른쪽)
  아이템을 포함하는 목록 사용
  아이템의 날짜, 일출, 일몰 시간을 바인딩
<< 리스트 끝 >>

콜렉션 반복은 ngRepeat와 같은 문법으로 구현된다. 도큐먼트에 나열된 좀 더 복잡한 표현식이 있긴 하지만, 기본은 item in array 이다. 아이템의 스타일을 주기 위해 리스트 컴포넌트를 사용했는데, 콜렉션 반복에 영향을 주지는 않는다. 콜렉션 반복은 각 아이템의 크기를 명시적으로 지정하지 않았다면, 오직 아이템이 같은 크기를 가지는지만 관심을 가진다. 다음으로 데이터를 date 필터를 사용하여 바인딩한다.
콜렉션 반복은 데이터 크기가 클 때 월등한 성능을 보인다. 전체 목록 대신에 화면 근처의 일부 아이템만 그리기 때문에, 메모리와 스크롤을 위한 처리를 절약한다. 콜렉션 반복 대신에 ngRepeat을 쓸 수도 있기는 한데, 디바이스 상의 성능 차이를 보게 될 것이다. 많은 장치에서 일정 수준의 버벅거림을 목격할 정도로 데이터 세트의 덩치가 크다면, 콜렉션 반복이 설능 개선을 위해 더 절실하게 다가올 것이다.
이제 마지막 기능 하나를 추가할 것이다. 사용자가 좋아하는 지역을 변경할 때, 이를 확인하거나 통지하는 팝업을 띄우는 것이다.

6.9 팝업 : 선호 지역 변경을 통지하고 확정
현재 액션시트에서 좋아하는 지역을 토글링 할 때, 무슨일이 발생했는지 사용자에게 알려주지 않고 사용자의 선택을 조용히 반영시킨다. 사용자는 변경 내용에 대해 가시적인 피드백을 받을 때 더 잘 체감하는데, 이를 위한 방법이 팝업을 사용하는 것이다. Git을 통해 따라오고 있다면, 이번 단계를 위한 코드를 체크아웃하자:
$ git checkout -f step9
팝업은 웹 사용자들에게는 친숙한데, 메세지 한 개와 버튼 한 개를 가진 창이거나 "진짜로요?"라고 뭍거나 "오류를 일으켜서 죄송합니다"를 알리기 위한 용도로 흔히 보이기 때문이다. 아이오닉은 경고(alert), 확인(confirm)과 질문(prompt)의 세 가지 팝업을 기본으로 제공하고, 입맛에 따라 디자인할 수도 있다. 경고와 확인은 그림 6.11에서 볼 수 있다. 세 가지는 각각 고유의 용도를 가지고 있다:
* 경고는 단순히 정보를 전달하기 위한 것이다. 예) 성공이나 실패를 알리는 메세지.
* 확인은 사용자에게 사용자가 의미했던 행동이 맞는지 확인하기 위한 것이다. 예) 아이템을 삭제할 것인지 물어보는 창.
* 질문은 사용자에게 어떤 정보 입력을 요청하기 위한 것이다. 예) 저장할 때 제목을 지정하는 창.
사용자에게 피드백을 제공하기 위해 인터페이스를 설계하는 방법은 많은데, 사용자가 메세지를 읽었는지를 확실히 하고 싶거나 작업을 속행하기 전에 피드백을 받을 필요가 있을 때가 팝업을 사용할 최적의 경우이다. 그러나, 팝업은 사용자의 흐름을 끊을 수 있기 때문에 신중히 사용해야 한다.
팝업을 적용하기 위해, Locations 서비스의 토글 메소드에 추가할 것이다. 선호 지역을 삭제려고 할 때 사용자의 확인을 받고, 추가가 되었을 때 알려주려고 한다. 지금은 사용자가 선호 지역을 토글하면 백그라운드에서 완료는 되지만, 사용자는 어떤 피드백이나 료되었다는 확인을 받지 못하고 있는 상태다.

<< 그림 시작 >>
  선호 지역을 추가했을 때 경고 팝업이 나타남
  선호 지역에서 제거하려고 할 때, 확인을 위한 팝업이 나타남

  그리 6.11 앱에 사용된 경고(alert)와 확인(confirm) 팝업
<< 그림 끝 >>

www/js/app.js 파일을 열고 Location 서비스 위치로 이동하자. $ionicPopup 서비스를 주입한다:

.factory('Locations', function ($ionicPopup) {

이제 원래의 toggle() 메소드를 경고와 확인 팝업을 추가하기 위한 내용으로 수정한다.

<< 리스트 시작 >>
  리스트 6.26 경고와 확인을 위해 $ionicPopup 사용 (www/js/app.js)

  (왼쪽)
  팝업의 제목과 내용 지정
  (오른쪽)
  확인 팝업을 만들고, 이를 정의하기 위한 객체를 전달. 기본값은 OK와 Cancel 버튼을 가짐
  버튼이 선택되면 함수가 호출되고, 사용자가 아이템을 삭제하기 위해 OK를 눌렀다면 res는 true 값을 가짐
  제목을 지정하고 경고 팝업을 생성. 기본값은 OK 버튼만 있음
<< 리스트 끝 >>
확인 팝업은 사용자가 아이템 삭제를 원하는지 확인하기 위해 사용되었는데, 별도의 설정 객체를 재정의 하지 않는다면, OK와 Cancel 버튼 두 개만 가지게 된다. 버튼이 선택되면, 프라미스 객체가 resolve()를 호출하고, 불리언 형식의 res 값이 전달된다. 사용자가 OK를 선택했다면, res는 true가 될 것이고, 이렇게 되면 아이템 삭제 처리를 진행해도 될 것이다.
경고 팝업은 아이템이 이미 추가된 후에 뜨게 되는데, 사용자가 선택한 지역이 저장되었다는 사실을 알려주기만 할 뿐이다. 버튼은 팝업을 자동으로 닫아줄 것이다.
여기에 사용되지 않은 팝업 옵션이 많이 있는데, 도큐먼트를 읽어 보는게 유용할 것이다. 예컨대, OK와 Cancel 버튼의 텍스트를 바꿀 수 있고, 버튼 색깔의 스타일을 변경한다거나, 버튼과 속성을 전부 입맛대로 정의한 복잡한 팝업을 만들수도 있다.
이 기능을 끝으로 앱에 넣으려는 기능은 끝이 났다. 이 장을 끝내기 전에, 이전 장들로부터 배웠던 지식을 활용해서 이번에 만든 앱을 개선하기 위한 도전을 해보길 바란다.

6.10 도전 주제들
이번 장은 남아 있는 주요 아이오닉 컴포넌트들을 다루었다. 이제 만들어 보면서 익혔으니, 이전 장에서 배운 기능들을 추가해서 날씨 앱을 확장시켜보기 바란다.
* 일기 예보를 재로딩하기 위한 방법 추가 - 현재의 날씨는 뷰가 로딩될 때 한번 불러온다. ionRefresh를 사용하거나, 여러분만의 방식을 사용해서 뷰를 떠나지 않고 일기 예보를 다시 불러올 수 있다.
* 로딩 컴포넌트 구현 - 날씨 뷰와 검색 뷰는 API를 통해 데이털르 불러오는데, 이 와중에도 사용자는 화면 조작을 할 수 있다. 사용자 인터페이스가 데이터를 기다리고 있음을 알려주기 위해 로딩 컴포넌트를 적용해보라.
* 지역 재배열 - 설정 뷰에서 지역 삭제는 할 수 있지만, ionList 재배열 기능을 사용해서 지역을 재정렬하는 기능을 구현해보자.
* 주요 지역을 기본 뷰로 설정 - 지금은 기본 뷰가 검색 뷰이지만, 이미 저장된 지역이 있다면, 그 지역의 뷰를 보여주는 것이 더 좋을 것이다.
* 선호 지역과 설정 내용을 영속적으로 유지 - 지금까지는 앱이 처음 로딩될 때마다 설정 값과 선호 지역이 초기화 된다. 7장에서 영속성 구현 방법을 알아보고, 설정값과 선호 지역을 지속적으로 기억함으로써 사용성을 높여보자.

6.11 요약
세 개의 장을 통해서 대부분의 아이오닉 컴포넌트와 기능을 다루었다. 이번 장은 특히 다음과 같은 것을 배웠다.
* 네비게이션 베이스로써 사이드 메뉴를 구성하고 사용하는 법
* ionScroll을 상요해서 커스텀 스크롤 페이지 만들기
* 현재 뷰의 맥락에서 사용자의 선택 가능한 옵션을 보여주기 위한 액션 시트
* 현재 뷰를 없애지 않고 관련도니 정보를 보여줄 수 있는 모달 생성
* ngRepeat 대신 콜렉션 반복을 사용해서 성능 향상시키기
* 사용자에게 피드백을 주고, 그들의 행동을 확인 받기 위한 팝업 추가하기
다음 장에서는 아이오닉 앱 제작을 위한 고급 주제들을 배울 것이다. 오프라인 모드로 동작하기, 데이터 정렬, 아이오닉 기본 설정과 스타일을 커스터마이징하기 같은 것들이다.
