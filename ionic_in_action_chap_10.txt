10. 앱 빌드와 배포

<< 글 상자 시작 >>
  이 장에서 다룰 내용
  * 앱을 위한 아이콘과 스플래쉬 화면 생성하기
  * 제품 출시를 위한 준비와 빌드
  * 구글 플레이에 배포하기 - 서브미션 프로세스
  * 애플 앱스토어에 배포하기 - 서브미션 프로세스
<< 글 상자 끝 >>

이제 거의 끝나간다! 지금쯤이면 여러분이 모바일 앱을 제작할 기술은 갖췄겠지만, 끝까지 완주하려면 앱 스토어에 서브밋하는 방법을 알아야 한다. 이 중요한 단계는 아이콘과 로딩 화면 그래픽을 제작하고 앱 설명을 삽입하는 작업도 포함한다.
앱 스토어는 애플과 구글이 강하게 콘트롤하는 생태계(ecosystems)이다. 그들은 허용되는 것과 그렇지 않은 것에 대한 기준을 정하는데, 이 규칙은 자주 바뀌기도 한다. 구글은 새로운 앱을 수 시간에서 몇 일 안으로 스토어에 등록시킨다. 애플은 그들의 승인 프로세스상 검수하고 출시하는데까지 보통 몇 일에서 몇 주까지 걸린다.
이번 장에서는 필자가 만든 앱(이른바 'Know Your Brew'라는)을 서브미션하는 과정을 스크린샷으로 볼 것이다. 본인은 수제 맥주 제조에 심취해 있는 맥주 감별사이기도 하기에, 여러 유형의 맥주에 대한 정보를 주는 앱을 갖고 싶었다. 일반적인 프로세스는 여러분의 앱에 대해서도 동일하다. 이번 장은 예제 코드가 없다. 이번 단계는 앱을 제출할 준비가 되었을 때를 위한 것으로, 앱을 출시할 준비가 되었을 때 이 장이 길잡이가 될 것이다.
이 장에서 다룰 수 없는 조건이나 상황이 몇 가지 있다. 예컨대, 앱을 유료로 팔거나 앱내 구매(in-app purchase) 모델을 가지고 있다면, 여러분의 애플, 구글 계정이 지불을 처리할 수 있도록 적절히 설정이 되어 있음을 확인할 필요가 있다. 이 장 내용의 간결성과 집중을 위해서, 어떤 특별한 조건이 없는 무료 앱을 업로드 하는 방법을 다루려고 한다. iOS의 전체 상세를 원한다면 http://mng.bz/z1VP를 방문하고, 안드로이드의 경우에는 http://mng.bz/Jzv1을 참고하자.

10.1 제품화 하기 : 요약
깊이 들어가기 전에 지금까지 우리가 진행해온 개발 프로세스를 조망해보고, 앱 개발을 완료해서 스토어에 출시하려면 어떤 일들이 남아있는지 살펴보자. 그림 10.1은 지금까지 한 것과 앞으로 배워야할 작업에 대해 소개하고 있다.

<< 그림 시작 >>
  개발 프로세스
  (윗줄 4개의 글상자)
  착수 -> 개발 -> 테스트와 디버깅 -> 출시 준비
  (아랫줄 왼쪽 3개의 글상자)
  브라우저에서 미리보기, 에뮬레이터에서 미리보기, 장치에서 미리보기
  (아랫줄 오른쪽 3개의 글상자)
  아이콘 생성, 스플래쉬 화면 제작, 개발 코드 제거

  그림 10.1 앱 개발을 위해 진행해온 단계와 출시 준비해야 할 작업
<< 그림 끝 >>

앞으로 아이콘과 스플래쉬 화면 이미지를 만드는 방법, 출시 전 여러분의 앱에 있는 개발 코드를 제거하는 법을 배울 것이다. 그 다음 그림 10.2에 나타난 것처럼 안드로이드와 iOS 스토어로 등록하기 위해 빌드하고 출시하는 단계를 알아볼 것이다.
각 단계를 자세히 다룰 것이지만, 이는 각 플랫폼별 일반적인 흐름이다. 두 플랫폼은 기본적으로 같은 과정을 가지지만, 일부 다른 점도 있다.
안드로이드의 경우 명령행 접근 방식을 사용하고, iOS는 Xcode IDE를 사용할 것이다. 이는 필자가 선호하는 방법이며, 여러분은 이와 반대로 iOS에 대해 명령줄로 빌드하고, 안드로이드를 안드로이드 스튜디오 IDE를 사용해도 무방하다.

<< 그림 시작 >>
  안드로이드용 빌드와 배포
  키스토어 설정 - 앱 파일 빌드 -> 앱 파일 사인 -> 앱 파일 최적화 -> 구글 플레이에서 목록 생성 -> 앱 파일 업로드 -> 검수를 위해 제출
  iOS용 빌드와 배포
  서명 ID 설정 -> app ID 설정 -> iTunes 커넥트에서 목록 생성 -> 빌드와 업로드 -> 검수를 위해 제출

  그림 10.2 안드로이드와 iOS에서 앱을 빌드하고 배포하는 단계
<< 그림 끝 >>

두 플랫폼 모두 일반적인 단계가 있다.
  * 앱에 사인하기 위한 메카니즘이 필요하다. 안드로이드의 경우 키스토어로 이를 수행하고, iOS의 경우 서명 ID라는 것이 있다. 결국에는 둘 다 같은 일을 수행한다. 이후에 개발자를 확인하는데 사용되는 서명을 빌드된 파일에 추가한다.
  * 두 플랫폼 모두 스토어에 목록을 생성해야 한다. 이미 스크린샷 이미지, 설명 텍스트 등의 마케팅 자료를 생성해 놓았다고 가정하면 목록을 생성하기가 더 쉬울 것이다. 훌륭한 마케팅 요소와 앱 설명을 가지는 것은 유저들이 그 앱이 필요한 것인지를 결정하는데 있어 핵심적인 사항이다.
  * 두 플랫폼 모두 빌드하고 빌드된 파일을 최적화 해야 한다. 안드로이드의 경우 구글 플레이 개발자 페이지를 통해서 빌드 파일을 업로드하고, iOS는 Xcode로 연결해서 여러분의 계정으로 파일을 업로드 한다.
일단 지금은 두 플랫폼 모두 매우 유사한 과정을 갖고 있되, 각각 수행하는 방식이 미묘하게 다르 다 정도만 이해하고 좀 더 깊이 파고 들어가보자.

10.2 아이콘과 스플래쉬 화면 에셋 만들기
해를 거듭할 수록 핸드폰이 발전해 오면서, 그래픽 이미지 품질도 함께 향상될 필요가 있었다. 이를 수용하기 위해 두 플랫폼 모두 앱이 많은 다른 화면 크기와 해상도에 맞출수 있도록 여러가지 다른 크기의 아이콘과 로딩 스플래쉬 화면을 제공하기를 요구한다.
예를 들어, 아이폰6는 아이폰5보다 화면이 크기 때문에 앱은 양쪽 사이즈에 모두 맞는 로딩 스플래시 화면 이미지를 제공해야 한다. 안드로이드 장치도 물론 이 문제를 갖고 있는데, 안드로이드는 폰 제작사들의 저마다 다른 디자인 때문에 크기와 해상도에 관한 파편화 문제가 훨씬 심하다. 이 다른 상황을 위한 이미지를 만들려면 수십장을 만들어야 한다. 또한, 폰의 기울임에 따른 세로형과 가로형 버전까지 고려해야 한다.
이 많은 이미지를 수동으로 만드는 것은 꽤나 고통스러운 일이기 때문에, 아이오닉은 하나의 아이콘과 한 개의 스플래쉬 화면 이미지를 받아 앱이 충족시켜야 하는 여러가지 크기의 이미지를 생성해 주는 기능을 구현했다. 또한 cordova.xml 파일에 이미지를 등록까지 해줘서, 앱으로 빌드되었을 때 이미지들이 올바로 링크되도록 한다.
아이오닉은 원격 서비스를 이용해서 파일을 변환할 수 있기 때문에, 이미지 변환 처리를 위해 아이오닉 서버로 이미지를 업로드 할 것이다. 이는 아이오닉 CLI외에 별도로 필요한 도구가 없다는 뜻이다. PNG, PSD(포토샵)과 AI(일러스트레이터)형식을 지원한다.

10.2.1 주 아이콘 만들기
시작하려면, 아이콘 그래픽을 하나 만들어서 아이오닉이 이를 가지고 나머지 사이즈를 생성할 수 있게 해야 한다. 아이오닉은 최소 192 픽셀은 넘고 두근 모서리가 없는 정사각형 아이콘을 만들도록 요구하고 있다. 필자는 최소 1024 픽셀 이상의 아이콘을 만들어 아이콘의 품질을 높게 유지하길 권한다. 아이콘은 플랫폼에 따라 조금씩 다르게 수정된다. 예를들어, iOS는 둥근 모서리가 추가된다. 아이오닉은 포토샵 템플릿이 있는데, http://mng.bz/2ow0에서 다운로드 받아 아이콘 디자인을 위해 사용할 수 있다.
여러분이 꼭 알아야 하는, 아이콘 디자인을 위해 고려할 점이 몇 가지 있다. 안드로이드와 iOS는 고품질의 아이콘을 디자인하기 위해 멋진 도큐먼트를 상세하게 제공하고 있다. iOS 가이드라인은 http://mng.bz/B3DO에, 안드로이드는 http://mng.bz/N957에 있다. 우선 고려해야 할 몇 가지 사항은:
  * 심플하게. 아이콘은 크지 않다. 보기 쉬워야 한다.
  * 기억하기 쉽게. 아이콘은 여러분의 앱과 브랜드를 고유하게 표현하는 뭔가이어야 한다.
  * 크건 작건 보기 좋게. 줌 아웃해서 작아졌을 때에도 여전히 보기 좋은지 확인하는 것을 잊지 말아야 한다.
  * 색은 단순하게. 많은 색을 쓰거나 조화롭지 않은 색을 피하라.

이제 아이콘을 지원되는 포맷으로 만들었다면, 표 10.1에 표시된 위치로 저장한다. 아이오닉이 플랫폼에 특화된 아이콘을 찾았다면 그것을 사용하고, 그렇지 않은 경우에는 기본 아이콘을 사용할 것이다.

<< 표 시작 >>
  표 10.1 아이콘 소스 이미지를 저장할 경로
  대상 플랫폼
  파일 경로
<< 표 끝 >>

아이콘을 만들고 싶을때는 언제나 다음의 CLI 명령을 수행하기만 하면된다:

$ ionic resource --icon

파일이 아이오닉 서버로 업로드 되고, 변환되고, 프로젝트 디렉토리로 다운로드 되기까지는 약간 시간이 소요된다. 완료되면 생성된 아이콘들을 검사해서 여러 다른 사이즈에서 원하는대로 보이는지 확인해야 한다.

10.2.2 스플래쉬 화면 이미지 생성
스플래쉬 화면 생성 작업도 아이콘과 매우 유사하지만, 디자인 적인 복잡도가 좀 더 높다. 아이콘은 리사이즈가 다지만, 스플래쉬 화면은 다른 해상도와 기울임을 위해 리사이즈와 크롭을 수행한다. 그림 10.3을 보면 스플래쉬 화면 소스로부터 어떻게 사이즈 변형과 크롭이 일어나는지 볼 수 있다. 포토샵이 있다면 http://mng.bz/2ow0에서 스플래쉬 화면 템플릿을 사용해서 적절한 디자인을 하는데 도움을 받을 수 있다.
스플래쉬 화면 소스는 최소한 2208 x 2208 픽셀 이상은 되어야 한다. 그러나 사각형의 중앙 부분만 디자인을 한다면 1200 X 1200 픽셀까지는 괜찮다. 통상적으로 안쪽의 정사각형은 배경색 위에 브랜딩 로고를 포함한다. iOS와 안드로이드는 스플래쉬 화면을 위한 명확한 가이드라인이 없기 때문에, 무엇이 사용자에게 최고의 경험을 제공할 것인지 심사숙고해야 한다.

<< 그림 시작 >>
  각기 다른 화면 사이즈의 외곽선
  모든 디스플레이의 공통된 공간

  그림 10.3 다른 해상도로 인해 스플래쉬 화면 이미지가 크롭되는 방법. 세로형, 가로형 모드, iOS와 안드로이드 장치에 따라 다른 사이즈
<< 그림 끝 >>

스플래쉬 화면 그래픽을 만들고 나서는 표 10.2에 표시된 위치로 저장해야 한다. 아이오닉이 플랫폼에 특화된 스플래쉬 화면 이미지를 찾으면 이를 사용하고, 그렇지 않으면 기본 값을 사용한다.

<< 표 시작 >>
  표 10.2 스플래쉬 화면 소스 이미지를 저장할 경로
  대상 플랫폼
  파일 경로
<< 표 끝 >>

스플래쉬 화면 이미지 생성을 위해서 다음 명령을 실행한다:

$ ionic resources --splash

아이콘과 마찬가지로, 이미지가 아이오닉 서버로 업로드 되어 처리되기 때문에, 개발 머신에 별도의 소프트웨어 설치가 필요할까 고민할 필요가 ㅇ벗다.
아이콘과 스플래쉬 화면을 한방에 만들고 싶다면, 다음 명령을 그냥 실행하면 된다:

$ ionic resources

이제 아이콘과 스플래쉬 화면이 준비되었으니, 앱 제품 출시를 준비해야 할 때다.

10.3 앱 제품 출시 준비
앱에 불필요한 게 없다는 것을 확인하기 위해 체크해야 할 게 몇 가지 있는데, 이를 통해 속도와 안정성을 높이고 앱 파일의 크기를 줄인다. 이 때 자동화된 테스트를 수행하면, 이 작업을 수행해도 애플리케이션은 여전히 기대하는 대로 동작함을 보증할 수 있다.
출시 전에 해야할 작업은 다음과 같다:
  * 코르도바 콘솔 플러그인을 제거한다. 이 플러그인은 여러분이 앱을 디버깅할 수 있도록 돕는 플러그인인데, 출시 버전에는 탑재될 필요가 없다. cordova plugin rm org.apache.cordova.console을 실행해서 제거한다.
  * 불필요한 파일을 제거한다. 앱 개발 중에 서드파티 라이브러리를 설치하거나 결국에는 안 쓰는 뷰를 만들었을 수 있다. 파일 용량을 줄이기 위해 지우자.
  * 사용되지 않는 라이브러리 파일을 지운다. 아이오닉은 www/lib 디렉토리에 Bower로 파일을 설치했고, 이 라이브러리 파일들은 소스도 포함하고 있다. 사용하지 않는 파일은 지워야 한다.
  * 코드를 압축한다. 여러분의 코드를 자바스크립트 압축 시스템에 돌려 파일 실행을 최적화하고 크기를 줄일 수 있다.
  * 그래픽을 압축한다. 이미지는 종종 파일의 크기를 증가시키는 주범이다. 파일을 압축해서 필요이상으로 커지지 않도록 하자.

여기의 핵심 가정은 앱을 퍼뜨리기 위해 모든 준비가 끝났다는 것이다. 그 예로, 앱에 나타나는 디버깅 코드를 없앤 것이다. 개발을 진행하는 중에 깔끔하게 프로젝트를 유지할수록, 이 작업을 완료하기가 수월해 진다.

10.4 안드로이드 앱을 빌드하고 구글 플레이로 배포하기
이제 여러분의 앱은 제품화 할 준비가 되었고, 안드로이드 빌드를 만들기 위한 몇 가지 단계를 앞두고 있다. 코르도바로 앱을 빌드하고, 소스 인증을 위해 엡에 서명을 해야 하고 앱 최적화를 해야 한다. 안드로이드에서는 이 모든 작업을 위해 명령줄을 사용할 것이지만, http://mng.bz/T7G4에서 안드로이드 스튜디오를 쓰는 법을 읽고 해도 된다. 그림 10.4에 나타낸 단계를 위해 명령줄을 사용할 것인데, 안드로이드는 이 편이 더 단순하다.

<< 그림 시작 >>
  안드로이드용 빌드와 배포
  키스토어 설정 - 앱 파일 빌드 -> 앱 파일 사인 -> 앱 파일 최적화 -> 구글 플레이에서 목록 생성 -> 앱 파일 업로드 -> 검수를 위해 제출

  그림 10.4 안드로이드 빌드와 배포 단계 복습
<< 그림 끝 >>

구글 플레이 스토어는 안드로이드용 앱을 출시할 주된 장소이다. 구글 계정을 만들거나, 이미 있는 계정을 플레이 스토어 개발자 콘솔과 연결해야 한다. 그러면, 제목, 설명, 이미지, 기타 앱을 분류하고 나열하는데 사용될 상세 정보들을 포함시켜 앱 목록을 만들수 있게된다. 여기까지 완료하면, 생성한 안드로이드 앱 APK 파일을 업로드하고, 검수를 위해 제출한다.

10.4.1 앱 서명을 위해 설정하기
키스토어를 설정하는 것으로 시작한다. 키스토어는 나중에 앱에 서명을 추가할 때 사용할 보안 키를 암호화해서 저장한 파일이다. 이 서명으로 앱 제작자는 승인을 받을 수 있다. 사이닝에 대해 더 알아보려면 http://mng.bz/T7G4를 읽어보자.
새 키스토어를 생성하기 위해 keytool이라는 명령줄 도구를 사용할 것이다. 이것은 10,000일 동안 유요한 키스토어를 생성한다. 이 정도면 앱 생명 주기를 충분히 커버하고도 남는다(기간을 더 줄이려고 하면 안된다. 그렇게하면 만료된다!). 다음 명령의 know_your_brew 부분을 여러분 앱의 이름으로 대체한다:

$ keytool -genkey -v -keystore know_your_brew.keystore -alias know_your_brew -keyalg RSA -keysize 2048 -validity 10000

이 명령으로 know_your_brew.keystore라는 파일이 새로 생성되는데, 컴퓨터 어디든 위치시키면 된다. 나중에 파일의 위치는 기억해야 하기 때문에, 접근 할 수 있는 곳에 두도록 하자.
앞으로 이 앱에는 같은 키스토어를 계속 재사용할 것이므로, 앱을 지원하는 동안에는 보존해야 한다. 안전하고 비밀스러운 공간에 둘 필요가 있는데, 좋지 않은 목적을 가진 타인에 의해 사용될 수 있기 때문이다. 앱의 모든 버전은 같은 키스토어로 서명되어야 하는데, 그렇지 않은 경우 업데이트가 반려된다. 팀에서 앱을 서명해야 한다면, 누가 앱을 빌드했느냐에 관계 없이 같은 키스토어가 사용되어야 한다. 한편, 개발하는 앱에 따라 다른 키스토어를 생성해야 한다.

10.4.2 출시용 앱 파일 빌드하기
다음 단계는 코르도바로 앱을 빌드하는 것이다. 다음의 build 명령은 출시 준비된(release-ready) 버전을 빌드할 것이다:

$ cordova build --release android

새로운 APK 파일이 생성될 것인데, 이것이 안드로이드 앱 파일이며 platform/android/ant-build/CordovaApp-release-unsigned.apk로 생성된다. 위 명령은 화면에 정확한 APK 파일 경로를 보여줄 것이다. 이 파일은 아직 서명되지 않은, 출시 직전의 버전이다.

10.4.3 APK 파일 서명하기
이제 방금 만든 서명되지 않은 버전의 APK 파일을 서명하기 위해 앞서 만들었던 키스토어를 사용할 준비가 되었다. 안드로이드는 이 작업을 도와줄 도구로 jarsigner를 사용한다.
앞서 진행한 두 단계에서 나온 서명되지 않은 APK 파일과 키스토어 파일의 경로를 모두 알아야 한다. 필자는 같은 디렉토리로 모아두길 추천하는데, 이렇게 하면 명령을 타이핑 하기가 좀 더 쉽다. 아래 명령에서 know_your_brew를 키스토어 발급때 사용했던 것과 같은 값으로 대체하고, CordovaApp-release-unsigned.apk도 앱 이름으로 수정한다:

$ jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore know_your_brew.keystore CordovaApp-release-unsigned.apk know_your_brew

이 작업은 시간이 좀 걸리는데, 키스토어와 키를 위한 패스워드를 설정하라고 뜰 것이다. 이 작업으로 APK 파일은 수정된다. 이제 앱이 제대로 서명되었는지 jarsigner를 다시 사용해서 확인할 수 있다.

$ jarsigner -verify -verbose -certs CordovaApp-release-unsigned.apk

서명 중 오류가 생겼다면, 코르도바로 앱을 리빌드하고 다시 시도해 본다.

10.4.4 APK 최적화
마지막 단계는 APK 파일을 최적화 해서 공간을 줄이고, 장치에서 앱이 요구하는 RAM을 줄이는 것이다. zipalign이 이 작업을 위한 도구이다. 서명된 APK 파일을 받은 후 업로드에 사용할 수 있는 최적화된 APK 버전을 새로 만든다. zipalign은 운영체제 프로세스가 최적으로 읽을 수 있도록 패키지내 바이트를 최적화한다. 기술적 상세 내용은 http://mng.bz/vWfu를 참고하자.
zipalign 도구는 서명된 파일의 이름과 생성할 파일의 이름을 인자로 받는다. KnowYourBrew.apk를 여러분 앱의 이름으로 바꾸자:

$ zipalign -v 4 CordovaApp-release-unsigned.apk KnowYourBrew.apk

새 파일이 생성되면, 안드로이드 스토어로 제출할 수 있는 안드로이드 앱 최종 버전을 얻은 것이다. 최초 빌드 작업은 마쳤으니, 앱을 업데이트 하는 방법을 빨리 알아보자.

10.4.5 앱의 업데이트 버전 빌드하기
거의 백프로의 확률로 새 기능을 추가하거나 버그가 수정되는 등의 이슈로 앱을 업데이트 할 일이 발생한다. 존재하던 앱의 업데이트 버전을 빌드하는 프로세스는 앞서 출시 버전을 빌드하던 것과 동일하지만, 키스토어를 추가로 발급할 필요가 없다는 점이 차이점이다. 몇 가지 상세는 강조할만 하다.
  * 모든 업데이트 때마다 앱에 서명할 때는 동일한 키스토어를 사용해야 한다. 그렇지 않으면, 업데이트가 같은 서명을 갖고 있지 않다는 사유료 반려되고, 신규 앱 리스트를 만들어야 한다.
  * 차기 버전 출시때는 프로젝트의 config.xml의 버전 넘버와 빌드 넘버를 갱신해야 한다. 이 숫자가 바뀌지 않으면 앱이 장치에 제대로 업데이트 되지 않을 것이다.
  * 자주 빌드를 한다면, 자동화 될 수 있도록 쉘 스크립트를 만들어서 작업을 향상시킬 수 있다.

<< 글상자 시작 >>
  빌드 트러블슈팅

  빌드 중에는 여러가지 문제가 발생할 수 있는데, 전형적인 것으로 도구들이 시스템 패스에 있지 않아 발생하는 문제가 있다. 실행중에 문제가 발생했다면 여기 나열한 몇 가지 팁을 확인해보길 바란다.
  자바와 앤트는 꼭 설치되어야 하고, 시스템 패스에 있어야 한다. 안드로이드는 Gradle을 적용하기 전까지는 내부 빌드 프로세스를 위해 앤틀르 사용했고, 코르도바 엣 버전도 앤트를 사용했다.
  android, keystore, jarsigner 명령은 SDK가 시스템 페스에 추가되어 있지 않다면 작동하지 않을 것이다.
  zipalign 도구는 안드로이드 도구가 틀린 디렉토리로 빌드해서 위치시키는 바람에 안될수도 있다. 이 문제를 해결하려면 zipalign 파일을 컴퓨터에서 검색해서, 그 경로가 시스템 패스내에 있는지 검증해야 한다.
<< 글상자 끝 >>

10.4.6 앱 리스트 생성, 플레이 스토어에 업로드
우선 플레의 스토어의 개발자 콘솔에 접속할 수 있게 해야 한다. 구글 계정이 필요하다. 개인 계정과는 별도로 앱 관리를 위한 구글 계정을 별도로 생성하기를 추천한다. 이러면 개인 계정(또는 이름)이 앱에 묶이게 되는 문제를 피할 수 있다. 구글 계정은 https://play.google.com/apps/publish/signup/에서 만들 수 있다.
여러분의 계정을 개발자 계정으로 업데이트 하려면 US $25를 한번 지불해야 한다. 또한 등록과정에서 약관에 동의해야 한다. 계속 진행하려면 계정 등록 과정과 지불을 완료해야 한다.
개발자 계정으로 로그인하면, 리스트 생성 프로세스를 시작할 수 있다. 구글 플레이 배포 프로세스에 대한 대부분의 최신 정보는 http://mng.bz/6ZDC에서 알아보자.
리스트 생성 프로세스 중에는, 앱 이름과 기본 언어, 설명, 제목, 스크린샷, 기타 메타 정보를 제공해야 한다. 구글 플레이는 몇 가지 스크린샷, 아이콘, 특징을 보여주는 그래픽 이미지도 요구한다. 좋아하는 이미지 편집 프로그램을 사용해서 적절하게 이미지를 디자인하고 사이즈를 조정할 필요가 있다.
전체 리스트를 만들었다면, 앱 APK 파일을 올릴 수 있다. 구글 플레이는 앱에 사용할 수 있는 버전으로 알파, 베타, 그리고 production 세 가지가 있다. 알파와 베타 버전은 공개된 플레이 스토어로 가기 전에 업데이트 푸쉬를 하고 피드백을 받으 ㄹ수 있다(역주: 이 문장 검토해야 함). 알파로 시작하고, 베타로 옮기면서, 종국에 production으로 이동해 가는 것은 좋은 방법이다. 알파, 베타 테스트는 열혈 추종자나 여러분을 도우려는 의도를 가진 유저를 얻기 전까지는 그다지 유용하지 않을 수 있다. 그러나, 여러분이 베타 버전의 유일한 멤버가 된다면, production 으로 옮기기 전에 플레이 스토어에서 제대로 업데이트가 되었는지 테스트 해볼 수 있다. 상세 내용은 http://mng.bz/s6s8에서 참고할 수 있다.
물론, production 모드로 바로 APK 파일을 업로드할 수 있다. 이는 플레이 스토어에서 앱을 라이브시킬 수 있다는 의미로, 누구나 찾아서 알파, 베타의 사전 동의를 얻는 프로세스 없이 다운로드 받을 수 있게 된다.
리스트의 내용을 채우고 APK 파일을 업로드 했다면, 배포할 준비가 된 것이다. 앱을 제출하면, 앱이 스토어 가이드라인에 위배되는 내용이 없는지 검증하는 자동화, 수동화된 리뷰 과정을 거치게 된다. 몇 시간 단위에서 일 단위가 걸릴 수 있지만, 어떤 이유로 반려가 된다면, 여러분에게 통지될 것이다. 구글 플레이의 정책과 충돌이 발생했다면, 공지를 받아 문제를 해결하고 다시 제출하게 된다.

10.4.7 앱 리스트 업데이트, 새 버전 업로드
새로운 APK 파일을 제출하지 않고도 설명과 같은 리스트의 디테일은 수정할 수 있다. 예를 들어, 설명 내용 중 오자를 발견했다고 해서 APK를 업데이트 하지 않아도 된다는 말이다.
APK 파일을 업데이트 할 때, 빌드본 안의 앱 버전 코드(버전 넘버와는 다르다)를 업데이트 해야한다. 코르도바는 안드로이드 플랫폼을을 추가할 때 config.xml 안에 버전 넘버에 기반한 값을 생성한다. 이 값은 (별도로 생성 식을 선언하지 않는다면)PATCH + MINOR * 100 + MAJOR * 10000의 식으로 생성된다. 예컨대, 버전이 2.3.6(MAJOR.MINOR.PATCH)인 경우 6 + 3 * 100 + 2 * 10000 = 20306이 된다. 갱신된 버전 코드를 가지는 APK 파일을 업로드하면 사용자에게 업데이트하라는 트리거가 발생된다. 버전 넘버는 그냥 스토어에서 유저들이 볼 수 있는 값일 뿐이다. 버저닝에 대한 전체 내용은 http://mng.bz/0C05을 보자.
앱을 업데이트 한다거나 메타 데이터를 수정하는 것과 같은 어떤 변경이든 플레이 스토어에서 통상 수 시간내에 적용된다. 변경 상태는 개발자 콘솔에서 볼 수 있으므로, 업데이트 대기 중인지 완료되었는지 확인할 필요가 있다.

10.4.8 다른 안드로이드 스토어 이용하기
아마존 앱스토어와 같은 다른 안드로이드 스토어도 존재하는데, 어떤 스토어를 사용하던 프로세스는 동일하다. 스토어 별로 추가해야 하는 기준이나 가이드라인이 다를 수는 있다.
그러나 다른 스토어는 기본적으로 구글 플레이 스토어처럼 신뢰받은 상태는 아니다. 안드로이드 기기의 Settings > Security > Unknown Sources로 가서 구글 플레이 스토어 외에서도 설치를 할 수 있도록 활성화 시켜야 한다. 이 점이 바로 다른 스토어와 비교할 때 구글 플레이 스토어가 가지는 핵심 우위이다.

10.5 iOS앱을 빌드하고 앱스토어에 배포하기
iOS를 빌드하려면 맥 장비와 Xcode가 필요하고, iOS 개발로 설정된 애플 개발자 계정을 가지고 있어야 한다.

<< 글상자 시작 >>
  맥 없이 iOS를 빌드하고 싶은가?

  아이오닉과 다른 서비스는 그들의 플랫폼을 통해 앱을 빌드할 수 있는 기능을 가지고 있다. 그들의 서버로 프로젝트를 업로드하면 서브미션 준비가 된 빌드된 파일을 얻을 수 있다. 아이오닉은 이 기능을 발전시키고 있는데, 상세 내용은 https://ionic.io에서 확인하자.
  여기서는 다루지 않지만, 유닉스 계통의 환경에서 CLI 도구로 빌드하고 서명할 수도 있다. 이 도구는 리눅스나 맥과 같은 유닉스 계역 시스템에서 실행된다. 애플 사이트 http://mng.bz/XpsA에서 해당 도구에 대한 더 많은 정보를 살펴보라.
<< 글상자 끝 >>

애플은 아이튠즈 커넥트를 사용해서 앱스토어에 리스트를 생성하고 앱을 관리한다. 아이튠즈 커넥트로 앱 리스트를 추가하고, 스크린샷과 메타 정보와 같은 정보를 채우고, Xcode를 연결해서 빌드하고 앱을 업로드하고, 검수를 위해 제출한다(그림 10.5).

<< 그림 시작 >>
  iOS용 빌드와 배포
  서명 ID 설정 -> app ID 설정 -> iTunes 커넥트에서 목록 생성 -> 빌드와 업로드 -> 검수를 위해 제출

  그림 10.2 iOS에서 앱을 빌드하고 배포하는 단계
<< 그림 끝 >>

아직 애플 개발자 계정을 만들지 않았다면, iOS 개발자 프로그램에 등록하고 이것부터 해야 한다. https://developer.apple.com/programs/로 가서 가입한다. iOS 개발자 프로그램의 일원이 되려면 1년에 US $99를 지불해야 한다. 이미 개인 애플 계정이 있다면, 앱 등록을 위한 새 계정을 설정한다.

10.5.1 인증서와 ID 설정
계정을 만들었으면, Xcode를 열고 설정으로 이동한다. Xcode에 계정을 아직 추가하지 않았으면 계정 탭을 열고 추가한다. 이 계정으로 Xcode는 동기화를 수행한다.
distribution certificate라고 불리는 서명 주체를 만들어 보자. 이것은 앱을 서명하고, 어떤 앱이 게정 소유자에 의해 빌드 및 제출된 것인지 확인하는데 사용된다. 인증서와 ID를 관리하는 것에 대한 공식 문서는 http://mng.bz/64k9에 있다. 기본 단계는 다음과 같다:
  1. 아직 안했으면 Xcode에 애플 개발자 계정으로 로그인한다.
  2. 설정에서 계정과 인증서를 관리한다.
  3. (개발이 아닌)배포를 위한 신규 서명 주체를 생성한다.
서명 주체가 해결되면, iOS Distribution이라는 항목이 목록에 나타나야 한다. You may already have an iOS Development identity as well from testing.

10.5.2 앱 ID 식별자 설정
이제 Apple Developer Member Center를 통해 앱 ID 식별자 상세를 설정한다. 식별자는 앱이 앱서비스에 접근할 수 있도록 하는데 사용된다. 애플 페이나 헬스킷 같은 것이 그 예이다. 여러 서비스를 사용하기 위해 하나의 앱에 여러개의 식별자가 사용될 수도 있으나, 여기서는 하나만 사용한다.
https://developer.apple.com/membercenter로 가서 여러분의 애플 ID로 로그인한다. 그 다음 Certificates, Identifiers와 Profiles를 선택한다. 신규 앱 ID를 만들어 애플 생태계 안에서 앱을 추적하려고 한다. 앱 ID에 대해서는 http://mng.bz/8hj1의 공식 문서를 보자. 기본 스텝은 다음과 같다:
  1. 신규 앱 ID를 등록한다
  2. 앱의 이름을 정하고 Explicit App ID 옵션을 사용한다. 번들 ID를 기입하는데, 기본값은 코르도바 config.xml안에 정의된 <widget> 태그의 id 값이다(아니면, Xcode 프로젝트에서 번들 ID를 바꾼 후 쓸수도 있다). 무튼, 여러분 앱의 번들 ID와 일치해야 한다.
  3. 활성화 되어야할 서비스를 선택한다. 예를 들어, 앱에서 헬스킷을 상요한다면 관련 옵션을 선택해야 한다. 추가적인 서비스가 필요 없는 앱이고, 여러분이 필요하다고 생각치 않으면, 기본값으로 남겨둔다.
  4. 앱 ID 등록을 위해 서밋한다.
이렇게 앱 ID를 등록하면, 다음 단계에서 아이튠즈 커넥트와 Xcode가 이를 사용할 것이다.

10.5.3 아이튠즈 커넥트에서 리스트 생성
이제 아이튠즈 커넥트에서 리스트를 만들어야 한다. 아이튠즈 커넥트는 애플에서 앱 제출을 관리하기 위해 사용하는 포털 서비스이다. 새로운 레코드를 생성하기 위해 앞서 만든 앱 ID를 사용할 것이다. https://itunesconnect.apple.com의 아이튠즈 커넥트로 로그인하고 시작한다. 아이튠즈 커넥트에 대한 상세 정보는 http://mng.bz/92eZ에서 확인할 수 있다. 일반적인 단계는 다음과 같다:
  1. 새 iOS 앱을 추가한다.
  2. 앱 상세 내용을 채우고, 앱에 맞는 번들 ID를 선택한다.
  3. 앱 리스트를 생성한다. 추가적인 내용은 이후에 채운다.
이제 신규 앱리스트를 만들었고, 마침내 앱스토어에 제출할 준비가 되었다. 이전에 생성했단 앱ID를 가지고 앱 리스트에 연결한다. 리스트의 모든 내용을 채우기 전에 앱을 빌드하고 Xcode로 먼저 업로드를 해야 한다. 그 다음 리스팅 작업을 완료를 위해 다시 돌아온다.

10.5.4 Xcode로 앱을 빌드하고 업로드
현재 앱 ID도 만들었고, 아이튠즈 커넥트 앱 리스팅 작업도 시작했다. Xcode로 앱을 빌드하고 업로드 할 수 있다. 먼저 Xcode가 코르도바 프로젝트에 맞는 버전인지 확인해야 한다. 명령줄에서 프로젝트 루트로 이동한 후 build를 실행한다:

$ cordova build ios --release

이렇게 하면, 프로젝트에 작업했던 최종 내용이 iOS 프로젝트에 반영된다. platforms/ios/AppName.xcodeproj 파일을 Xcode로 연다. General 뷰에서 앱에 관한 상세 내용을 볼 수 있는데, 제대로 설정되었는지 여기서 확인한다:
  * Bundle Identifier는 앞서 앱 ID에서 지정했던 값과 일치해야 한다.
  * 버전 넘버와 빌드 넘버가 의도한 값을 반영해야 한다.
  * Team은 여러분의 애플 계정으로 설정되어야 한다.
  * Deployment target과 devices는 여러분이 지원하려고 하는 장치와 버전을 반영해야 한다.
Xcode는 뭔가 올바로 설정을 안했을 때 교정하기에 좋다. 에러 메세지도 검토하는데, 몇 몇 경우는 Xcode가 알아서 해결해 줄 것이다. 한편, 이 때 기기가 컴퓨터에 연결되어 있으면 안된다.
이제 앱을 빌드하여 아카이브 형태(업로드를 위한 묶음)로 만들고, 업로드 할 수 있다. 전체 도큐먼트는 http://mng.bz/20m2를 확인하자. 기본 단계는 다음과 같다:
  1. 앱 아카이브를 만든다.
  2. 방금 만든 아카이브를 점검한다. 이 작업은 아카이브가 제대로 업로드되고, 유효성 테스트를 통과하기 위함이다.
  3. 앱을 서밋한다. 아이튠즈 커넥트로 실제 파일이 서밋될 것이다.
이제 앱 작업을 마치고 업로드 했으니, 아이튠즈 커넥트 리스팅 작업을 완료시키고 검수를 위해 제출한다!

10.5.5 아이튠즈 커넥트 리스팅 작업 완료
앱 리스트에는 지정해줘야 할 상세 정보가 많다. 몇 가지 필수 정보를 지정하지 않고 서브밋을 시도한다면, 빠뜨린 정보가 무엇이고 무엇을 수정해야 할지 알려줄 것이다.
앱 아카이브를 업로드하면, 아이튠즈 커넥트는 지원하려는 기기를 결정한다. 아이튠즈 커넥트가 감지한 여러 기기들에 대해서 각각 최소 한장의 스크린 샷을 업로드해야 한다. 이 이미지를 생성하는 쉬운 방법은 아이폰 시뮬레이터를 여러 버전으로 에뮬레이션 하는 것이다. 정확한 사이즈와 기준은 스크린샷 근처의 도움말 아이콘을 선택하면 볼 수 있다. 한편 앱을 소개하는 짧은 영상을 올릴수도 있다.
리스트 정보의 대부분은 여러분의 앱에 기반해서 채워야 하는데, 설명, 키워드, 고객 지원 URL과 아이콘 같은 것들이 그것이다. 이 작업을 할 때에는 앱 명료하게 설명하고 마케팅 효율을 극대화하기 위한 방법을 고민하는 것이 좋다.
build 섹션에서는 Xcode로부터 업로드된 빌드를 조회할 수 있다. 여러분의 최초 앱이었다면, 하나만 보일 것이다. 목록내 빌드를 선택하고 저장한다.
안드로이드와 마찬가지로 iOS도 앱의 알파, 베타 버전을 서브밋해서 특정 그룹에만 배포할 수 있다. 조기 출시(pre-release) 버전은 테스트할 사용자의 수가 제한되어 있고, 이메일로 초대할 수 있다. 관련 도큐먼트는 http://mng.bz/1Yp4에 있다.
앱 리스트의 나머지 상세까지 다 추가했다면, 저장 버튼을 누르고 검수를 받기 위해 제출한다. 에러가 보인다면, 수정하고 다시 시도한다.
애플은 수동으로 검수하는 프로세스를 가지고 있기 때문에, 앱 변경 내용이 완전히 검수 받고 스토어에 반영될 때까지 몇 일 걸린다. 기간 중에 이슈가 발생하거나 상태 변경이 있으면 통지를 보내준다.

10.5.6 앱 업데이트
앱을 업데이트 하려면, 빌드와 버전 넘버를 먼저 갱신한다. Xcode 프로젝트 파일을 수정하거나, 코르도바 config.xml 파일을 수정한 후 iOS 플랫폼을 제거했다가 다시 추가하는 방식으로 재생성하면 된다.
새버전과 빌드 넘버로, 신규로 빌드하고 업로드 했던 그 과정을 따라하면 된다. 빌드 넘버가 갱신되지 않으면, 업로드 되지 않을 것이다.
새 패키지가 업로드되면, 출시를 위한 새 번호가 상단 바에 보일 것이다. 앱 리스트에 수정할 내용 수정하고(스크린샷이라던가, 메타 정보), 저장을 누른 후 서밋을 한다. 변경도 이전과 같은 검수 프로세스를 타게 되며, 검수가 끝날 때까지는 존재하던 앱이 남아있을 것이다.
자동으로 출시하도록 선택한다면, 검수가 끝나자마자 바로 앱이 라이브 상태가된다. 그렇지 않으면, 검수 후에 직접 로그인 해서 새 버전을 출시해야 한다. 어느 시점에 새 버전을 직접 출시하고 싶다면, 수동 출시가 유용하다.

10.6 요약
스토어에 앱을 업로드하는 것은 앱 개발의 궁극적인 목적이다. 이번 장에서는 아이콘을 생성하고, 앱을 빌드하고, 제출하는 단계에 대해 다뤘다. 이번 장에서 다뤘던 주요 주제를 복기해 보자:
  * 아이콘과 스플래쉬 화면은 각기 다른 장치들의 수만가지 사이즈를 지원해야 한다.
  * 안드로이드 앱을 빌드하고, 키스토어로 서명한 후 출시 준비를 했다. 개발자 콘솔을 사용해서 플레이 스토어에 앱을 업로드하고, 앱 리스트를 만들었다.
  * iOS 앱은 앱 ID가 필요했고, 아이튠즈 커넥트로 리스틀르 만들고, Xcode로 빌드해서 업로드할 수 있었다. 아이튠즈 커넥트로 앱 리스팅을 완료하면 검수를 위해 제출한다.
모든 단계를 진행해보고 나면, 앱을 최적화하고 앱스토어에 출시할 수 있을 것이다. 여러분의 앱 개발을 완료하게 된 것을 축하한다. 나중에 출시하게 되면 저자 초럼을 통해 공유해 주기 바란다!
