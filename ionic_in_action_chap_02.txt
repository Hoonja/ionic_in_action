

앱 개발을 위한 작업 환경 구성하기

이 장에서 다룰 내용
어떤식으로 동작하는지 알아보기 위해 샘플 프로젝트 생성하기
컴퓨터 상의 시뮬레이터로 샘플 앱 미리보기
샘플 앱을 빌드하고, 연결된 장치에서 불러오기

	여러분은 이제 아마 실제로 모바일 앱을 작성하기 위해 코드를 짤 준비가 되어 있을 것이다. 지금부터는 아이오닉을 설치하기 위해 필요한 도구를 얻는 단계부터 알아보고, 이어 새로운 샘플 프로젝트를 생성하도록 도와줄 것이다. 이 장이 끝날 무렵에는 연결된 장치나 시뮬레이터를 통해 미리볼 수 있는 동작하는 샘플 앱을 하나 갖게 될 것이다. 이번 장에서 다루는 단계는 이후의 장에도 계속 적용될 내용이라 유용하게 참고하면 되겠다.

그림 2.1 브라우저, 에뮬레이터, 연결된 장치에서 샘플 앱을 실행해 볼 것이다.

	이 장은 개발 환경 구성을 설명하기 위한 두 개의 파트를 가지고 있다. 첫 번째 파트에서는 기본 도구를 설치하고, 샘플 앱을 실행하고, 브라우저에서 미리 보는 것을 빠르게 설명한다. 신속하게 감을 잡고 개발을 시작하기에 좋은 방법으로, 개발 환경을 설정하는 과정이라고 생각해보자. 두 번째 파트는 그림 2.1에서 볼수 있는 것처럼, 만든 앱을 에뮬레이터나 연결된 디바이스에서 실행하는 방법을 안내한다. 얼른 앱부터 만들어보고 싶다면, 이번 장은 건너뛰고 나중에 필요할 때 돌아와도 괜찮다. 에뮬레이터와 연결된 장치는 카메라나 GPS와 같이 장치의 특수 기능을 사용하려고 하거나, 실제의 모바일 환경에서 테스트해야 하는 상황이 올 때까지는 필수적인 부분은 아니다.
	이 책에서는 커맨드 라인을 익숙하게 사용할 것이다. 윈도우 사용자라면, 프로그램 목록에서 찾을 수 있는 커맨드 프롬프트를 사용한다.. OX X 사용자라면, 런치 패트나 스팟라이트에서 terminal을 입력함으로써 찾을 수 있는 터미널을 사용하면 된다. 많이 사용하게 될 것이므로, 윈도우 사용자라면 바탕 화면에 바로가기를 추가하고, OS X 사용자라면 독에 추가해두길 추천한다. 리눅스 유저라면 관련 모듈을 추가로 설치해야 할 필요가 있을지도 모르겠는데, 빠진 패키지를 설치하기 위해서 도큐먼트를 충분히 참고해야 한다.
퀵스타트 가이드
	이번 섹션에서는 개발 환경을 구축하고, 첫 번째 앱을 개발하고, 브라우저에서 미리 보기를 하기 위해 필수적으로 필요한 부분들을 소개할 것이다. 우리는 하이브리드 앱을 개발하고 있기 때문에, 브라우저는 미리보기로 확인하기에 가장 손쉬운 도구이다.
	개발할 때 가장 많은 시간을 미리보기나 개발을 위한 브라우저를 사용하면서 보내게 된다. 앱 개발이 어느 정도 무르익을 무렵에는 실제 모바일 장치를 시뮬레이션하기 위해 에뮬레이터를 쓰거나 연결된 장치를 사용하게 될 것이다. 그림 2.2는 일반적인 개발 흐름을 나타내는데, 이번 섹션에서는 브라우저에서 미리보기까지를 소화하고, 다음 섹션에서 나머지 두 부분을 살펴볼 것이다.

아이오닉 개발 흐름
코드 에디터
ionic serve : 브라우저에서 미리보기
ionic emulate : 컴퓨터 상의 에뮬레이터에서 미리보기
ionic run : 연결된 장치에서 미리보기
[첫 번째 그림]
손쉬운 미리보기
브러우저를 디버깅에 사용
터치 조작을 테스트하기 어려움
코르도바로 네이티브 API를 사용할 수 없음
[두 번째 그림]
많은 타입의 장치를 시뮬레이션 할 수 있음
느린 미리보기
에뮬레이터를 통한 디버깅이 가능
터치 조작을 시뮬레이션 할 수 있음
[세 번째 그림]
가장 느린 미리보기
플랫폼 도구로 디버깅
실제로 터치 조장을 하면서 테스트
코르도바로 네이티브 API를 모두 호출할 수 있음

그림 2.2 일반적인 개발 흐름과 각 단계의 특징

개발 환경 설정
	아이오닉으로 모바일 앱을 개발을 시작하기에 앞서, 필요한 소프트웨어들이 설치되어 있는지 확인할 필요가 있다. 어떻게 설치하고 설정할지 설명하겠다. 표 2.1을 보면, 설치가 필요한 소프트웨어의 목록을 확인할 수 있다.

소프트웨어
홈페이지
Node.js
http://notejs.org
Ionic CLI
http://ionicframework.com
Cordova
http://cordova.apache.org
표 2.1 개발 환경을 위해 필요한 소프트웨어들
	옵션 사항이지만, 소스 코드 추적을 용이하게 하고, 버전 관리를 위한 Git(깃이라 읽는다)을 사용하기를 권한다. 필수는 아니지만, 앞으로 진행하면서 Git 커맨드를 종종 사용할 것이다. Git에 아직 익숙하지 않다면 설치할 필요는 없다. 자세한 내용은 http://git-scm.org에서 확인할 수 있다.

Node.js 설치하기
	Node.js(그냥 Node라고도 부른다)는 브라우저 외부에서 자바스크립트를 실행하기 위한 플랫폼이다. 개발자는 이를 통해 어디서나 실행될 수 있는 자바스크립트로 작성된 애플리케이션을 만들수 있다. 아이오닉과 코르도바는 Node를 기반으로 하기 때문에, Node는 첫 번째로 설치가 요구된다.
	Node는 http://nodejs.org를 방문해서 여러분의 플랫폼에 맏는 패키지를 다운로드하고 설치할 수 있다. 이미 Node를 설치했다면, 최신의 안정적인 버전으로 업그레이드한다.
	Node가 제대로 설치되었는지 확인하기 위해서 버전 체크를 위한 다음의 명령어를 입력해본다. OS X 유저라면 터미널을 열고, 윈도우 사용자라면 커맨드 프롬프트를 연다.

[코드]
$ node –v
v0.12.0
	Node 설치를 하면서 문제가 발생한다면, 웹사이트의 문서를 참고하기 바란다. 이제 다음으로 Node의 패키지 매니저를 사용하여 아이오닉과 코르도바를 설치하겠다.

아이오닉 CLI와 코르도바 설치
	아이오닉과 코르도바는 커맨드 한 줄로 설치할 수 있다. 이 커맨드는 npm(Node Package Manager)를 사용하여 CLI 툴을 설치한다. Git이 이미 설치되어 있는지 확인하고 다음을 실행한다:

[코드]
$ npm install -g cordova ionic
	인터넷에 연결된 속도에 따라 몇 분 정도 걸릴 것이다. 맥 유저라면 sudo 권한 없이 모듈을 설치할 수 없을지도 모른다. 이런 경우에는 npm의 파일 권한을 올바로 설정하는 방법을 추천하는데, 이렇게 하면 루트 권한 없이 실행시킬 수 있다. 자세한 방법은 http://mng.bz/Z97k 의 설명을 참고하자.
	이 툴들은 둘 다 실행 시 Node를 이용하는데, 사실 cordova나 ionic이라는 별칭으로 호출하는 것일 뿐이다. 제대로 설치되었고, 에러 없이 실행되는지 확인하기 위해서 다음의 명령을 실행해 본다(이후 이 책에서는 아래의 버전을 이용해서 진행할 것이다):

[코드]
$ cordova -v
4.2.0
$ ionic -v
1.3.14
	개발 환경을 설정하는 것은 중요한 일이다. 각각의 요소가 설치되어 있는지, 최신 버전인지 확인하자. 아이오닉은 업데이트되면, 가능할 때 통지할 것이므로 주시하기 바란다. 코르도바는 새로운 기능이 추가되었거나, 버그가 수정되었을 때 업데이트를 하자. 코르도바는 경우에 따라 여러분이 개발중인 프로젝트도 업데이트하기를 요구할 수 있으므로, 필요할 때만 해야 하고, 변경 사항에 대한 문서를 항상 체크해야 한다. 아이오닉과 코르도바를 업데이트 하기려면, 다음의 커맨드를 싱행하면 된다(말했지만, 아이오닉은 업데이트가 가능할 때 알려줄 것이다):

[코드]
$ npm update -g ionic
$ npm update -g cordova

	이제 필요한 것은 다 챙겼으니, 샘플 앱을 만들어 보자.
새 프로젝트 시작

[글상자]
아이오닉 커맨드 라인 도구
아이오닉 도구에서 사용할 수 있는 명령어는 여러가지가 있다. 어떤 명령들이 있는지 살펴보고 싶다면, ionic --help를 실행하면 된다.
도구의 기능을 더 상세히 알고 싶고, 문서를 참고하고 싶다면 https://github.com/driftyco/ionic-cli로 방문해서 소스코드를 살펴보자.

	아이오닉은 새 프로젝트를 설정하기 위해 start라는 명령어를 제공한다(그림 2.3). 이 때 사용할 수 있는 시작 템플릿을 몇 가지 제공하는데, 여기서는 sidemenu  템플릿을 이용할 것이다. 다음의 명령어를 실행하고, 새로 생긴 디렉토리로 이동하자.

[코드]
$ ionic start chapter2
$ cd chapter2

	진행 중에 아이오닉 계정을 만들 것인지 물어볼 수도 있는데, 지금은 무시한다. 이 계정은 아이오닉의 서비스를 이용할 때 도움이 되는 것인데, 지금은 쓰지 않을 것이고, 나중에 언제든지 만들 수 있기 때문이다.
	아이오닉은 chapter2라는 새폴더를 생성하고, tabs 템플릿을 사용한 새 프로젝트를 만들어 줄 것이다. 생성된 각각의 폴더들이 어떤 의미를 가지는지 잠시 살펴보도록 하자.

그림 2.3 ionic start 커맨드로 간단한 프로젝트 골격을 구성할 수 있다.


프로젝트 폴더 구조
	프로젝트 폴더는 여러 개의 파일과 디렉토리를 가지는데, 각각이 고유한 목적을 가지고 있다. 새 프로젝트에서 눈여겨 봐야할 파일과 디렉토리는 다음과 같다:
.bowerrc
.gitignore
bower.json
config.xml
gulpfile.js
hooks
ionic.project
package.json
plugins
scss
www
	이것이 어떤 아이오닉 앱이든 가지는 일반적인 구조이다. 이 중 코르도바가 필요로 하거나, 코르도바 설정에 관련된 파일과 디렉토리는 config.xml, hooks, platforms, plugins와 www이다. (역주: 1장에서 설명 했듯이 아이오닉은 내부에 코르도바를 포함하고 있다. 코르도바만으로도 하이브리드 앱을 제작할 수 있는데, 이 경우에도 위에서 언급한 파일과 디렉토리가 코르도바 프레임워크를 통해 만들어진다는 의미이다.) 나머지는 아이오닉에 의해 만들어진 것들이다.아이오닉은 프로젝트에 관련된 라이브러리들을 관리하고, 로딩하기 위해서 Bower와 npm을 사용한다.

[글상자]
Bower and npm
Bower와 npm은 웹 애플리케이션에서 사용되는 부가적인 파일들을 다운로드하는 작업을 도와주는 패키지 관리 도구이다. Bower는 jQuery나 부트스트랩과 같은 프론트엔드 파일를 용이하게 하기 위한 용도로, npm은 Node.js 프로젝트나 Node 애플리케이션을 위한 패키지를 추가하기 위한 것이다.
아이오닉에서는 프론트엔드 아이오닉 코드는 Bower로 로딩되고, Gulp 의존 모듈은 npm으로 로딩된다. Gulp는 자바스크립트를 대상으로 많이 쓰는 빌드 툴인데, 이에 대해서는 후에 다룰 것이다.
Bower에 대한 정보는 http://bower.io에서, npm에 대한 정보는 https://npmjs.org에서 확인할 수 있다.
	config.xml 파일은 코르도바가 플랫폼 파일들을 생성할 때 사용된다. 여기에는 제작자, 전역 설정, 플랫폼 종류별 설정, 사용하려는 플러그인.. 등의 정보가 들어있다. 디폴트로 생성된  config.xml에는 제작자가 Ionic, 앱 이름은 HelloWorld로 되어 있다. https://cordova.apache.org/docs/en/edge/config_ref_index.md.html에서 모든 옵션에 대해서 읽어볼 수 있다.
	www 디렉토리는 웹뷰 내에서 실행될 웹 애플리케이션 관련 파일들을 모두 포함하고 있다. 그 안에는 index.html을 포함하고 있는데, 원하는 파일로 구성할 수 있다. 디폴트로 아이오닉은 AngularJS 애플리케이션의 기본 구조로 구성한다.
	파일과 디렉토리의 더 상세한 내용은 차차 다룰 것이다. 이제 파일이 생성되었으니, 샘플 앱을 미리 보기로 확인할 수 있다.
브라우저에서 미리보기
	브라우저에서 앱을 미리 볼 수 있다. 이 방법은 장치나 에뮬레이터에 프로젝트를 빌드해서 설치하는 방법을 쓰지 않고도 디버깅과 개발을 할 수 있는 아주 쉬운 방법이다. 보통은 이 방법으로 앱을 개발한 후, 좀 더 완벽을 기할 시점에 에뮬레이터와 디바이스에서 테스트 한다. 다음의 커맨드는 간단한 기능의 웹서버를 구동하고, 브라우저를 열고, 파일이 바뀔 때마다 자동으로 리프레시를 시켜주는 명령이다:

[코드]
$ ionic server

	주소를 선택하라는 프롬프트가 뜰 수도 있는데, 대부분은 localhost를 선택하면 된다. 여러분의 컴퓨터에 기본으로 설정된 브라우저가 실행 되면서, 8100 포트로 접속을 할 것이다. 다른 브라우저를 통해 http://localhost:8100으로 접속해도 된다. 가장 좋은 방법은 여러분이 설치하려고 하는 대상 장치에서 사용하는 브라우저를 쓰는 것이다. 그 브라우저가 장치의 웹뷰가 사용하는 브라우저이기 때문이다.
	브라우저를 통해서 앱을 보기 때문에, 웹사이트를 개발할 때 사용했던 개발 도구를 사용할 수 있다. 개발이 진행되면서, 개발과 디버깅을 도와줄 그림 2.4와 같은 도구를 원하게 될 것이다.

그림 2.4 브라우저에서 앱을 실행하면, 브라우저의 개발 도구를 활용할 수 있다.


[글상자]
어떤 브라우저를 써야 하나?
앱 미리보기를 위해 어떤 브라우저든 자유롭게 선택할 수 있지만, 크롬이나 사파리를 사용할 것을 진지하게 고려해보기 바란다. iOS는 웹뷰를 위해 사파리를 사용하고, 안드로이드는 안드로이드 브라우저를 사용한다. 가능하다면, PC에서 같은 브라우저를 사용하는 것이 모바일에서의 환경을 가장 효과적으로 시뮬레이션하는 방법이 될 것이다. 안드로이드 브라우저는 크롬과 동일하지는 않으나, 가장 근접한 선택이다.

모바일 디바이스에 탑재되어 있고, 웹뷰에서 사용되는 브라우저는 PC 상의 브라우저와 동일하지는 않다. 그러나 그들은 확실히 친척 관계 이고, 일반적인 특징들은 동일하게 지원하는 경향이 있다.
윈도우 버전의 사파리는 미리보기를 위해 사용할 수 없는데, 애플이 더 이상 지원하지 않기 때문이다.


미리 보기 환경 구축
	이번 섹션에서는 여러분이 만든 앱을 확인하기 위해 에뮬레이터와 연결된 디바이스를 설정하는 법을 설명하려고 한다. 두 가지 방법은 브라우저가 아닌 모바일 장치에서 사용할 단계의 앱을 돌려볼 수 있게 해준다. 에뮬레이터는 가상의 장치인데, 모바일 플랫폼을 실제로 구동시키고, 진짜 물리적인 장치처럼 앱을 실행시킬 수 있다. 연결된 장치는 USB 케이블로 PC에 연결한 실제 장치로, 거기에 바로 앱을 설치할 수 있다.
	설치를 완료하려면, 다음의 작업을 실행해야 한다:
앱을 빌드하기 위해 필요한 플랫폼 도구를 설치한다.
미리 보기를 위한 에뮬레이터를 다운로드하고 설정한다.
미리 보기를 위한 장치 연결을 설정한다.
각각의 플랫폼을 지원하고 실행하기 위해 프로젝트를 설정한다.
	다음 섹션은 특히 안드로이드를 위주로 ,시작하는 방법에 대해 많은 상세한 내용을 다루고 있다. 복잡할까봐 너무 걱정할 필요는 없다. 대부분 작업은 한번으로 끝난다. 툴 셋업을 마치면, 미래의 어떤 프로젝트에서든 재사용할 수 있다. 이 장의 지금까지 다뤘듯이 툴 사용만으로도 프로토타입 앱을 만들 수 있다. 나중에 장치에서 테스트를 시작할 준비가 되었을 때 이 섹션으로 돌아와도 된다.
플랫폼 도구 설치
	에뮬레이터를 돌리거나 연결된 장치로 앱을 배포하려면 소프트웨어를 추가로 설치해야 한다. 단, 원하는 플랫폼에 대해서만 설치하면 된다. 표 2.2는 안드로이드와 iOS 개발을 위해 필요한 소프트웨어를 보여준다. 아이오닉 1.0 버전은 안드로이드와 iOS만 완벽히 지원한다. 윈도우 폰이나 파이어폭스 OS와 같은 다른 플랫폼은 향후 버전에서 지원될 것이다.

표 2.2 안드로이드와 iOS를 위해 설치해야 할 소프트웨어
플랫폼
소프트웨어
구할 수 있는 곳
iOS
Xcode
맥의 앱스토어에서 “Xcode”를 검색
안드로이드
안드로이드 스튜디오
http://developer.android.com/sdk/index.html

OS X : iOS를 위한 Xcode만 설치
애플은 에뮬레이션과 배포를 위해 Xcode를 필요로 한다. 맥에서만 사용할 수 있기 때문에, iOS를 지원할 계획이라면 맥이 필요하다.
	Xcode는 앱스토어를 열고 “Xcode”를 검색하면 다운로드 받을 수 있다. 애플의 공식 애플리케이션이며(그림 2.5), 용량이 상당히 크다(3GB가 넘는다). 따라서 충분한 가용 공간이 있는지 확인해야 한다.
안드로이드 스튜디오 설치
	안드로이드 개발은 윈도우, 맥, 리눅스 등 어떤 환경에서든 할 수 있다. 안드로이드는 크로스 플랫폼을 지원하는 자바위에서 구동된다. 안드로이드 개발은 두 가지 방법으로 가능한데, 안드로이드 스튜디오를 사용하거나 Android stand-alone SDK 도구를 사용하는 것이다. 안드로이드 스튜디오는 SDK가 내장된 완전한 IDE이다. http://developer.android.com/sdk/index.html에서 다운로드를 받을 수 있다.
	여기서는 SDK만 필요하다. 안드로이드 스튜디오는 네이티브 안드로이드 앱을 개발을 위한 훌륭한 IDE지만, 이 책에서는 사용하지 않을 것이다. 따라서 여러분의 플랫폼에 맞는 stand-alone SDK 도구만 설치하기를 권한다. 설치와 관련된 추가적인 설명은 http://mng.bz/flIn 를 참고하길 바란다.
	stand-alone SDK를 맥이나 리눅스에 설치했다면, 안드로이드 명령어를 쉽게 실행할 수 있도록 디렉토리를 PATH에 추가하기 바란다. 설치가 성공했는지 확인하고 싶다면, 도움말을 보기 위한 다음 명령어를 실행해 보면 된다.

[코드]
$ android -help
	이제 에뮬레이터를 설정할 준비가 되었다.



에뮬레이터 설정하기
	에뮬레이터는 여러분의 컴퓨터에서 가상의 디바이스를 실행해서 실제 모바일 장치의 환경을 시뮬레이션 할 수 있게 한다. 예를 들어, 안드로이드 에뮬레이터는 가상 디바이스 내에서 실제 안드로이드 운영 체제를 실행하고, 개발 중인 앱을 설치한다.
	배포 대상으로 하는 여러가지 타입의 디바이스에서 테스트하거나, 가지고 있지 않은 디ㅏ이스에 앱을 테스트하고 싶을 때 에뮬레이터의 이용은 적절하다. 브라우저에 비교하면 느리기 때문에, 브라우저에서 기능적인 테스트는 이미 마쳤을 때 사용하면 좋을 것이다.
	에뮬레이터는 설치가 필요하고, 몇 가지 설정을 해야하며, 다운로드에 시간이 걸릴 수 있다. 안드로이드와 iOS 에뮬레이터 설정법을 알아보자.
iOS 에뮬레이터 설정하기
	Xcode에서 에뮬레이터는 시뮬레이터로 간주된다. iOS 시뮬레이터를 설정하려면, Xcode를 열고 preference 메뉴를 연다. 다운로드 탭을 열면 그림 2.6과 같이 선택 가능한 도큐먼트와 iOS 시뮬레이터 패키지의 목록을 볼 수 있다.
	현재 시점에서 가장 최근의 시뮬레이터만 다운로드하기를 추천한다. 이후에 테스트할 대상에 맞는 iOS 버전의 에뮬레이터를 설치할 수 있다. 도큐먼트는 필요할 때 온라인에서 찾을 수 있으므로 불필요하다. 시뮬레이터와 도큐먼트는 용량이 크기 때문에 시간과 공간 절약을 위해 필요할 때만 다운로드 하자.
	완전히 다운로드하면, iOS 시뮬레이터가 설치되고 사용할 준비가 된다. 에뮬레이터를 리셋하고 싶다면, 구동시킨 상태에서 메뉴로 들어가 ‘Reset Content and Settings…’를 선택하면 된다.

[글상자]
어떤 버전의 안드로이드와 iOS를 써야 하나?
아이오닉은 iOS 7이상, 안드로이드 4이상(2.3 버전은 제한적으로)을 지원한다. 잠재적인 사용자 범위를 늘리기 위해 가능한한 낮은 버전을 지원 대상으로 선정하는 것은 좋은 생각이다. 네이티브 앱 프로젝트에서 최소 버전을 설정하면, 이전 버전의 장치에서 앱이 설치되는 것을 방지한다.
그러나 앱이 추가로 플러그인을 사용하거나 옛 버전에서는 동작하지 않는 기능을 쓰는 경우처럼, 최근의 버전을 지원할 수 밖에 없는 이유도 있을 수 있다.


그림 2.6 Xcode의 Preference에서 iOS 시뮬레이터를 다운로드하고 설치하려면 다운로드 탭을 사용한다.

안드로이드 에뮬레이터 설정하기
	안드로이드 에뮬레이터는 iOS보다 훨씬 자유로운데, 디바이스 명세를 선언함으로써 여러분만의 장치로 빌드할 수 있다. 다행스럽게도(역주: 자유로운게 좋은 점만 있는 것은 아니다) 이 프로세스를 도와주는 프리셋도 존재하는데, 안드로이드 장치의 스펙트럼이 넓은 관계로 iOS보다는 설정하기가 약간은 복잡하다.
	SDK 패키지를 설정하기 위해 커맨드 라인에서 ‘android sdk’를 실행하자. SDK 관리자가 나타날 것이다. 여기에서 모든 버전의 안드로이드를 위한 플랫폼 파일을 다운로드받을 수 있다. 이 책을 읽는 동안은 가장 최근에 릴리즈 된 패키지와 코어 툴만 다운로드하기를 권한다. 다음의 항목들을 다운로드하자(그림 2.7 참고).
도구:
Android SDK Tools
Android SDK Platform-tools
Android SDK Build-tools (가장 최근 버전 선택)
안드로이드 4.4.2(API 19, 코르도바 버전 4.2에 맞춤):
SDK Platform
ARM EABI v7a System Image

그림 2.7 SDK Tools, Platform-toos, 가장 최신의 Build-tools 패키지에 더해서, 최신의 안정적인 안드로이드 SDK 플랫폼과 ARM 시스템 이미지를 선택한다.
	코르도바는 디폴트 API 레벨을 설정하는데(여기서는 코르도바 4.2.0이 API 19에 맞춤), 시간에 지나면서 바뀔 수 있다. (이 책이 집필된 이후에) 지원 스펙이 바뀌었다면, 빠진 SDK 플랫폼을 설치하라는 통지를 받을 것이다.
	이제 에뮬레이터 디바이스의 명세를 정의해야 한다. 이를 통해 RAM 크기라던가, 화면 사이즈와 같은 특징을 정확히 제어할 수 있다. ADV(Android Virtual Device)를 실행하기 위한 명령을 입력하면 그림 2.8과 같은 화면이 나타난다:

[코드]
$ android avd

	‘Device Definitions’ 탭을 선택하면, 알려진 기기들의 설정값에 기반하여 설정을 할 수 있다(그림 2.9). 필자는 Nexus 4나 Nexus 5를 사용할 것을 권한다. 구글이 개발했고, 매우 일반적인 사양이기 때문이다.

그림 2.8 android avd 명령어로 ADV 관리자를 연다.


그림 2.9 원하는 기반 설정을 가진 장치를 선택하고 Create AVD 버튼을 클릭한다.


그림 2.10 Nexus 4 기반의 새 장치를 설정한다. 카메라를 사용할 수 없지만, 실제 기기와 동일한 규격의 장치이다.

	목록에서 디바이스를 선택하고, ‘Create AVD’ 버튼을 클릭하면 장치의 상세 내용을 설정할 수 있는 폼이 열릴 것이다. 여기에서 실행하려는 안드로이드 플랫폼의 버전, 화면 사이즈와 해상도, 기타 등등을 결정할 수 있다. 그림 2.10 처럼 설정한다.
	완료했으면, ‘OK’ 버튼을 클릭하고 여러분의 기기를 저장한다. 필요에 따라 더 만들고, 지울 수 있으나, 에뮬레이팅 중에는 한 가지만 사용한다. 처음 실행할 때는 좀 느린데, 설정과 부팅을 위한 추가 작업을 수행해야 하기 때문이다.
	이제 안드로이드 기기의 설치가 되었고, 여러분의 프로젝트는 원할 때마다 안드로이드 에뮬레이팅을 할 수 있다. 새 에뮬레이터 장치에 앱을 전송하면, 장치가 부팅된다.
연결된 장치 설정
	안드로이드나 iOS 기기가 있다면, 직접 연결해서 개발한 앱을 설치해보고 싶을 것이다.  가지고 있는 장치라면 그 수와 제품의 신형, 구형 여부에 관계 없이 연결 설정을 할 수 있다. 앱스토어로 배포하기 전에 가능하다면 직접 장치에서 테스트하고 싶거나, 터치 환경에서 네이티브 플러그인이 기대한 대로 작동하는지 확인해 보고 싶을 것이다.
iOS 기기 설정하기
	iOS 장치를 연결하고 앱을 실행하기 위해서는 애플 개발자 계정을 가져야 한다. iOS 디바이스는 갖고 있는 맥에서 Xcode를 구동시켜 연결한다. Devices Manager를 열기 위해 메뉴의 Window > Organizer를 선택한다.
	애플은 시큐리티 프로필이 필요한데, 여러분의 폰이 앱 설치를 위한 연결 인증 설정을 할 때 사용된다. Preferences > Accounts 에서 계정을 연결해야 하며, 인증서와 프로비전 프로필 설치를 도와줄 것이다. Xcode는 장치 연결을 위한 단계를 안내해야 하는데, 이게 때때로 변하기 때문이다. 추가적인 도움이 필요하다면, https://developer.apple.com/library/ios/documentation/ToolsLanguages/Conceptual/Xcode_Overview/index.html#//apple_ref/doc/uid/TP40010215-CH24-SW1 를 참고하기 바란다. 프로필이 설정되면, 배포할 준비가 된 것이다.
안드로이드 기기 설정하기
	첫 번째 단계는 갖고 있는 안드로이드 기기에서 개발자 세팅을 켜는 것이다. 기본적으로 안드로이드 장치는 장치 소유자가 직접 설정하지 않으면, 디버깅 툴이 접속할 수 없게 되어있다.
	장치에서 개발자 모드를 켜기 위해 다음의 순서대로 해보자:
설정 화면을 켜고 맨 아래로 이동하여 ‘About Phone’을 찾는다.
‘About Phone’ 뷰의 아랫 부분에 빌드 넘버가 보일 것이다. 개발자 모드를 켜기 위해 7번 탭을 하자. 7번의 탭에 가까워질수록 몇 번의 탭이 남았는지 보일 것이다.
이 작업이 완료되면, 설정 화면으로 뒤로 가는데, 새로운 개발자 옵션 항목을 볼 수 있을 것이다.
	그 다음, USB 디버깅을 켜기 위해 다음을 진행한다:
설정 화면에서 개발자 옵션을 선택한다.
USB 디버깅 옵션이 보일때까지 아래로 스크롤한다.
토글하여 켠다. 선택을 확인하는 창이 뜬다. 이제 폰이 컴퓨터에 연결되면 디버깅을 할 준비가 된 것이다.
	이제 장치가 디버깅을 할 상태가 되었고, 컴퓨터에 연결되면 시스템은 빌드하여 장치로 배포하기 위해 감지 할 수 있게 된다.
프로젝트에 플랫폼 추가하기
	에뮬레이터나 장치에서 실행해보기 전에 프로젝트가 선택한 플랫폼을 지원할 수 있게 설정해야 한다. 아이오닉 툴을 사용하기 위해 다시 커맨드 라인을 연다. 아래의 두 명령어는 iOS와 안드로이드를 위한 프로젝트 파일을 생성한다:

[코드]
$ ionic platform add ios
$ ionic platform add android

	한 명령어에 하나의 플랫폼을 추가할 수 있다. 따라서 여러개의 플랫폼을 지원하고 싶다면, 각각 명령을 실행해야 한다. 각 플랫폼에 따라 어떻게 다른 태스크가 발동 되는지 볼 수 있을 것이다.
	platforms 디렉토리를 보면, 각 플랫폼에 따라 플랫폼 의존적인 파일들이 포함된 새 폴더가 생성되어 있을 것이다. 현재는 기본 생성된 앱을 위한 파일들이지만, 앞으로 이 파일들을 변형되면서 최종 앱을 생성하기 위해 사용될 것이다.
에뮬레이터에서 미리보기
	이제 최소한 하나의 플랫폼은 여러분의 앱 프로젝트에 추가가 되었고, 앱 실행을 위한 플랫폼별 애뮬레이터 중 하나를 사용할 수 있게 되었다. 아직 에뮬레이터를 설치하지 않았다면 그것부터 먼저 해야 한다. 에뮬레이터는 좀 더 실제적인 환경에서 테스트하기에 멋진 도구이지만, 개발 중에 쓰기에는 느리다. 에뮬레이터에서 구동하고 확인하는 작업은 시간이 다소 걸리며, 최초 실행은 좀 더 하다. 맥에서 개발하고 있고 iOS를 에뮬레이팅한다면, ios-sim도 설치를 해야 한다.(역주: 현재는 별도로 설치할 필요가 없다.)

[코드]
$ npm install -g ios-sim

이제 emulate 커맨드로 앱 애뮬레이션을 할 수 있다.

[코드]
$ ionic emulate ios
$ ionic emulate android

	에뮬레이터는 수 많은 태스크가 실행된 후에 열린다. 커맨드 라인에서 빌드, 필요한 파일 생성 태스크에 관한 수 많은 아웃풋을 보게 될 터인데, 성공 메세지가 주루룩 이어지다가 에뮬레이터가 구동되고 앱이 로딩된다.
	안드로이드로 에뮬레이팅 할 때는 --target=NAME을 사용하여 여러분이 생성한 특정 디바이스에서 앱이 실행되게 할 수 있다. 이렇게 하지 않으면, 기본 에뮬레이터가 사용된다. iOS 경우에는 에뮬레이터가 한 번 열리면, 탑 메뉴 > Hardware에서 바꿀 수 있다.
	이미 에뮬레이터를 실행했다면, 열려있는 에뮬레이터 창을 닫지 않고 emulate 커맨드를 재 실행할 수 있다. 이렇게 하는게 매번 에뮬레이터를 닫고 재구동하는 것보다 빠른데, 에뮬레이터가 재부팅을 할 필요가 없기 때문이다.
	아이오닉은 앞서 브라우저에서 실행할 때 봤듯이 라이브 리로드로 앱을 재실행 할 수 있는 강력한 기능을 갖고 있다. 이 기능은 시간을 굉장히 절약시켜 줄 뿐더러, 터미널로 콘솔 로그가 표시되기 때문에 읽어 볼 수 있다. 이 기능에 대한 블로그 글을 http://mng.bz/gKJ8에서 볼 수 있다.
	라이브 리로드로 에뮬레이트 하려면, 커맨드에 추가적인 플래그 -l(라이브 리로드)과 -c(콘솔 로깅)를 붙여 실행한다. 이렇게 하면 터미널에서 브라우저 콘솔에서 봤던 것처럼 로그를 볼 수 있고, 파일을 수정할 때마다 자동으로 재로드가 된다. 예를들면:

[코드]
$ ionic emulate ios -l -c
$ ionic emulate android -l -c

	특정 에뮬레이터에서 실행하려면 사용하려는 에뮬레이터를 선언하는 파라미터를 커맨드에 추가하면 된다. 안드로이드의 경우 --target=[에뮬레이터 이름(AVD 관리자에서 지정했던 이름)]을 사용한다. iOS라면, ios-sim showdevicetypes로 디바이스의 목록을 확인한 후, --devicetypeid [device type]으로 지정한다.

모바일 디바이스에서 미리보기
	실제의 것보다 흥분되는 건 없다. 안드로이드나 iOS 기기가 있다면, 어느 시점에는 만든 앱을 엄청 설치하고 싶을 것이다. 이런 작업이 유용하긴 한 반면, 역시 느리고 디버깅을 하기가 어렵다. 아이오닉은 앞 섹션에서 언급했던 라이브 리로드를 여기서도 동일하게 지원한다. 커맨드 라인으로 미리 보는 빠른 방법은 다음과 같다:

[코드]
$ ionic run ios -l -c
$ ionic run android -l -c

아직 장치가 연결되지 않았다면, 이 명령은 실패할 것이다.
iOS 기기에서 배포하기
	프로젝트에서 먼저 iOS 플랫폼을 추가했어야 한다. platforms/ios 디렉토리로 이동한 후 .xcodeproj 확장자를 가진 파일을 연다. Xcode가 실행되면, 배포 옵션으로 장치를 고를 수 있다(그림 2.11).

그림 2.11 프로젝트를 Xcode로 열면, 설치를 원하는 장치나 에뮬레이터를 선택할 수 있다.

원하는 만큼 여러 번 앱을 배포할 수 있다.  여타의 앱과 마찬가지로, 앱 아이콘이 흔들릴 때까지 누르고 있다가, 아이콘 상단 구석의 X 버튼을 탭 함으로써 앱을 삭제 할 수 있다.

안드로이드 기기로 배포하기
	안드로이드를 프로젝트에 추가했다면, 몇 가지 단계를 거쳐 연결된 안드로이드 기기로 배포를 할 수 있다. USB 디버깅이 켜져있는지 확인을 하고, 그렇지 않다면 돌아가서 2.2.3 섹션을 다시 확인하기 바란다.
	윈도우 환경이라면, https://developer.android.com/tools/extras/oem-usb.html 에서 기기에 맞는 USB 드라이버를 다운로드 한다. OS X 유저라면, 아무것도 할 것은 없다. 리눅스 사용자라면, https://developer.android.com/tools/device.html 에서 과정을 확인한다.
	장치가 연결되었음을 확인하려면, adb devices 명령을 커맨드라인에서 실행해 본다. 그림 2.12와 같은 목록이 보여야 한다. 에뮬레이터 설정도 했었다면, 함께 나열되어야 한다.

그림 2.12 커맨드 라인에서 adb devices를 실행하고, 안드로이드 장치 목록을 확인한다. 에뮬레이터는 emulator-가 앞에 붙어 있고, 실제 장치는 해시값으로 표시된다.

	이제 안드로이드 프로젝트를 빌드해야 하는데, 이렇게 해서 .apk 파일이 생성되면 기기로 설치를 할 것이다. 개발한 앱dmf platforms/android/ant-build 디렉토리 하위에 위치하면서, 파일명이 -debug.apk로 끝나야 한다.

[코드]
$ ionic build android
$ adb -d install platforms/android/ant-build/HelloCordova-debug.apk
	폰의 앱 패널에서 HelloWorld 앱을 찾을 수 있을 것이다. 실행하면 그림 2.13에서 보이듯이 에뮬레이터에서 실행한 것과 같은 앱이 나타날 것이다.

그림 2.13 아이오닉 빌드와 안드로이드 배포 도구를 이용하여, 연결된 안드로이드 장치로 앱이 설치된다.

정리
	이번 장은 개발 환경을 구축하고 샘플 앱을 빌드하기 위한 단계를 소개했다. 앱 자체는 매우 기본적인 것이었지만, 나머지 단계는 여러분이 자신만의 앱을 개발하기 시작할 때 수시로 쓰는 부분이기 때문에 중요하다. 지금까지 다뤘던 중요 꼭지를 돌아보자:
하이브리드 앱을 개발하려면 몇 가지 소프트웨어 설치가 필요하다.
아이오닉 커맨드 라인 유틸리티는 프로젝트를 시작하고, 빌드하고 브라우저에서 실행하기 위한 많은 기능을 제공한다.
브라우저에서 미리보기는 개발과 디버깅의 주된 환경이다.
에뮬레이터는 앱을 확인해 보기에 멋진 도구이며, 설정 방법을 알아봤다.
적절한 설치를 통해 연결된 모바일 장치에서 앱을 실행해 볼 수 있다.
	다음 장에서는 아이오닉 앱 개발의 필수적인 부분, Angula에 대해 알아보겠다.
